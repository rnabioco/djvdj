% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc-similarity.R
\name{calc_similarity}
\alias{calc_similarity}
\title{Calculate repertoire similarity}
\usage{
calc_similarity(
  input,
  data_col,
  cluster_col,
  method = abdiv::jaccard,
  chain = NULL,
  chain_col = global$chain_col,
  prefix = NULL,
  return_mat = FALSE,
  sep = global$sep
)
}
\arguments{
\item{input}{Object containing V(D)J data. If a data.frame is provided, the
cell barcodes should be stored as row names.}

\item{data_col}{meta.data column containing values to use for
calculating pairwise similarity between clusters, e.g. 'clonotype_id'}

\item{cluster_col}{meta.data column containing cluster IDs to use for
calculating repertoire overlap}

\item{method}{Method to use for comparing clusters, possible values include:
\itemize{
\item 'count', count the number of clonotypes overlapping between each cluster
\item A function that takes two numeric vectors containing counts for each
unique value in data_col, e.g. \code{\link[abdiv:jaccard]{abdiv::jaccard()}}
}}

\item{chain}{Chain to use for comparing clusters. To perform calculations
using a single chain, the column passed to the data_col argument must contain
per-chain data such as CDR3 sequences. Set to NULL to include all chains.}

\item{chain_col}{meta.data column containing chains for each cell}

\item{prefix}{Prefix to add to new columns}

\item{return_mat}{Return a matrix with similarity values. If set to
FALSE, results will be added to the input object.}

\item{sep}{Separator used for storing per-chain V(D)J data for each cell}
}
\value{
Single cell object or data.frame with similarity values
}
\description{
Calculate repertoire similarity
}
\examples{
# Calculate repertoire overlap
res <- calc_similarity(
  vdj_sce,
  data_col    = "clonotype_id",
  cluster_col = "orig.ident",
  method      = abdiv::jaccard
)

head(slot(res, "colData"), 1)

# Add a prefix to the new columns
# this is useful if multiple calculations are stored in the meta.data
res <- calc_similarity(
  vdj_sce,
  data_col    = "clonotype_id",
  cluster_col = "orig.ident",
  prefix      = "bcr_"
)

head(slot(res, "colData"), 1)

# Return a matrix instead of adding the results to the input object
calc_similarity(
  vdj_sce,
  data_col    = "clonotype_id",
  cluster_col = "orig.ident",
  return_mat  = TRUE
)

}
\seealso{
\code{\link[=plot_similarity]{plot_similarity()}}, \code{\link[=calc_mds]{calc_mds()}}, \code{\link[=plot_mds]{plot_mds()}}
}
