[{"path":"https://rnabioco.github.io/djvdj/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Ryan M. Sheridan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rnabioco.github.io/djvdj/articles/clustering.html","id":"clustering-sequences","dir":"Articles","previous_headings":"","what":"Clustering sequences","title":"CDR3 Clustering","text":"cluster_sequences() function can used cluster cells based CDR3 sequences, sequences present object. Provide meta.data column containing sequences data_col argument. default cell multiple chains, sequences concatenated. default, distances calculated amino acid sequences using BLOSUM62 substitution matrix, based observed amino acid frequencies substitution probabilities. calculated distances used cluster cells using either Louvain Leiden clustering algorithms. coarseness clusters adjusted using resolution argument smaller values returning fewer clusters. example clustering cells based CDR3 amino acid sequence. Use chain argument cluster using sequences specific chain. default Uniform Manifold Approximation Projection (UMAP) dimensional reduction method performed UMAP coordinates added object. skip step, set run_umap argument FALSE. requires uwot package installed. return clustering results multiple resolutions, vector can provided resolution argument.","code":"so_vdj <- so |>   cluster_sequences(     data_col    = \"cdr3\",     method      = \"louvain\",   # clustering method     dist_method = \"BLOSUM62\",  # method for calculating sequence distances     resolution  = 0.5   ) so_vdj <- so |>   cluster_sequences(     data_col = \"cdr3\",     chain    = \"IGK\"   ) so_vdj <- so |>   cluster_sequences(     data_col = \"cdr3\",     chain    = \"IGK\",     run_umap = FALSE   ) set.seed(42)  so_vdj <- so |>   cluster_sequences(     data_col   = \"cdr3\",     chain      = \"IGK\",     resolution = c(0.4, 0.8, 1.6)   )"},{"path":"https://rnabioco.github.io/djvdj/articles/clustering.html","id":"plotting-clusters","dir":"Articles","previous_headings":"","what":"Plotting clusters","title":"CDR3 Clustering","text":"Clustering results can visualized UMAP projection using generic plotting function plot_scatter(). Colors can adjusted using plot_colors argument. function often generate warning saying rows missing values removed, expected since cells V(D)J data UMAP coordinates.  visualize proportion BL6 MD4 cells cluster can create stacked bargraph using plot_frequency() function. MD4 cells monoclonal expected cells found almost exclusively single cluster.","code":"clrs <- setNames(brewer.pal(11, \"Paired\"), 1:11)  so_vdj |>   plot_scatter(     x = \"cdr3_UMAP_1\",     y = \"cdr3_UMAP_2\",     data_col = \"cdr3_cluster_0.4\",     plot_colors = clrs   ) so_vdj |>   plot_frequency(     data_col    = \"cdr3_cluster_0.4\",     cluster_col = \"sample\",     plot_colors = clrs   )"},{"path":"https://rnabioco.github.io/djvdj/articles/clustering.html","id":"cdr3-motifs","dir":"Articles","previous_headings":"","what":"CDR3 motifs","title":"CDR3 Clustering","text":"Using plot_motifs() function can generate sequence motifs cluster. just need provide data_col chain used clustering. create separate motif cluster, also need provide column containing cluster IDs cluster_col argument. expected see cells within MD4 cluster exact IGK CDR3 sequence.  default, sequences aligned 5’ end trimmed based width parameter. Sequences can aligned 3’ end using align_end parameter. Sequences longer width cutoff trimmed, sequences shorter width cutoff removed. default width cutoff automatically selected cluster include least 75% sequences. example generate motifs last 11 amino acids CDR3.  Plot colors can modified using plot_colors argument number rows used arrange panels can adjusted panel_nrow argument. Like djvdj plotting functions, plot_motifs() return ggplot2 object can modified ggplot2 functions.","code":"so_vdj |>   plot_motifs(     data_col    = \"cdr3\",     cluster_col = \"cdr3_cluster_0.4\",     chain       = \"IGK\"   ) so_vdj |>   plot_motifs(     data_col    = \"cdr3\",     cluster_col = \"cdr3_cluster_0.4\",     chain       = \"IGK\",     align_end   = \"3\",     width       = 11   ) so_vdj |>   plot_motifs(     data_col    = \"cdr3\",     cluster_col = \"cdr3_cluster_0.4\",     chain       = \"IGK\",     plot_colors = brewer.pal(5, \"Set1\"),     panel_nrow  = 4   ) +   theme(     axis.text.x  = element_blank(),     axis.ticks.x = element_blank()   )"},{"path":"https://rnabioco.github.io/djvdj/articles/clustering.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"CDR3 Clustering","text":"","code":"#> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] RColorBrewer_1.1-3 ggplot2_3.4.3      SeuratObject_4.1.4 #> [4] Seurat_4.4.0       djvdj_0.1.0        #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.7          magrittr_2.0.3          #>   [3] spatstat.utils_3.0-3    farver_2.1.1            #>   [5] rmarkdown_2.25          zlibbioc_1.46.0         #>   [7] fs_1.6.3                ragg_1.2.5              #>   [9] vctrs_0.6.3             ROCR_1.0-11             #>  [11] memoise_2.0.1           spatstat.explore_3.2-3  #>  [13] RCurl_1.98-1.12         htmltools_0.5.6         #>  [15] sass_0.4.7              sctransform_0.4.0       #>  [17] parallelly_1.36.0       KernSmooth_2.23-21      #>  [19] bslib_0.5.1             htmlwidgets_1.6.2       #>  [21] desc_1.4.2              ica_1.0-3               #>  [23] plyr_1.8.8              plotly_4.10.2           #>  [25] zoo_1.8-12              cachem_1.0.8            #>  [27] igraph_1.5.1            mime_0.12               #>  [29] lifecycle_1.0.3         pkgconfig_2.0.3         #>  [31] Matrix_1.6-1.1          R6_2.5.1                #>  [33] fastmap_1.1.1           GenomeInfoDbData_1.2.10 #>  [35] fitdistrplus_1.1-11     future_1.33.0           #>  [37] shiny_1.7.5             digest_0.6.33           #>  [39] colorspace_2.1-0        S4Vectors_0.38.2        #>  [41] patchwork_1.1.3         rprojroot_2.0.3         #>  [43] tensor_1.5              irlba_2.3.5.1           #>  [45] textshaping_0.3.6       labeling_0.4.3          #>  [47] progressr_0.14.0        fansi_1.0.4             #>  [49] spatstat.sparse_3.0-2   httr_1.4.7              #>  [51] polyclip_1.10-6         abind_1.4-5             #>  [53] compiler_4.3.1          bit64_4.0.5             #>  [55] withr_2.5.1             MASS_7.3-60             #>  [57] tools_4.3.1             lmtest_0.9-40           #>  [59] httpuv_1.6.11           ggseqlogo_0.1           #>  [61] future.apply_1.11.0     goftest_1.2-3           #>  [63] glue_1.6.2              dbscan_1.1-11           #>  [65] nlme_3.1-162            promises_1.2.1          #>  [67] grid_4.3.1              Rtsne_0.16              #>  [69] cluster_2.1.4           reshape2_1.4.4          #>  [71] generics_0.1.3          gtable_0.3.4            #>  [73] spatstat.data_3.0-1     tzdb_0.4.0              #>  [75] tidyr_1.3.0             data.table_1.14.8       #>  [77] hms_1.1.3               XVector_0.40.0          #>  [79] sp_2.0-0                utf8_1.2.3              #>  [81] BiocGenerics_0.46.0     spatstat.geom_3.2-5     #>  [83] RcppAnnoy_0.0.21        ggrepel_0.9.3           #>  [85] RANN_2.6.1              pillar_1.9.0            #>  [87] stringr_1.5.0           vroom_1.6.3             #>  [89] later_1.3.1             splines_4.3.1           #>  [91] dplyr_1.1.3             lattice_0.21-8          #>  [93] bit_4.0.5               survival_3.5-5          #>  [95] deldir_1.0-9            tidyselect_1.2.0        #>  [97] Biostrings_2.68.1       miniUI_0.1.1.1          #>  [99] pbapply_1.7-2           knitr_1.44              #> [101] gridExtra_2.3           IRanges_2.34.1          #> [103] scattermore_1.2         stats4_4.3.1            #> [105] xfun_0.40               matrixStats_1.0.0       #> [107] stringi_1.7.12          lazyeval_0.2.2          #> [109] yaml_2.3.7              evaluate_0.21           #> [111] codetools_0.2-19        tibble_3.2.1            #> [113] cli_3.6.1               uwot_0.1.16             #> [115] xtable_1.8-4            reticulate_1.32.0       #> [117] systemfonts_1.0.4       munsell_0.5.0           #> [119] jquerylib_0.1.4         GenomeInfoDb_1.36.3     #> [121] Rcpp_1.0.11             globals_0.16.2          #> [123] spatstat.random_3.1-6   png_0.1-8               #> [125] parallel_4.3.1          ellipsis_0.3.2          #> [127] pkgdown_2.0.7           readr_2.1.4             #> [129] bitops_1.0-7            listenv_0.9.0           #> [131] viridisLite_0.4.2       scales_1.2.1            #> [133] ggridges_0.5.4          crayon_1.5.2            #> [135] leiden_0.4.3            purrr_1.0.2             #> [137] rlang_1.1.1             cowplot_1.1.1"},{"path":"https://rnabioco.github.io/djvdj/articles/diversity.html","id":"calculating-diversity","dir":"Articles","previous_headings":"","what":"Calculating diversity","title":"Repertoire Diversity","text":"calculate repertoire diversity store results object meta.data, calc_diversity() function can used. function designed specifically work R package abdiv. diversity metric can selected passing name function method argument. alpha diversity function abdiv package takes species counts input can used. sure read documentation function using ensure appropriate analysis. example calculating Shannon entropy BL6 MD4 samples. Estimations species diversity influenced sample size. One approach address equalize number cells present cluster. downsample argument randomly sample cells sample tested number cells smallest cluster. bootstrapped standard error can also calculated setting number bootstrap samples n_boots argument. Diversity metrics can also calculated specific chain. , column passed data_col argument must contain per-chain data, CDR3 amino acid nucleotide sequences. example diversity calculated based heavy chain CDR3 sequences.","code":"so_vdj <- so |>   calc_diversity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = abdiv::shannon   ) so_vdj <- so |>   calc_diversity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     downsample  = TRUE,     n_boots     = 50   ) so_vdj <- so |>   calc_diversity(     data_col    = \"cdr3_nt\",     cluster_col = \"sample\",     chain       = \"IGH\"   )"},{"path":"https://rnabioco.github.io/djvdj/articles/diversity.html","id":"plotting-diversity","dir":"Articles","previous_headings":"","what":"Plotting diversity","title":"Repertoire Diversity","text":"plot_diversity() function create plots summarizing repertoire diversity sample. named list functions can also passed plot multiple metrics. Two metrics measuring diversity Simpson index Shannon entropy. metrics influenced species richness (number unique sequences) evenness (relative abundance sequences). Pielou’s index specifically measure species evenness. metrics, maximally diverse samples return value 1. expected, BL6 B cells diverse repertoire, MD4 cells restricted repertoire.  Diversity plots can also separated based additional grouping variable treatment group (e.g. pacebo vs drug) disease status (e.g. healthy vs disease). generate boxplots point representing label present cluster_col column. example 3 BL6 3 MD4 samples, 5 points shown boxplot.  Additional arguments provided adjust plot aesthetics. plot_colors parameter can used modify colors, panel_nrow panel_scales arguments adjust plot scales number rows used arrange plots.  plot_diversity() returns ggplot object can modified ggplot2 functions ggplot2::theme(). Plots can adjusted passing aesthetic parameters directly ggplot2, e.g. alpha, linetype, color, etc.","code":"div_fns <- list(   \"simpson\" = abdiv::simpson,   \"shannon\" = abdiv::shannon,   \"pielou evenness\" = abdiv::pielou_e )  so |>   plot_diversity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = div_fns   ) so |>   plot_diversity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     group_col   = \"orig.ident\",     method      = div_fns   ) so |>   plot_diversity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     group_col   = \"orig.ident\",     method      = div_fns,     plot_colors = c(BL6 = \"#3182bd\", MD4 = \"#fec44f\"),     panel_nrow  = 2   ) so |>   plot_diversity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = div_fns,          alpha    = 0.5,         # parameters to pass to ggplot2     linetype = 2,     color    = \"black\"       ) +   theme(strip.text = element_text(face = \"bold\"))"},{"path":"https://rnabioco.github.io/djvdj/articles/diversity.html","id":"rarefaction-curves","dir":"Articles","previous_headings":"","what":"Rarefaction curves","title":"Repertoire Diversity","text":"Another approach ensure differences sample size undue influence diversity results plot rarefaction curves. method involves calculating species diversity different sized samples generated randomly downsampling cluster. default bootstrapped 95% confidence interval also plotted. Calculations used generate rarefaction curves performed using iNEXT package. three diversity calculations can specified method argument: ‘richness’, species richness, equivalent calculation performed abdiv::richness() ‘shannon’, exponential Shannon entropy ‘invsimpson’, inverse Simpson index, equivalent calculation performed abdiv::invsimpson()  95% confidence interval desired, set n_boots 0. example also plot separate line BL6 MD4 sample.","code":"so |>   plot_rarefaction(     data_col    = \"clonotype_id\",     cluster_col = \"orig.ident\",     method      = c(\"richness\", \"shannon\", \"invsimpson\"),     plot_colors = c(\"#3182bd\", \"#fec44f\")   ) so |>   plot_rarefaction(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = c(\"richness\", \"shannon\", \"invsimpson\"),     n_boots     = 0   )"},{"path":"https://rnabioco.github.io/djvdj/articles/diversity.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Repertoire Diversity","text":"","code":"#> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.4.3      SeuratObject_4.1.4 Seurat_4.4.0       #> [4] djvdj_0.1.0        #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3     jsonlite_1.8.7         magrittr_2.0.3         #>   [4] spatstat.utils_3.0-3   iNEXT_3.0.0            farver_2.1.1           #>   [7] rmarkdown_2.25         fs_1.6.3               ragg_1.2.5             #>  [10] vctrs_0.6.3            ROCR_1.0-11            memoise_2.0.1          #>  [13] spatstat.explore_3.2-3 htmltools_0.5.6        sass_0.4.7             #>  [16] sctransform_0.4.0      parallelly_1.36.0      KernSmooth_2.23-21     #>  [19] bslib_0.5.1            htmlwidgets_1.6.2      desc_1.4.2             #>  [22] ica_1.0-3              plyr_1.8.8             plotly_4.10.2          #>  [25] zoo_1.8-12             cachem_1.0.8           igraph_1.5.1           #>  [28] mime_0.12              lifecycle_1.0.3        pkgconfig_2.0.3        #>  [31] Matrix_1.6-1.1         R6_2.5.1               fastmap_1.1.1          #>  [34] fitdistrplus_1.1-11    future_1.33.0          shiny_1.7.5            #>  [37] digest_0.6.33          colorspace_2.1-0       patchwork_1.1.3        #>  [40] rprojroot_2.0.3        tensor_1.5             irlba_2.3.5.1          #>  [43] textshaping_0.3.6      labeling_0.4.3         abdiv_0.2.0            #>  [46] progressr_0.14.0       fansi_1.0.4            spatstat.sparse_3.0-2  #>  [49] httr_1.4.7             polyclip_1.10-6        abind_1.4-5            #>  [52] compiler_4.3.1         bit64_4.0.5            withr_2.5.1            #>  [55] MASS_7.3-60            tools_4.3.1            lmtest_0.9-40          #>  [58] httpuv_1.6.11          future.apply_1.11.0    goftest_1.2-3          #>  [61] glue_1.6.2             nlme_3.1-162           promises_1.2.1         #>  [64] grid_4.3.1             Rtsne_0.16             cluster_2.1.4          #>  [67] reshape2_1.4.4         generics_0.1.3         gtable_0.3.4           #>  [70] spatstat.data_3.0-1    tzdb_0.4.0             tidyr_1.3.0            #>  [73] data.table_1.14.8      hms_1.1.3              sp_2.0-0               #>  [76] utf8_1.2.3             spatstat.geom_3.2-5    RcppAnnoy_0.0.21       #>  [79] ggrepel_0.9.3          RANN_2.6.1             pillar_1.9.0           #>  [82] stringr_1.5.0          vroom_1.6.3            later_1.3.1            #>  [85] splines_4.3.1          dplyr_1.1.3            lattice_0.21-8         #>  [88] bit_4.0.5              survival_3.5-5         deldir_1.0-9           #>  [91] tidyselect_1.2.0       miniUI_0.1.1.1         pbapply_1.7-2          #>  [94] knitr_1.44             gridExtra_2.3          scattermore_1.2        #>  [97] xfun_0.40              matrixStats_1.0.0      stringi_1.7.12         #> [100] boot_1.3-28.1          lazyeval_0.2.2         yaml_2.3.7             #> [103] evaluate_0.21          codetools_0.2-19       tibble_3.2.1           #> [106] cli_3.6.1              uwot_0.1.16            xtable_1.8-4           #> [109] reticulate_1.32.0      systemfonts_1.0.4      munsell_0.5.0          #> [112] jquerylib_0.1.4        Rcpp_1.0.11            globals_0.16.2         #> [115] spatstat.random_3.1-6  png_0.1-8              parallel_4.3.1         #> [118] ellipsis_0.3.2         pkgdown_2.0.7          readr_2.1.4            #> [121] listenv_0.9.0          viridisLite_0.4.2      scales_1.2.1           #> [124] ggridges_0.5.4         crayon_1.5.2           leiden_0.4.3           #> [127] purrr_1.0.2            rlang_1.1.1            cowplot_1.1.1"},{"path":"https://rnabioco.github.io/djvdj/articles/frequency.html","id":"calculating-clonotype-frequencies","dir":"Articles","previous_headings":"","what":"Calculating clonotype frequencies","title":"Clonotype Frequencies","text":"quantify clonotype frequencies store results object meta.data, calc_frequency() function can used. add columns showing number occurrences clonotype (‘freq’), percentage cells sharing clonotype (‘pct’), label can used plotting (‘grp’). default calculations performed cells object. calculate clonotype frequencies separately samples clusters, cluster_col argument can used. just specify name column containing sample cluster IDs cell. cluster_col specified, additional meta.data column (‘shared’) added indicating whether clonotype shared multiple clusters.","code":"so_vdj <- so |>   calc_frequency(data_col = \"clonotype_id\") so_vdj <- so |>   calc_frequency(     data_col = \"clonotype_id\",     cluster_col = \"sample\"   ) so_vdj |>   slot(\"meta.data\") |>   head(2) #>                        orig.ident nCount_RNA nFeature_RNA RNA_snn_res.1 #> BL6_AAACGGGGTTCTGTTT-1        BL6        202           25             0 #> BL6_AAAGATGCAACAACCT-1        BL6         42           20             3 #>                        seurat_clusters     UMAP_1     UMAP_2 #> BL6_AAACGGGGTTCTGTTT-1               0 -1.7410439  0.8840749 #> BL6_AAAGATGCAACAACCT-1               3  0.9088528 -1.2614110 #>                                  type         r cell_type sample #> BL6_AAACGGGGTTCTGTTT-1 B cells (B.T3) 0.6256432   B cells  BL6-1 #> BL6_AAAGATGCAACAACCT-1 B cells (B.T2) 0.6350011   B cells  BL6-1 #>                        exact_subclonotype_id chains n_chains        cdr3 #> BL6_AAACGGGGTTCTGTTT-1                    NA   <NA>       NA        <NA> #> BL6_AAAGATGCAACAACCT-1                     1    IGK        1 CFQGSHVPWTF #>                                                  cdr3_nt cdr3_length #> BL6_AAACGGGGTTCTGTTT-1                              <NA>        <NA> #> BL6_AAAGATGCAACAACCT-1 TGCTTTCAAGGTTCACATGTTCCGTGGACGTTC          11 #>                        cdr3_nt_length    v_gene d_gene j_gene c_gene #> BL6_AAACGGGGTTCTGTTT-1           <NA>      <NA>   <NA>   <NA>   <NA> #> BL6_AAAGATGCAACAACCT-1             33 IGKV1-117   None  IGKJ1   IGKC #>                        isotype reads umis productive full_length paired #> BL6_AAACGGGGTTCTGTTT-1    <NA>  <NA> <NA>       <NA>        <NA>     NA #> BL6_AAAGATGCAACAACCT-1    None   352   21       TRUE        TRUE  FALSE #>                        clonotype_id n_cells clonotype_id_freq #> BL6_AAACGGGGTTCTGTTT-1         <NA>      NA                NA #> BL6_AAAGATGCAACAACCT-1  clonotype34      55                 1 #>                        clonotype_id_pct clonotype_id_shared #> BL6_AAACGGGGTTCTGTTT-1               NA                  NA #> BL6_AAAGATGCAACAACCT-1         1.818182                TRUE #>                        clonotype_id_grp #> BL6_AAACGGGGTTCTGTTT-1             <NA> #> BL6_AAAGATGCAACAACCT-1                1"},{"path":"https://rnabioco.github.io/djvdj/articles/frequency.html","id":"plotting-clonotype-frequencies","dir":"Articles","previous_headings":"","what":"Plotting clonotype frequencies","title":"Clonotype Frequencies","text":"djvdj includes plot_clone_frequency() function visualize differences clonotype frequency samples clusters. default produce bargraphs. Plot colors can adjusted using plot_colors argument.  Frequencies can calculated plotted separately sample cluster using cluster_col argument. panel_nrow panel_scales arguments can used add separate scales sample adjust number rows used arrange plots. expected see MD4 B cells share clonotype, BL6 cells diverse repertoire.  Rank-abundance plots can also generated setting method argument ‘line’. djvdj plotting functions return ggplot objects can modified ggplot2 functions. modify plot aesthetics using ggplot::theme() function. djvdj plotting function also include ability transform axis using trans argument.","code":"so |>   plot_clone_frequency(     data_col = \"clonotype_id\",     plot_colors = \"#3182bd\"   ) so |>   plot_clone_frequency(     data_col     = \"clonotype_id\",     cluster_col  = \"orig.ident\",     panel_scales = \"free\"   ) so |>   plot_clone_frequency(     data_col    = \"clonotype_id\",     cluster_col = \"orig.ident\",     method      = \"line\",     plot_colors = c(MD4 = \"#fec44f\", BL6 = \"#3182bd\"),     trans       = \"log10\"         # log-transform axis   ) +   theme(aspect.ratio = 0.8)"},{"path":"https://rnabioco.github.io/djvdj/articles/frequency.html","id":"umap-projections","dir":"Articles","previous_headings":"","what":"UMAP projections","title":"Clonotype Frequencies","text":"default calc_frequency() divide clonotypes groups based frequency add column meta.data containing group labels. Clonotype frequencies can summarized UMAP projection plotting added ‘grp’ column using generic plotting function plot_scatter(). Cells lack BCR data plotted NAs, color points can adjusted using na_color argument.  Highly abundant clonotypes can also specifically labeled UMAP projection. , pass vector top clonotypes highlight top argument plot_scatter().","code":"# Create UMAP summarizing samples mouse_gg <- so |>   plot_scatter(data_col = \"orig.ident\")  # Create UMAP summarizing clonotype frequencies abun_gg <- so |>   calc_frequency(     data_col = \"clonotype_id\",     cluster_col = \"sample\"   ) |>   plot_scatter(data_col = \"clonotype_id_grp\")  mouse_gg + abun_gg top_gg <- so |>   plot_scatter(     data_col    = \"clonotype_id\",     top         = \"clonotype56\",     plot_colors = c(other = \"#fec44f\", clonotype56 = \"#3182bd\")   )  mouse_gg + top_gg"},{"path":"https://rnabioco.github.io/djvdj/articles/frequency.html","id":"other-frequency-calculations","dir":"Articles","previous_headings":"","what":"Other frequency calculations","title":"Clonotype Frequencies","text":"addition clonotype abundance, calc_frequency() can used summarize frequency cell label present object. example count number cells present cell type sample. plot fraction cells present cell type, can use generic plotting function, plot_frequency(). create stacked bargraphs summarizing cell label present data_col column. color group can specified plot_colors argument.  summarize number cells present cell type, set units argument ‘frequency’. create grouped bargraphs, set stack argument FALSE.  Clusters can also grouped based additional variable treatment group (e.g. placebo vs drug) disease status (e.g. healthy vs disease). generate bargraphs (boxplots) showing mean standard deviation group. example comparing 3 BL6 3 MD4 samples. also notice group labeled NA, cells lacked V(D)J data thus assigned isotype.","code":"so_vdj <- so |>   calc_frequency(     data_col = \"cell_type\",     cluster_col = \"sample\"   ) so |>   plot_frequency(     data_col    = \"cell_type\",     cluster_col = \"sample\",     plot_colors = c(\"#3182bd\", \"#fec44f\")   ) so |>   plot_frequency(     data_col    = \"cell_type\",     cluster_col = \"sample\",     units       = \"frequency\",     stack       = FALSE   ) so |>   plot_frequency(     data_col    = \"isotype\",     cluster_col = \"sample\",     group_col   = \"orig.ident\",     plot_colors = c(MD4 = \"#fec44f\", BL6 = \"#3182bd\")   )"},{"path":"https://rnabioco.github.io/djvdj/articles/frequency.html","id":"p-values","dir":"Articles","previous_headings":"","what":"p-values","title":"Clonotype Frequencies","text":"p-values can calculated shown plots generated plot_frequency() plot_gene_usage(). , must pass grouping variable group_col argument, used group clusters found cluster_col. best used set samples can divided distinct groups. cluster names unique treatment group, e.g. healthy: healthy-1, healthy-2; disease: disease-1, disease-2. method used calculate p-values can specified p_method argument. default t-test performed, two groups compared Kruskal-Wallis test used. summary table calculated p-values can also saved passing path p_file argument. p_label argument can used modify p-values shown plot, default significant p-values shown. example display p-values calculated using t-test.  Custom labels different p-value cutoffs can specified passing named vector p_label argument. display actual p-value certain threshold, use keyword ‘value’. Symbols can also displayed including unicode symbol code. example display p-values <0.05, print soccer ball <0.1, others labeled ‘ns’.  Label aesthetics can modified passing named list aesthetic parameters label_params argument. parameters also modify n-label, specifically modify p-value label, prefix parameter ‘p.’, e.g. p.size = 14.","code":"so |>   plot_frequency(     data_col    = \"isotype\",     cluster_col = \"sample\",     group_col   = \"orig.ident\",          p_label     = \"all\",     p_method    = \"t\"   ) so |>   plot_frequency(     data_col    = \"isotype\",     cluster_col = \"sample\",     group_col   = \"orig.ident\",     p_label     = c(value = 0.05, \"\\\\u26BD\" = 0.1, ns = Inf)   ) so |>   plot_frequency(     data_col     = \"isotype\",     cluster_col  = \"sample\",     group_col    = \"orig.ident\",     n_label      = \"corner\",     label_params = list(p.color = \"red\")   )"},{"path":"https://rnabioco.github.io/djvdj/articles/frequency.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Clonotype Frequencies","text":"","code":"#> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.4.3      SeuratObject_4.1.4 Seurat_4.4.0       #> [4] djvdj_0.1.0        #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3     jsonlite_1.8.7         magrittr_2.0.3         #>   [4] spatstat.utils_3.0-3   farver_2.1.1           rmarkdown_2.25         #>   [7] fs_1.6.3               ragg_1.2.5             vctrs_0.6.3            #>  [10] ROCR_1.0-11            memoise_2.0.1          spatstat.explore_3.2-3 #>  [13] htmltools_0.5.6        sass_0.4.7             sctransform_0.4.0      #>  [16] parallelly_1.36.0      KernSmooth_2.23-21     bslib_0.5.1            #>  [19] htmlwidgets_1.6.2      desc_1.4.2             ica_1.0-3              #>  [22] plyr_1.8.8             plotly_4.10.2          zoo_1.8-12             #>  [25] cachem_1.0.8           igraph_1.5.1           mime_0.12              #>  [28] lifecycle_1.0.3        pkgconfig_2.0.3        Matrix_1.6-1.1         #>  [31] R6_2.5.1               fastmap_1.1.1          fitdistrplus_1.1-11    #>  [34] future_1.33.0          shiny_1.7.5            digest_0.6.33          #>  [37] colorspace_2.1-0       patchwork_1.1.3        rprojroot_2.0.3        #>  [40] tensor_1.5             irlba_2.3.5.1          textshaping_0.3.6      #>  [43] labeling_0.4.3         progressr_0.14.0       fansi_1.0.4            #>  [46] spatstat.sparse_3.0-2  httr_1.4.7             polyclip_1.10-6        #>  [49] abind_1.4-5            compiler_4.3.1         bit64_4.0.5            #>  [52] withr_2.5.1            MASS_7.3-60            tools_4.3.1            #>  [55] lmtest_0.9-40          httpuv_1.6.11          future.apply_1.11.0    #>  [58] goftest_1.2-3          glue_1.6.2             nlme_3.1-162           #>  [61] promises_1.2.1         grid_4.3.1             Rtsne_0.16             #>  [64] cluster_2.1.4          reshape2_1.4.4         generics_0.1.3         #>  [67] gtable_0.3.4           spatstat.data_3.0-1    tzdb_0.4.0             #>  [70] tidyr_1.3.0            data.table_1.14.8      hms_1.1.3              #>  [73] sp_2.0-0               utf8_1.2.3             spatstat.geom_3.2-5    #>  [76] RcppAnnoy_0.0.21       ggrepel_0.9.3          RANN_2.6.1             #>  [79] pillar_1.9.0           stringr_1.5.0          vroom_1.6.3            #>  [82] later_1.3.1            splines_4.3.1          dplyr_1.1.3            #>  [85] lattice_0.21-8         bit_4.0.5              survival_3.5-5         #>  [88] deldir_1.0-9           tidyselect_1.2.0       miniUI_0.1.1.1         #>  [91] pbapply_1.7-2          knitr_1.44             gridExtra_2.3          #>  [94] scattermore_1.2        xfun_0.40              matrixStats_1.0.0      #>  [97] stringi_1.7.12         lazyeval_0.2.2         yaml_2.3.7             #> [100] evaluate_0.21          codetools_0.2-19       tibble_3.2.1           #> [103] cli_3.6.1              uwot_0.1.16            xtable_1.8-4           #> [106] reticulate_1.32.0      systemfonts_1.0.4      munsell_0.5.0          #> [109] jquerylib_0.1.4        Rcpp_1.0.11            globals_0.16.2         #> [112] spatstat.random_3.1-6  png_0.1-8              parallel_4.3.1         #> [115] ellipsis_0.3.2         pkgdown_2.0.7          readr_2.1.4            #> [118] listenv_0.9.0          viridisLite_0.4.2      scales_1.2.1           #> [121] ggridges_0.5.4         crayon_1.5.2           leiden_0.4.3           #> [124] purrr_1.0.2            rlang_1.1.1            cowplot_1.1.1"},{"path":"https://rnabioco.github.io/djvdj/articles/gene-usage.html","id":"calculating-gene-usage","dir":"Articles","previous_headings":"","what":"Calculating gene usage","title":"Gene Usage","text":"calc_gene_usage() function calculate number cells (‘freq’) percentage cells (‘pct’) gene data_cols column(s). ‘n_cells’ column shows total number cells used calculating percentages. default results added object meta.data, return data.frame set return_df TRUE. perform gene usage calculations separately cell clusters (samples), provide meta.data column containing cluster labels cluster_col argument. see MD4 samples almost exclusively use single V segment (IGKV5-43), expected since MD4 B cells monoclonal. perform calculations specific chain, use chain argument. example returning results IGK chain. see values ‘v_gene’ column labeled ‘None’, shows number cells V gene segment identified. two columns provided data_cols argument, number cells containing combination genes returned.","code":"so |>   calc_gene_usage(     data_cols = \"v_gene\",     return_df = TRUE   ) #> # A tibble: 103 × 4 #>    v_gene     n_cells  freq   pct #>    <chr>        <int> <int> <dbl> #>  1 IGKV5-43       329   156 47.4  #>  2 IGKV10-96      329    14  4.26 #>  3 IGKV6-17       329     9  2.74 #>  4 IGLV1          329     9  2.74 #>  5 IGKV14-111     329     8  2.43 #>  6 IGKV1-117      329     7  2.13 #>  7 IGKV13-84      329     7  2.13 #>  8 IGKV1-135      329     6  1.82 #>  9 IGKV19-93      329     6  1.82 #> 10 IGKV3-4        329     6  1.82 #> # ℹ 93 more rows so |>   calc_gene_usage(     data_cols   = \"v_gene\",     cluster_col = \"sample\",     return_df   = TRUE   ) #> # A tibble: 618 × 6 #>    v_gene     sample n_cells  freq    pct shared #>    <chr>      <chr>    <dbl> <int>  <dbl> <lgl>  #>  1 IGKV5-43   MD4-2       55    55 100    TRUE   #>  2 IGKV5-43   MD4-3       54    51  94.4  TRUE   #>  3 IGKV5-43   MD4-1       50    47  94    TRUE   #>  4 IGKV10-96  BL6-1       55     6  10.9  TRUE   #>  5 IGKV10-96  BL6-3       52     5   9.62 TRUE   #>  6 IGKV14-111 BL6-2       63     6   9.52 TRUE   #>  7 IGLV1      BL6-3       52     4   7.69 TRUE   #>  8 IGHV6-6    BL6-1       55     4   7.27 FALSE  #>  9 IGKV6-17   BL6-2       63     4   6.35 TRUE   #> 10 IGKV8-24   BL6-2       63     4   6.35 FALSE  #> # ℹ 608 more rows so |>   calc_gene_usage(     data_cols   = \"v_gene\",     cluster_col = \"sample\",     chain       = \"IGK\",     return_df   = TRUE   ) #> # A tibble: 336 × 6 #>    v_gene     sample n_cells  freq    pct shared #>    <chr>      <chr>    <dbl> <int>  <dbl> <lgl>  #>  1 IGKV5-43   MD4-2       55    55 100    TRUE   #>  2 IGKV5-43   MD4-3       54    51  94.4  TRUE   #>  3 IGKV5-43   MD4-1       50    47  94    TRUE   #>  4 IGKV10-96  BL6-1       55     6  10.9  TRUE   #>  5 IGKV10-96  BL6-3       52     5   9.62 TRUE   #>  6 None       BL6-3       52     5   9.62 TRUE   #>  7 IGKV14-111 BL6-2       63     6   9.52 TRUE   #>  8 IGKV6-17   BL6-2       63     4   6.35 TRUE   #>  9 IGKV8-24   BL6-2       63     4   6.35 FALSE  #> 10 IGKV3-4    BL6-3       52     3   5.77 TRUE   #> # ℹ 326 more rows so |>   calc_gene_usage(     data_cols   = c(\"v_gene\", \"j_gene\"),     cluster_col = \"sample\",     return_df   = TRUE   ) #> # A tibble: 6,798 × 7 #>    v_gene     j_gene sample n_cells  freq    pct shared #>    <chr>      <chr>  <chr>    <dbl> <int>  <dbl> <lgl>  #>  1 IGKV5-43   IGKJ2  MD4-2       55    55 100    TRUE   #>  2 IGKV5-43   IGKJ2  MD4-3       54    51  94.4  TRUE   #>  3 IGKV5-43   IGKJ2  MD4-1       50    47  94    TRUE   #>  4 IGKV14-111 IGKJ2  BL6-2       63     4   6.35 FALSE  #>  5 IGKV10-96  IGKJ1  BL6-3       52     3   5.77 TRUE   #>  6 IGLV1      IGLJ1  BL6-3       52     3   5.77 TRUE   #>  7 IGKV10-96  IGKJ2  BL6-1       55     3   5.45 TRUE   #>  8 IGKV10-96  IGKJ1  BL6-2       63     3   4.76 TRUE   #>  9 IGKV1-135  IGKJ1  BL6-3       52     2   3.85 TRUE   #> 10 IGKV10-96  IGKJ2  BL6-3       52     2   3.85 TRUE   #> # ℹ 6,788 more rows"},{"path":"https://rnabioco.github.io/djvdj/articles/gene-usage.html","id":"plotting-gene-usage","dir":"Articles","previous_headings":"","what":"Plotting gene usage","title":"Gene Usage","text":"plot_gene_usage() function summarize frequency gene segment. default single column passed data_cols argument, bargraph returned. number top genes include plot can specified genes argument.  default, percentages shown y-axis, instead plot frequency, set units argument ‘frequency’.  Plot colors can adjusted using plot_colors argument. addition, plot_gene_usage() returns ggplot object can modified ggplot2 functions ggplot2::theme(). Plots can adjusted passing aesthetic parameters directly ggplot2, e.g. alpha, linetype, color, etc.  two columns passed data_cols argument, heatmap generated summarizing usage different pairs segments. column provided cluster_col argument, separate heatmap generated cluster. example plotting frequency different heavy chain V J segments appear together.  paired gene usage two chains can also plotted using plot_gene_pairs(). example plotting frequency different heavy light chain V segments appear together.","code":"so |>   plot_gene_usage(     data_cols   = \"v_gene\",     cluster_col = \"orig.ident\",     genes       = 20   ) so |>   plot_gene_usage(     data_cols   = \"v_gene\",     cluster_col = \"orig.ident\",     units       = \"frequency\"   ) so |>   plot_gene_usage(     data_cols   = \"v_gene\",     cluster_col = \"orig.ident\",     plot_colors = c(BL6 = \"#3288BD\", MD4 = \"#D53E4F\"),          color = \"black\",  # parameters to pass to ggplot2     alpha = 0.7   ) +   theme(axis.text.x = element_text(angle = 90)) so |>   plot_gene_usage(     data_cols   = c(\"v_gene\", \"j_gene\"),     cluster_col = \"orig.ident\",     chain       = \"IGH\",     genes       = 15   ) so |>   plot_gene_pairs(     data_col    = \"v_gene\",     chains      = c(\"IGH\", \"IGK\"),     cluster_col = \"orig.ident\",     genes       = 12   )"},{"path":"https://rnabioco.github.io/djvdj/articles/gene-usage.html","id":"circos-plot","dir":"Articles","previous_headings":"","what":"Circos plot","title":"Gene Usage","text":"circos plot can created setting method argument ‘circos’. plot summarize number cells containing different gene pairs, shown axis labels sample. requires circlize package installed. example, summarizing segment usage entire dataset (BL6 MD4 cells combined). cluster_col argument can used create separate plot sample. Labels can rotated eliminate overlapping text using rotate_labels argument.  Plot colors can modified using plot_colors argument, additional parameters can passed directly circlize::chordDiagram(). example add border around links scale plot sample width.  Gene segment usage can plotted separately cell clusters (samples) using cluster_col argument. number rows used arrange plots can modified using panel_nrow argument.","code":"so |>   plot_gene_usage(     data_cols     = c(\"v_gene\", \"j_gene\"),     method        = \"circos\",     genes         = 6,     rotate_labels = TRUE   ) so |>   plot_gene_usage(     data_cols   = c(\"v_gene\", \"j_gene\"),     method      = \"circos\",     genes       = 8,     plot_colors = brewer.pal(10, \"Spectral\"),          link.border = \"black\",  # parameters to pass to chordDiagram()     scale       = TRUE   ) so |>   plot_gene_usage(     data_cols   = c(\"v_gene\", \"j_gene\"),     method      = \"circos\",     cluster_col = \"sample\",     genes       = 5,     panel_nrow  = 2,     scale       = TRUE   )"},{"path":"https://rnabioco.github.io/djvdj/articles/gene-usage.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Gene Usage","text":"","code":"#> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] RColorBrewer_1.1-3 ggplot2_3.4.3      SeuratObject_4.1.4 #> [4] Seurat_4.4.0       djvdj_0.1.0        #>  #> loaded via a namespace (and not attached): #>   [1] shape_1.4.6            jsonlite_1.8.7         magrittr_2.0.3         #>   [4] spatstat.utils_3.0-3   farver_2.1.1           rmarkdown_2.25         #>   [7] GlobalOptions_0.1.2    fs_1.6.3               ragg_1.2.5             #>  [10] vctrs_0.6.3            ROCR_1.0-11            memoise_2.0.1          #>  [13] spatstat.explore_3.2-3 htmltools_0.5.6        sass_0.4.7             #>  [16] sctransform_0.4.0      parallelly_1.36.0      KernSmooth_2.23-21     #>  [19] bslib_0.5.1            htmlwidgets_1.6.2      desc_1.4.2             #>  [22] ica_1.0-3              plyr_1.8.8             plotly_4.10.2          #>  [25] zoo_1.8-12             cachem_1.0.8           igraph_1.5.1           #>  [28] mime_0.12              lifecycle_1.0.3        pkgconfig_2.0.3        #>  [31] Matrix_1.6-1.1         R6_2.5.1               fastmap_1.1.1          #>  [34] fitdistrplus_1.1-11    future_1.33.0          shiny_1.7.5            #>  [37] digest_0.6.33          colorspace_2.1-0       patchwork_1.1.3        #>  [40] rprojroot_2.0.3        tensor_1.5             irlba_2.3.5.1          #>  [43] textshaping_0.3.6      labeling_0.4.3         progressr_0.14.0       #>  [46] fansi_1.0.4            spatstat.sparse_3.0-2  httr_1.4.7             #>  [49] polyclip_1.10-6        abind_1.4-5            compiler_4.3.1         #>  [52] bit64_4.0.5            withr_2.5.1            MASS_7.3-60            #>  [55] tools_4.3.1            lmtest_0.9-40          httpuv_1.6.11          #>  [58] future.apply_1.11.0    goftest_1.2-3          glue_1.6.2             #>  [61] nlme_3.1-162           promises_1.2.1         grid_4.3.1             #>  [64] Rtsne_0.16             cluster_2.1.4          reshape2_1.4.4         #>  [67] generics_0.1.3         gtable_0.3.4           spatstat.data_3.0-1    #>  [70] tzdb_0.4.0             tidyr_1.3.0            data.table_1.14.8      #>  [73] hms_1.1.3              sp_2.0-0               utf8_1.2.3             #>  [76] spatstat.geom_3.2-5    RcppAnnoy_0.0.21       ggrepel_0.9.3          #>  [79] RANN_2.6.1             pillar_1.9.0           stringr_1.5.0          #>  [82] vroom_1.6.3            later_1.3.1            circlize_0.4.15        #>  [85] splines_4.3.1          dplyr_1.1.3            lattice_0.21-8         #>  [88] bit_4.0.5              survival_3.5-5         deldir_1.0-9           #>  [91] tidyselect_1.2.0       miniUI_0.1.1.1         pbapply_1.7-2          #>  [94] knitr_1.44             gridExtra_2.3          scattermore_1.2        #>  [97] xfun_0.40              matrixStats_1.0.0      stringi_1.7.12         #> [100] lazyeval_0.2.2         yaml_2.3.7             evaluate_0.21          #> [103] codetools_0.2-19       tibble_3.2.1           cli_3.6.1              #> [106] uwot_0.1.16            xtable_1.8-4           reticulate_1.32.0      #> [109] systemfonts_1.0.4      munsell_0.5.0          jquerylib_0.1.4        #> [112] Rcpp_1.0.11            globals_0.16.2         spatstat.random_3.1-6  #> [115] png_0.1-8              parallel_4.3.1         ellipsis_0.3.2         #> [118] pkgdown_2.0.7          readr_2.1.4            listenv_0.9.0          #> [121] viridisLite_0.4.2      scales_1.2.1           ggridges_0.5.4         #> [124] crayon_1.5.2           leiden_0.4.3           purrr_1.0.2            #> [127] rlang_1.1.1            cowplot_1.1.1"},{"path":"https://rnabioco.github.io/djvdj/articles/import.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Data Import","text":"load parse V(D)J data, FASTQ files must first processed using Cell Ranger. data used vignette processed using Cell Ranger v7.0. Cell Ranger generates several files djvdj uses downstream analysis. includes outs/filtered_contig_annotations.csv file, contains basic information chain required import_vdj() function. simplest use case import_vdj() involves creating object using data single run. import_vdj() adds variety per-chain metrics object meta.data. Information chain identified cell separated semicolon. separator used storing parsing per-chain V(D)J data can specified using sep argument included djvdj functions. NAs included cells lack V(D)J data. modify/filter/plot per-chain data, djvdj provides range functions make easy parse visualize information. detailed examples refer vignettes documentation following functions: filter_vdj(), mutate_vdj(), summarize_vdj(), plot_histogram(), plot_scatter().","code":"library(djvdj) library(Seurat) library(dplyr)  # Create Seurat object data_dir <- system.file(\"extdata/splen\", package = \"djvdj\")  so <- file.path(data_dir, \"BL6_GEX/filtered_feature_bc_matrix\") |>   Read10X() |>   CreateSeuratObject()  # Add V(D)J data to object so_vdj <- so |>   import_vdj(vdj_dir = file.path(data_dir, \"BL6_BCR\")) so_vdj |>   slot(\"meta.data\") |>   filter(n_chains > 1) |>   head(2) #>                       orig.ident nCount_RNA nFeature_RNA  clonotype_id #> ACACCAAAGAATTGTG-1 SeuratProject         38           21 clonotype2492 #> ACACCGGCACAAGTAA-1 SeuratProject         80           30 clonotype3124 #>                    exact_subclonotype_id  chains n_chains #> ACACCAAAGAATTGTG-1                     1 IGH;IGK        2 #> ACACCGGCACAAGTAA-1                     1 IGH;IGK        2 #>                                          cdr3 #> ACACCAAAGAATTGTG-1    CAHGSRDFDVW;CWQGTHFPQTF #> ACACCGGCACAAGTAA-1 CARHEGYYEAMDYW;CQQGNTLPLTF #>                                                                                         cdr3_nt #> ACACCAAAGAATTGTG-1          TGTGCTCACGGTAGTCGAGACTTCGATGTCTGG;TGCTGGCAAGGTACACATTTTCCTCAGACGTTC #> ACACCGGCACAAGTAA-1 TGTGCAAGACATGAGGGGTACTACGAGGCTATGGACTACTGG;TGCCAACAGGGTAATACGCTTCCTCTCACGTTC #>                    cdr3_length cdr3_nt_length             v_gene #> ACACCAAAGAATTGTG-1       11;11          33;33 IGHV1-75;IGKV1-135 #> ACACCGGCACAAGTAA-1       14;11          42;33 IGHV5-15;IGKV10-96 #>                       d_gene      j_gene    c_gene isotype  reads umis #> ACACCAAAGAATTGTG-1 None;None IGHJ1;IGKJ1 IGHM;IGKC    IGHM 20;208 2;11 #> ACACCGGCACAAGTAA-1 None;None IGHJ4;IGKJ5 IGHM;IGKC    IGHM 80;174 6;12 #>                    productive full_length paired #> ACACCAAAGAATTGTG-1  TRUE;TRUE   TRUE;TRUE   TRUE #> ACACCGGCACAAGTAA-1  TRUE;TRUE   TRUE;TRUE   TRUE"},{"path":"https://rnabioco.github.io/djvdj/articles/import.html","id":"loading-multiple-runs","dir":"Articles","previous_headings":"","what":"Loading multiple runs","title":"Data Import","text":"combining gene expression V(D)J data multiple runs Seurat object, must ensure import_vdj() able match cell barcodes two data types. easiest way load gene expression V(D)J samples order. V(D)J samples loaded order gene expression data, cell barcodes match receive error. Another way ensure cell barcodes gene expression V(D)J data able matched specify cell barcode prefixes sample. Seurat::Read10X() import_vdj() functions can done passing named vector. scenario, names added prefixes cell barcodes.","code":"# Load GEX data gex_dirs <- c(   file.path(data_dir, \"BL6_GEX/filtered_feature_bc_matrix\"),   file.path(data_dir, \"MD4_GEX/filtered_feature_bc_matrix\") )  so <- gex_dirs |>   Read10X() |>   CreateSeuratObject()  # Load BCR data # note that the BL6 and MD4 paths are in the same order as the gene # expression data vdj_dirs <- c(   file.path(data_dir, \"BL6_BCR\"),   file.path(data_dir, \"MD4_BCR\") )  so_vdj <- so |>   import_vdj(vdj_dir = vdj_dirs) # Load GEX data gex_dirs <- c(   BL6 = file.path(data_dir, \"BL6_GEX/filtered_feature_bc_matrix\"),   MD4 = file.path(data_dir, \"MD4_GEX/filtered_feature_bc_matrix\") )  so <- gex_dirs |>   Read10X() |>   CreateSeuratObject()  # Load BCR data # note that the samples are not in the same order as the gene expression data, # but this is okay since cell prefixes are provided as names for the # input vector vdj_dirs <- c(   MD4 = file.path(data_dir, \"MD4_BCR\"),   BL6 = file.path(data_dir, \"BL6_BCR\") )  so_vdj <- so |>   import_vdj(vdj_dir = vdj_dirs)"},{"path":"https://rnabioco.github.io/djvdj/articles/import.html","id":"defining-clonotypes","dir":"Articles","previous_headings":"","what":"Defining clonotypes","title":"Data Import","text":"results multiple Cell Ranger runs added object, clonotype IDs match, .e. clonotype1 samples. allow clonotypes directly compared multiple samples, clonotypes can recalculated using define_clonotypes argument. argument assign new clonotype IDs using information available chain. three options specify step performed: ‘cdr3aa’: use CDR3 amino acid sequence ‘cdr3nt’: use CDR3 nucleotide sequence ‘cdr3_gene’: use CDR3 nucleotide sequence combination V(D)J genes identified cell clonotype IDs can also adjusted multiple samples using aggregate function available Cell Ranger. load aggregated output files just pass cellranger aggr output directory aggr_dir argument. correctly match cell barcodes aggregated V(D)J data gene expression data, gene expression samples must loaded object order samples listed cellranger aggr config file.","code":"so_vdj <- so |>   import_vdj(     vdj_dir = vdj_dirs,     define_clonotypes = \"cdr3_gene\"   )"},{"path":"https://rnabioco.github.io/djvdj/articles/import.html","id":"filtering-chains","dir":"Articles","previous_headings":"","what":"Filtering chains","title":"Data Import","text":"import_vdj() function several arguments can used perform basic filtering chain. filter_chains argument include chains least one productive full length contig. However, noted recent versions Cell Ranger output files already filtered based criteria, argument relevant loading data processed earlier versions Cell Ranger v3.0. filter_paired argument include clonotypes paired chains. TCR data, means clonotype must least one TRA TRB chain. BCR data clonotype must least one IGH chain least one IGK IGL chain. noted clonotype multiple chains type, still included, e.g. TRA;TRB;TRB IGH;IGK;IGK still included. Clonotypes include two chains can filtered using filter_vdj().","code":"vdj_dirs <- c(   MD4 = file.path(data_dir, \"MD4_BCR\"),   BL6 = file.path(data_dir, \"BL6_BCR\") )  so_vdj <- so |>   import_vdj(     vdj_dir = vdj_dirs,     filter_chains = TRUE,     filter_paired = TRUE   )  # To only include clonotypes with exactly 2 chains so_vdj <- so_vdj |>   filter_vdj(n_chains == 2)"},{"path":"https://rnabioco.github.io/djvdj/articles/import.html","id":"loading-mutation-information","dir":"Articles","previous_headings":"","what":"Loading mutation information","title":"Data Import","text":"Mutation information chain can parsed using two additional output files Cell Ranger: outs/concat_ref.bam: file contains alignment information used quantify insertions, deletions, mismatches chain. outs/airr_rearrangement.tsv: file contains coordinates V(D)J gene segment used quantify mutations segment /junction. additional columns added meta.data include number insertions, deletions, mismatches (ending ‘ins’, ‘del’, ‘mis’) V(D)J segment (prefixed ‘v’, ‘d’, ‘j’, ‘c’). Columns containing junction information prefixed either ‘vd’ ‘dj’. Columns ending ‘freq’ show event frequency calculated number events divided length region.","code":"vdj_dirs <- c(   MD4 = file.path(data_dir, \"MD4_BCR\"),   BL6 = file.path(data_dir, \"BL6_BCR\") )  so_vdj <- so |>   import_vdj(     vdj_dir = vdj_dirs,     include_mutations = TRUE   ) so_vdj |>   slot(\"meta.data\") |>   filter(n_chains > 1) |>   head(2) #>                        orig.ident nCount_RNA nFeature_RNA  clonotype_id #> BL6_ACACCAAAGAATTGTG-1        BL6         38           21 clonotype2492 #> BL6_ACACCGGCACAAGTAA-1        BL6         80           30 clonotype3124 #>                        exact_subclonotype_id  chains n_chains #> BL6_ACACCAAAGAATTGTG-1                     1 IGH;IGK        2 #> BL6_ACACCGGCACAAGTAA-1                     1 IGH;IGK        2 #>                                              cdr3 #> BL6_ACACCAAAGAATTGTG-1    CAHGSRDFDVW;CWQGTHFPQTF #> BL6_ACACCGGCACAAGTAA-1 CARHEGYYEAMDYW;CQQGNTLPLTF #>                                                                                             cdr3_nt #> BL6_ACACCAAAGAATTGTG-1          TGTGCTCACGGTAGTCGAGACTTCGATGTCTGG;TGCTGGCAAGGTACACATTTTCCTCAGACGTTC #> BL6_ACACCGGCACAAGTAA-1 TGTGCAAGACATGAGGGGTACTACGAGGCTATGGACTACTGG;TGCCAACAGGGTAATACGCTTCCTCTCACGTTC #>                        cdr3_length cdr3_nt_length             v_gene #> BL6_ACACCAAAGAATTGTG-1       11;11          33;33 IGHV1-75;IGKV1-135 #> BL6_ACACCGGCACAAGTAA-1       14;11          42;33 IGHV5-15;IGKV10-96 #>                           d_gene      j_gene    c_gene isotype   reads #> BL6_ACACCAAAGAATTGTG-1 None;None IGHJ1;IGKJ1 IGHM;IGKC    IGHM  40;416 #> BL6_ACACCGGCACAAGTAA-1 None;None IGHJ4;IGKJ5 IGHM;IGKC    IGHM 160;348 #>                         umis productive full_length paired v_ins v_del #> BL6_ACACCAAAGAATTGTG-1  4;22  TRUE;TRUE   TRUE;TRUE   TRUE   2;0   0;0 #> BL6_ACACCGGCACAAGTAA-1 12;24  TRUE;TRUE   TRUE;TRUE   TRUE   0;0   0;3 #>                        v_mis d_ins d_del d_mis j_ins j_del j_mis c_ins #> BL6_ACACCAAAGAATTGTG-1   1;0   0;0   0;0   0;0   0;0   0;3   0;0   0;0 #> BL6_ACACCGGCACAAGTAA-1   0;0   0;0   0;0   0;0   0;0   0;3   3;0   0;0 #>                        c_del c_mis all_ins all_del all_mis vd_ins vd_del #> BL6_ACACCAAAGAATTGTG-1   0;0   0;0     2;0     0;3     1;0    0;0    0;0 #> BL6_ACACCGGCACAAGTAA-1   0;0   0;0     0;0     0;6     3;0    0;0    0;0 #>                        dj_ins dj_del v_mis_freq d_mis_freq j_mis_freq #> BL6_ACACCAAAGAATTGTG-1    0;0    0;0 0.002849;0        0;0        0;0 #> BL6_ACACCGGCACAAGTAA-1    0;0    0;0        0;0        0;0 0.055556;0 #>                        c_mis_freq all_mis_freq #> BL6_ACACCAAAGAATTGTG-1        0;0   0.002525;0 #> BL6_ACACCGGCACAAGTAA-1        0;0   0.007371;0"},{"path":"https://rnabioco.github.io/djvdj/articles/import.html","id":"loading-additional-sequence-information","dir":"Articles","previous_headings":"","what":"Loading additional sequence information","title":"Data Import","text":"default sequence information loaded import_vdj() CDR3 region. Newer versions Cell Ranger include additional sequences filtered_contig_annotations.csv file. includes FWR1, CDR1, FWR2, CDR2, FWR3, FWR4 regions. additional sequences can loaded using data_cols argument.","code":"so_vdj <- so |>   import_vdj(     vdj_dir   = vdj_dirs,     data_cols = c(\"cdr1\", \"cdr1_nt\", \"cdr2\", \"cdr2_nt\")   )  so_vdj |>   slot(\"meta.data\") |>   head(3) #>                        orig.ident nCount_RNA nFeature_RNA clonotype_id #> BL6_AAACGGGGTTCTGTTT-1        BL6        202           25         <NA> #> BL6_AAAGATGCAACAACCT-1        BL6         42           20   clonotype7 #> BL6_AACGTTGCACGACTCG-1        BL6         32           19  clonotype32 #>                        exact_subclonotype_id chains n_chains #> BL6_AAACGGGGTTCTGTTT-1                    NA   <NA>       NA #> BL6_AAAGATGCAACAACCT-1                     1    IGK        1 #> BL6_AACGTTGCACGACTCG-1                     1    IGK        1 #>                                    cdr1 #> BL6_AAACGGGGTTCTGTTT-1             <NA> #> BL6_AAAGATGCAACAACCT-1 RSSQSIVHSNGNTYLE #> BL6_AACGTTGCACGACTCG-1      KASQNVGTNVA #>                                                                 cdr1_nt #> BL6_AAACGGGGTTCTGTTT-1                                             <NA> #> BL6_AAAGATGCAACAACCT-1 AGATCTAGTCAGAGCATTGTACATAGTAATGGAAACACCTATTTAGAA #> BL6_AACGTTGCACGACTCG-1                AAGGCCAGTCAGAATGTGGGTACTAATGTAGCC #>                           cdr2               cdr2_nt        cdr3 #> BL6_AAACGGGGTTCTGTTT-1    <NA>                  <NA>        <NA> #> BL6_AAAGATGCAACAACCT-1 KVSNRFS AAAGTTTCCAACCGATTTTCT CFQGSHVPWTF #> BL6_AACGTTGCACGACTCG-1 SASYRYS TCGGCATCCTACCGGTACAGT CQQYNSYPLTF #>                                                  cdr3_nt cdr1_length #> BL6_AAACGGGGTTCTGTTT-1                              <NA>        <NA> #> BL6_AAAGATGCAACAACCT-1 TGCTTTCAAGGTTCACATGTTCCGTGGACGTTC          16 #> BL6_AACGTTGCACGACTCG-1 TGTCAGCAATATAACAGCTATCCTCTCACGTTC          11 #>                        cdr1_nt_length cdr2_length cdr2_nt_length #> BL6_AAACGGGGTTCTGTTT-1           <NA>        <NA>           <NA> #> BL6_AAAGATGCAACAACCT-1             48           7             21 #> BL6_AACGTTGCACGACTCG-1             33           7             21 #>                        cdr3_length cdr3_nt_length    v_gene d_gene j_gene #> BL6_AAACGGGGTTCTGTTT-1        <NA>           <NA>      <NA>   <NA>   <NA> #> BL6_AAAGATGCAACAACCT-1          11             33 IGKV1-117   None  IGKJ1 #> BL6_AACGTTGCACGACTCG-1          11             33  IGKV6-15   None  IGKJ5 #>                        c_gene isotype reads umis productive full_length #> BL6_AAACGGGGTTCTGTTT-1   <NA>    <NA>  <NA> <NA>       <NA>        <NA> #> BL6_AAAGATGCAACAACCT-1   IGKC    None   352   21       TRUE        TRUE #> BL6_AACGTTGCACGACTCG-1   IGKC    None   342   18       TRUE        TRUE #>                        paired #> BL6_AAACGGGGTTCTGTTT-1     NA #> BL6_AAAGATGCAACAACCT-1  FALSE #> BL6_AACGTTGCACGACTCG-1  FALSE"},{"path":"https://rnabioco.github.io/djvdj/articles/import.html","id":"loading-tcr-and-bcr-data","dir":"Articles","previous_headings":"","what":"Loading TCR and BCR data","title":"Data Import","text":"add BCR TCR data object, run import_vdj() separately data type. distinguish columns containing BCR TCR data, use prefix argument add unique column names. results two sets new columns added meta.data. performing downstream analysis using djvdj functions, sure specify correct columns, .e. ‘bcr_clonotype_id’ ‘tcr_clonotype_id’.","code":"bcr_dirs <- c(   MD4 = file.path(data_dir, \"MD4_BCR\"),   BL6 = file.path(data_dir, \"BL6_BCR\") )  tcr_dirs <- c(   MD4 = file.path(data_dir, \"MD4_TCR\"),   BL6 = file.path(data_dir, \"BL6_TCR\") )  so_vdj <- so |>   import_vdj(bcr_dirs, prefix = \"bcr_\") |>   import_vdj(tcr_dirs, prefix = \"tcr_\") so_vdj |>   slot(\"meta.data\") |>   head(3) #>                        orig.ident nCount_RNA nFeature_RNA #> BL6_AAACGGGGTTCTGTTT-1        BL6        202           25 #> BL6_AAAGATGCAACAACCT-1        BL6         42           20 #> BL6_AACGTTGCACGACTCG-1        BL6         32           19 #>                        bcr_clonotype_id bcr_exact_subclonotype_id #> BL6_AAACGGGGTTCTGTTT-1             <NA>                        NA #> BL6_AAAGATGCAACAACCT-1       clonotype7                         1 #> BL6_AACGTTGCACGACTCG-1      clonotype32                         1 #>                        bcr_chains bcr_n_chains    bcr_cdr3 #> BL6_AAACGGGGTTCTGTTT-1       <NA>           NA        <NA> #> BL6_AAAGATGCAACAACCT-1        IGK            1 CFQGSHVPWTF #> BL6_AACGTTGCACGACTCG-1        IGK            1 CQQYNSYPLTF #>                                              bcr_cdr3_nt bcr_cdr3_length #> BL6_AAACGGGGTTCTGTTT-1                              <NA>            <NA> #> BL6_AAAGATGCAACAACCT-1 TGCTTTCAAGGTTCACATGTTCCGTGGACGTTC              11 #> BL6_AACGTTGCACGACTCG-1 TGTCAGCAATATAACAGCTATCCTCTCACGTTC              11 #>                        bcr_cdr3_nt_length bcr_v_gene bcr_d_gene #> BL6_AAACGGGGTTCTGTTT-1               <NA>       <NA>       <NA> #> BL6_AAAGATGCAACAACCT-1                 33  IGKV1-117       None #> BL6_AACGTTGCACGACTCG-1                 33   IGKV6-15       None #>                        bcr_j_gene bcr_c_gene bcr_isotype bcr_reads #> BL6_AAACGGGGTTCTGTTT-1       <NA>       <NA>        <NA>      <NA> #> BL6_AAAGATGCAACAACCT-1      IGKJ1       IGKC        None       352 #> BL6_AACGTTGCACGACTCG-1      IGKJ5       IGKC        None       342 #>                        bcr_umis bcr_productive bcr_full_length bcr_paired #> BL6_AAACGGGGTTCTGTTT-1     <NA>           <NA>            <NA>         NA #> BL6_AAAGATGCAACAACCT-1       21           TRUE            TRUE      FALSE #> BL6_AACGTTGCACGACTCG-1       18           TRUE            TRUE      FALSE #>                        tcr_clonotype_id tcr_chains tcr_n_chains tcr_cdr3 #> BL6_AAACGGGGTTCTGTTT-1             <NA>       <NA>           NA     <NA> #> BL6_AAAGATGCAACAACCT-1             <NA>       <NA>           NA     <NA> #> BL6_AACGTTGCACGACTCG-1             <NA>       <NA>           NA     <NA> #>                        tcr_cdr3_nt tcr_cdr3_length tcr_cdr3_nt_length #> BL6_AAACGGGGTTCTGTTT-1        <NA>            <NA>               <NA> #> BL6_AAAGATGCAACAACCT-1        <NA>            <NA>               <NA> #> BL6_AACGTTGCACGACTCG-1        <NA>            <NA>               <NA> #>                        tcr_v_gene tcr_d_gene tcr_j_gene tcr_c_gene #> BL6_AAACGGGGTTCTGTTT-1       <NA>       <NA>       <NA>       <NA> #> BL6_AAAGATGCAACAACCT-1       <NA>       <NA>       <NA>       <NA> #> BL6_AACGTTGCACGACTCG-1       <NA>       <NA>       <NA>       <NA> #>                        tcr_reads tcr_umis tcr_productive tcr_full_length #> BL6_AAACGGGGTTCTGTTT-1      <NA>     <NA>           <NA>            <NA> #> BL6_AAAGATGCAACAACCT-1      <NA>     <NA>           <NA>            <NA> #> BL6_AACGTTGCACGACTCG-1      <NA>     <NA>           <NA>            <NA> #>                        tcr_paired #> BL6_AAACGGGGTTCTGTTT-1         NA #> BL6_AAAGATGCAACAACCT-1         NA #> BL6_AACGTTGCACGACTCG-1         NA"},{"path":"https://rnabioco.github.io/djvdj/articles/import.html","id":"other-object-types","dir":"Articles","previous_headings":"","what":"Other object types","title":"Data Import","text":"addition Seurat objects, djvdj also works SingleCellExperiment objects data.frames. input object provided import_vdj(), data.frame containing V(D)J information returned. data.frame can used djvdj functions perform downstream analysis.","code":"vdj_dirs <- c(   MD4 = file.path(data_dir, \"MD4_BCR\"),   BL6 = file.path(data_dir, \"BL6_BCR\") )  # This will load V(D)J data and return a data.frame df_vdj <- import_vdj(vdj_dir = vdj_dirs)"},{"path":"https://rnabioco.github.io/djvdj/articles/import.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Data Import","text":"","code":"#> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.3        SeuratObject_4.1.4 Seurat_4.4.0       #> [4] djvdj_0.1.0        #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3      jsonlite_1.8.7          #>   [3] magrittr_2.0.3          spatstat.utils_3.0-3    #>   [5] rmarkdown_2.25          zlibbioc_1.46.0         #>   [7] fs_1.6.3                ragg_1.2.5              #>   [9] vctrs_0.6.3             ROCR_1.0-11             #>  [11] Rsamtools_2.16.0        memoise_2.0.1           #>  [13] spatstat.explore_3.2-3  RCurl_1.98-1.12         #>  [15] htmltools_0.5.6         sass_0.4.7              #>  [17] sctransform_0.4.0       parallelly_1.36.0       #>  [19] KernSmooth_2.23-21      bslib_0.5.1             #>  [21] htmlwidgets_1.6.2       desc_1.4.2              #>  [23] ica_1.0-3               plyr_1.8.8              #>  [25] plotly_4.10.2           zoo_1.8-12              #>  [27] cachem_1.0.8            igraph_1.5.1            #>  [29] mime_0.12               lifecycle_1.0.3         #>  [31] pkgconfig_2.0.3         Matrix_1.6-1.1          #>  [33] R6_2.5.1                fastmap_1.1.1           #>  [35] GenomeInfoDbData_1.2.10 fitdistrplus_1.1-11     #>  [37] future_1.33.0           shiny_1.7.5             #>  [39] digest_0.6.33           colorspace_2.1-0        #>  [41] S4Vectors_0.38.2        patchwork_1.1.3         #>  [43] rprojroot_2.0.3         tensor_1.5              #>  [45] irlba_2.3.5.1           GenomicRanges_1.52.0    #>  [47] textshaping_0.3.6       progressr_0.14.0        #>  [49] fansi_1.0.4             spatstat.sparse_3.0-2   #>  [51] httr_1.4.7              polyclip_1.10-6         #>  [53] abind_1.4-5             compiler_4.3.1          #>  [55] withr_2.5.1             bit64_4.0.5             #>  [57] BiocParallel_1.34.2     MASS_7.3-60             #>  [59] tools_4.3.1             lmtest_0.9-40           #>  [61] httpuv_1.6.11           future.apply_1.11.0     #>  [63] goftest_1.2-3           glue_1.6.2              #>  [65] nlme_3.1-162            promises_1.2.1          #>  [67] grid_4.3.1              Rtsne_0.16              #>  [69] cluster_2.1.4           reshape2_1.4.4          #>  [71] generics_0.1.3          gtable_0.3.4            #>  [73] spatstat.data_3.0-1     tzdb_0.4.0              #>  [75] tidyr_1.3.0             data.table_1.14.8       #>  [77] hms_1.1.3               XVector_0.40.0          #>  [79] sp_2.0-0                utf8_1.2.3              #>  [81] BiocGenerics_0.46.0     spatstat.geom_3.2-5     #>  [83] RcppAnnoy_0.0.21        ggrepel_0.9.3           #>  [85] RANN_2.6.1              pillar_1.9.0            #>  [87] stringr_1.5.0           vroom_1.6.3             #>  [89] later_1.3.1             splines_4.3.1           #>  [91] lattice_0.21-8          bit_4.0.5               #>  [93] survival_3.5-5          deldir_1.0-9            #>  [95] tidyselect_1.2.0        Biostrings_2.68.1       #>  [97] miniUI_0.1.1.1          pbapply_1.7-2           #>  [99] knitr_1.44              gridExtra_2.3           #> [101] IRanges_2.34.1          scattermore_1.2         #> [103] stats4_4.3.1            xfun_0.40               #> [105] matrixStats_1.0.0       stringi_1.7.12          #> [107] lazyeval_0.2.2          yaml_2.3.7              #> [109] evaluate_0.21           codetools_0.2-19        #> [111] tibble_3.2.1            cli_3.6.1               #> [113] uwot_0.1.16             xtable_1.8-4            #> [115] reticulate_1.32.0       systemfonts_1.0.4       #> [117] munsell_0.5.0           jquerylib_0.1.4         #> [119] GenomeInfoDb_1.36.3     Rcpp_1.0.11             #> [121] globals_0.16.2          spatstat.random_3.1-6   #> [123] png_0.1-8               parallel_4.3.1          #> [125] ellipsis_0.3.2          pkgdown_2.0.7           #> [127] ggplot2_3.4.3           readr_2.1.4             #> [129] bitops_1.0-7            listenv_0.9.0           #> [131] viridisLite_0.4.2       scales_1.2.1            #> [133] ggridges_0.5.4          crayon_1.5.2            #> [135] leiden_0.4.3            purrr_1.0.2             #> [137] rlang_1.1.1             cowplot_1.1.1"},{"path":"https://rnabioco.github.io/djvdj/articles/mutate.html","id":"filtering-vdj-data","dir":"Articles","previous_headings":"","what":"Filtering V(D)J data","title":"Data Manipulation","text":"Per-chain data can filtered filter_vdj() function. per-chain values cell parsed based ; separator converted vector. allows vector operations used filtering. function remove cells object, instead remove V(D)J data cells match provided filtering expression. example including V(D)J data cells chains, IGH, IGK, IGL. example removing V(D)J data chains except IGH.","code":"res <- so |>   filter_vdj(     all(c(\"IGH\", \"IGK\", \"IGL\") %in% chains)   )  res |>   slot(\"meta.data\") |>   filter(!is.na(clonotype_id)) |>   select(chains, cdr3) |>   head() #>                             chains #> BL6_CCACTACTCTGCAAGT-1 IGH;IGK;IGL #>                                                           cdr3 #> BL6_CCACTACTCTGCAAGT-1 CARGDSSGYVAMDYW;CLQSDNMPYTF;CALWYSNHFIF res <- so |>   filter_vdj(chains == \"IGH\")  res |>   slot(\"meta.data\") |>   filter(!is.na(clonotype_id)) |>   select(chains, cdr3) |>   head(3) #>                        chains           cdr3 #> BL6_ACACCAAAGAATTGTG-1    IGH    CAHGSRDFDVW #> BL6_ACACCGGCACAAGTAA-1    IGH CARHEGYYEAMDYW #> BL6_ACAGCTATCTGCCCTA-1    IGH   CARLLLRWMDYW"},{"path":"https://rnabioco.github.io/djvdj/articles/mutate.html","id":"summarizing-per-chain-data","dir":"Articles","previous_headings":"","what":"Summarizing per-chain data","title":"Data Manipulation","text":"summarize_vdj() function can used summarize per-chain data cell add results meta.data. example calculating median number deletions median number insertions cell. col_names argument can used name new columns, use ‘{.col}’ refer original column name. function can also used character strings chains column. example creating new column meta.data containing unique chains cell.","code":"res <- so |>   summarize_vdj(     data_cols = c(\"all_ins\", \"all_del\"),     fn        = stats::median,     col_names = \"median_{.col}\"   )  res |>   slot(\"meta.data\") |>   filter(n_chains > 1) |>   select(matches(\"all_(del|ins)\")) |>   head(2) #>                        all_ins all_del median_all_ins median_all_del #> BL6_ACACCAAAGAATTGTG-1     2;0     0;3              1            1.5 #> BL6_ACACCGGCACAAGTAA-1     0;0     0;6              0            3.0 res <- so |>   summarize_vdj(     data_cols = \"chains\",     fn        = ~ paste0(unique(.x), collapse = \"_\"),     col_names = \"unique_chains\"   )  res |>   slot(\"meta.data\") |>   filter(n_chains > 2) |>   select(chains, unique_chains) |>   head(2) #>                             chains unique_chains #> BL6_AGTGGGACATTTCACT-1 IGH;IGK;IGK       IGH_IGK #> BL6_AGTGGGAGTCAGATAA-1 IGH;IGK;IGK       IGH_IGK"},{"path":"https://rnabioco.github.io/djvdj/articles/mutate.html","id":"mutating-per-chain-data","dir":"Articles","previous_headings":"","what":"Mutating per-chain data","title":"Data Manipulation","text":"Another way modify V(D)J data present object mutate_vdj() function. function behaves similar way dplyr::mutate(), parse per-chain values cell convert vector. allows vector operations performed modifying meta.data. example calculating sum insertions deletions cell storing information new column called ‘total_indels’.","code":"res <- so |>   mutate_vdj(     total_indels = sum(all_ins, all_del)   )  res |>   slot(\"meta.data\") |>   select(all_ins, all_del, total_indels) |>   head() #>                        all_ins all_del total_indels #> BL6_AAACGGGGTTCTGTTT-1    <NA>    <NA>           NA #> BL6_AAAGATGCAACAACCT-1       0       3            3 #> BL6_AACGTTGCACGACTCG-1       0       6            6 #> BL6_AACTTTCTCGCCTGTT-1       0       5            5 #> BL6_AAGGTTCTCAGTTGAC-1    <NA>    <NA>           NA #> BL6_AAGTCTGAGTACGACG-1       0       8            8"},{"path":"https://rnabioco.github.io/djvdj/articles/mutate.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Data Manipulation","text":"","code":"#> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.3        ggplot2_3.4.3      SeuratObject_4.1.4 #> [4] Seurat_4.4.0       djvdj_0.1.0        #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3      jsonlite_1.8.7          #>   [3] magrittr_2.0.3          spatstat.utils_3.0-3    #>   [5] rmarkdown_2.25          zlibbioc_1.46.0         #>   [7] fs_1.6.3                ragg_1.2.5              #>   [9] vctrs_0.6.3             ROCR_1.0-11             #>  [11] Rsamtools_2.16.0        memoise_2.0.1           #>  [13] spatstat.explore_3.2-3  RCurl_1.98-1.12         #>  [15] htmltools_0.5.6         sass_0.4.7              #>  [17] sctransform_0.4.0       parallelly_1.36.0       #>  [19] KernSmooth_2.23-21      bslib_0.5.1             #>  [21] htmlwidgets_1.6.2       desc_1.4.2              #>  [23] ica_1.0-3               plyr_1.8.8              #>  [25] plotly_4.10.2           zoo_1.8-12              #>  [27] cachem_1.0.8            igraph_1.5.1            #>  [29] mime_0.12               lifecycle_1.0.3         #>  [31] pkgconfig_2.0.3         Matrix_1.6-1.1          #>  [33] R6_2.5.1                fastmap_1.1.1           #>  [35] GenomeInfoDbData_1.2.10 fitdistrplus_1.1-11     #>  [37] future_1.33.0           shiny_1.7.5             #>  [39] digest_0.6.33           colorspace_2.1-0        #>  [41] S4Vectors_0.38.2        patchwork_1.1.3         #>  [43] rprojroot_2.0.3         tensor_1.5              #>  [45] irlba_2.3.5.1           GenomicRanges_1.52.0    #>  [47] textshaping_0.3.6       progressr_0.14.0        #>  [49] fansi_1.0.4             spatstat.sparse_3.0-2   #>  [51] httr_1.4.7              polyclip_1.10-6         #>  [53] abind_1.4-5             compiler_4.3.1          #>  [55] bit64_4.0.5             withr_2.5.1             #>  [57] BiocParallel_1.34.2     MASS_7.3-60             #>  [59] tools_4.3.1             lmtest_0.9-40           #>  [61] httpuv_1.6.11           future.apply_1.11.0     #>  [63] goftest_1.2-3           glue_1.6.2              #>  [65] nlme_3.1-162            promises_1.2.1          #>  [67] grid_4.3.1              Rtsne_0.16              #>  [69] cluster_2.1.4           reshape2_1.4.4          #>  [71] generics_0.1.3          gtable_0.3.4            #>  [73] spatstat.data_3.0-1     tzdb_0.4.0              #>  [75] tidyr_1.3.0             data.table_1.14.8       #>  [77] hms_1.1.3               XVector_0.40.0          #>  [79] sp_2.0-0                utf8_1.2.3              #>  [81] BiocGenerics_0.46.0     spatstat.geom_3.2-5     #>  [83] RcppAnnoy_0.0.21        ggrepel_0.9.3           #>  [85] RANN_2.6.1              pillar_1.9.0            #>  [87] stringr_1.5.0           vroom_1.6.3             #>  [89] later_1.3.1             splines_4.3.1           #>  [91] lattice_0.21-8          bit_4.0.5               #>  [93] survival_3.5-5          deldir_1.0-9            #>  [95] tidyselect_1.2.0        Biostrings_2.68.1       #>  [97] miniUI_0.1.1.1          pbapply_1.7-2           #>  [99] knitr_1.44              gridExtra_2.3           #> [101] IRanges_2.34.1          scattermore_1.2         #> [103] stats4_4.3.1            xfun_0.40               #> [105] matrixStats_1.0.0       stringi_1.7.12          #> [107] lazyeval_0.2.2          yaml_2.3.7              #> [109] evaluate_0.21           codetools_0.2-19        #> [111] tibble_3.2.1            cli_3.6.1               #> [113] uwot_0.1.16             xtable_1.8-4            #> [115] reticulate_1.32.0       systemfonts_1.0.4       #> [117] munsell_0.5.0           jquerylib_0.1.4         #> [119] GenomeInfoDb_1.36.3     Rcpp_1.0.11             #> [121] globals_0.16.2          spatstat.random_3.1-6   #> [123] png_0.1-8               parallel_4.3.1          #> [125] ellipsis_0.3.2          pkgdown_2.0.7           #> [127] readr_2.1.4             bitops_1.0-7            #> [129] listenv_0.9.0           viridisLite_0.4.2       #> [131] scales_1.2.1            ggridges_0.5.4          #> [133] crayon_1.5.2            leiden_0.4.3            #> [135] purrr_1.0.2             rlang_1.1.1             #> [137] cowplot_1.1.1"},{"path":"https://rnabioco.github.io/djvdj/articles/plotting.html","id":"histograms","dir":"Articles","previous_headings":"","what":"Histograms","title":"Plotting","text":"plot_histogram() function can used plot numerical V(D)J data present object. default, plot values present data_col column every cell. data_col contains per-chain data (.e. column contains character specified sep, default ‘;’), values summarized cell. default mean calculated. Cells lack V(D)J data removed plotting, example 329 cells V(D)J data. trans argument can used specify x-axis transformation. example , mean number UMIs per cell plotted.  color cells based additional variable present object, specify column name cluster_col argument.  function used summarize per-chain values can changed using summary_fn argument. per-chain values can also plotted separately using per_chain argument. example , value chain plotted.  plot values specific chain, chain argument can used. example mean number UMIs shown IGK chain.","code":"so |>   plot_histogram(     data_col = \"umis\",     trans    = \"log10\"   ) so |>   plot_histogram(     data_col    = \"umis\",     cluster_col = \"orig.ident\",     trans       = \"log10\"   ) so |>   plot_histogram(     data_col    = \"umis\",     cluster_col = \"orig.ident\",     per_chain   = TRUE,     trans       = \"log10\"   ) so |>   plot_histogram(     data_col    = \"umis\",     cluster_col = \"orig.ident\",     chain       = \"IGK\",     trans       = \"log10\"   )"},{"path":"https://rnabioco.github.io/djvdj/articles/plotting.html","id":"violin-plots","dir":"Articles","previous_headings":"","what":"Violin plots","title":"Plotting","text":"plot_violin() function similar functionality plot_histogram() generate violin plots boxplots. djvdj plotting functions additional arguments can passed directly ggplot2 modify plot aesthetics. default clusters arranged highest lowest based values data_col. ordering can modified using plot_lvls argument”","code":"vln <- so |>   plot_violin(     data_col    = \"nCount_RNA\",     cluster_col = \"sample\",     trans       = \"log10\",          draw_quantiles = c(\"0.25\", \"0.75\")  # parameter for ggplot2::geom_violin()   )  bx <- so |>   plot_violin(     data_col    = \"nFeature_RNA\",     cluster_col = \"sample\",     method      = \"boxplot\"   )  vln + bx"},{"path":"https://rnabioco.github.io/djvdj/articles/plotting.html","id":"umap-projections","dir":"Articles","previous_headings":"","what":"UMAP projections","title":"Plotting","text":"plot V(D)J information UMAP projections, plot_scatter() function can used. default function plot ‘UMAP_1’ ‘UMAP_2’ columns x- y-axis. function use summarizing per-chain values cell must specified using summary_fn argument, default mean() numeric data. Cells lack V(D)J data stored NAs object shown plot light grey. color used plotting NAs can modified na_color argument. example , mean number mismatch mutations cell shown.  Instead summarizing per-chain values cell, can also specify chain use plotting. example plotting CDR3 length IGK chains. cell IGK chain multiple IGK chains, plotted NA. Like plotting functions, values can transformed using trans argument.  Cell clusters can outlined setting outline argument, can help visualize points lightly colored.","code":"so |>   plot_scatter(     data_col = \"all_mis\",     na_color = \"lightgrey\"   ) so |>   plot_scatter(     data_col = \"reads\",     chain    = \"IGK\",     trans    = \"log10\"   ) u1 <- so |>   plot_scatter(     data_col    = \"reads\",     plot_colors = c(\"white\", \"lightblue\", \"red\"),     trans       = \"log10\",     size        = 2,     outline     = TRUE   )  u2 <- so |>   plot_scatter(     data_col    = \"orig.ident\",     plot_colors = c(\"orange\", \"lightyellow\"),     size        = 2,     outline     = TRUE   )  u1 + u2"},{"path":"https://rnabioco.github.io/djvdj/articles/plotting.html","id":"plotting-top-clusters","dir":"Articles","previous_headings":"","what":"Plotting top clusters","title":"Plotting","text":"plot top clusters, number clusters include can specified top argument. plot_violin(), clusters ranked based values data_col column. plot_scatter(), clusters ranked based number cells. Clusters can also specified passing vector cluster names. remaining cells labeled using other_label argument.","code":"# Show the top 3 clusters with highest values for nFeature_RNA bx <- so |>   plot_violin(     data_col    = \"nFeature_RNA\",     cluster_col = \"seurat_clusters\",     method      = \"boxplot\",     top         = 3   )  # Select top clusters by passing a vector of names u <- so |>   plot_scatter(     data_col = \"seurat_clusters\",     top      = c(\"4\", \"1\", \"3\")   )  bx + u"},{"path":"https://rnabioco.github.io/djvdj/articles/plotting.html","id":"splitting-plots","dir":"Articles","previous_headings":"","what":"Splitting plots","title":"Plotting","text":"Plots can split separate panels based additional grouping variable using group_col argument. arrangement plot panels axis scales used panel can adjusted using panel_nrow panel_scales arguments.","code":"so |>   plot_histogram(     data_col    = \"reads\",     cluster_col = \"orig.ident\",     group_col   = \"seurat_clusters\",     trans       = \"log10\",          panel_nrow = 2,     panel_scales = \"free_x\"   )"},{"path":"https://rnabioco.github.io/djvdj/articles/plotting.html","id":"plot-aesthetics","dir":"Articles","previous_headings":"","what":"Plot aesthetics","title":"Plotting","text":"Plot colors can specified using plot_colors argument. vector colors, specify colors cluster name, named vector can passed. default clusters ordered abundant clusters top. modify ordering, character vector can passed plot_lvls argument.  modify color clusters, vector containing clusters interest can passed. true plot_lvls argument, name single cluster can passed plot top. example keep default colors except clusters 3 4 specifically plot clusters top.  default number data points plotted shown top right corner, plot legend, /x-axis. location label can specified using n_label argument. Label appearance can modified passing named list aesthetic parameters label_params argument.","code":"so |>   plot_scatter(     data_col    = \"orig.ident\",     plot_colors = c(MD4 = \"red\", BL6 = \"lightblue\")   ) so |>   plot_scatter(     data_col    = \"seurat_clusters\",     plot_colors = c(\"4\" = \"darkred\", \"3\" = \"red\"),     plot_lvls   = c(\"3\", \"4\")   ) so |>   plot_scatter(     data_col     = \"seurat_clusters\",     n_label      = \"corner\",     label_params = list(color = \"darkred\", fontface = \"bold\")   )"},{"path":"https://rnabioco.github.io/djvdj/articles/plotting.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Plotting","text":"","code":"#> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.4.3      SeuratObject_4.1.4 Seurat_4.4.0       #> [4] djvdj_0.1.0        #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3      jsonlite_1.8.7          #>   [3] magrittr_2.0.3          spatstat.utils_3.0-3    #>   [5] farver_2.1.1            rmarkdown_2.25          #>   [7] zlibbioc_1.46.0         fs_1.6.3                #>   [9] ragg_1.2.5              vctrs_0.6.3             #>  [11] ROCR_1.0-11             Rsamtools_2.16.0        #>  [13] memoise_2.0.1           spatstat.explore_3.2-3  #>  [15] RCurl_1.98-1.12         htmltools_0.5.6         #>  [17] sass_0.4.7              sctransform_0.4.0       #>  [19] parallelly_1.36.0       KernSmooth_2.23-21      #>  [21] bslib_0.5.1             htmlwidgets_1.6.2       #>  [23] desc_1.4.2              ica_1.0-3               #>  [25] plyr_1.8.8              plotly_4.10.2           #>  [27] zoo_1.8-12              cachem_1.0.8            #>  [29] igraph_1.5.1            mime_0.12               #>  [31] lifecycle_1.0.3         pkgconfig_2.0.3         #>  [33] Matrix_1.6-1.1          R6_2.5.1                #>  [35] fastmap_1.1.1           GenomeInfoDbData_1.2.10 #>  [37] fitdistrplus_1.1-11     future_1.33.0           #>  [39] shiny_1.7.5             digest_0.6.33           #>  [41] colorspace_2.1-0        S4Vectors_0.38.2        #>  [43] patchwork_1.1.3         rprojroot_2.0.3         #>  [45] tensor_1.5              irlba_2.3.5.1           #>  [47] GenomicRanges_1.52.0    textshaping_0.3.6       #>  [49] labeling_0.4.3          progressr_0.14.0        #>  [51] fansi_1.0.4             spatstat.sparse_3.0-2   #>  [53] httr_1.4.7              polyclip_1.10-6         #>  [55] abind_1.4-5             compiler_4.3.1          #>  [57] bit64_4.0.5             withr_2.5.1             #>  [59] BiocParallel_1.34.2     MASS_7.3-60             #>  [61] tools_4.3.1             lmtest_0.9-40           #>  [63] httpuv_1.6.11           future.apply_1.11.0     #>  [65] goftest_1.2-3           glue_1.6.2              #>  [67] nlme_3.1-162            promises_1.2.1          #>  [69] grid_4.3.1              Rtsne_0.16              #>  [71] cluster_2.1.4           reshape2_1.4.4          #>  [73] generics_0.1.3          gtable_0.3.4            #>  [75] spatstat.data_3.0-1     tzdb_0.4.0              #>  [77] tidyr_1.3.0             data.table_1.14.8       #>  [79] hms_1.1.3               XVector_0.40.0          #>  [81] sp_2.0-0                utf8_1.2.3              #>  [83] BiocGenerics_0.46.0     spatstat.geom_3.2-5     #>  [85] RcppAnnoy_0.0.21        ggrepel_0.9.3           #>  [87] RANN_2.6.1              pillar_1.9.0            #>  [89] stringr_1.5.0           vroom_1.6.3             #>  [91] later_1.3.1             splines_4.3.1           #>  [93] dplyr_1.1.3             lattice_0.21-8          #>  [95] bit_4.0.5               survival_3.5-5          #>  [97] deldir_1.0-9            ggtrace_0.2.0           #>  [99] tidyselect_1.2.0        Biostrings_2.68.1       #> [101] miniUI_0.1.1.1          pbapply_1.7-2           #> [103] knitr_1.44              gridExtra_2.3           #> [105] IRanges_2.34.1          scattermore_1.2         #> [107] stats4_4.3.1            xfun_0.40               #> [109] matrixStats_1.0.0       stringi_1.7.12          #> [111] lazyeval_0.2.2          yaml_2.3.7              #> [113] evaluate_0.21           codetools_0.2-19        #> [115] tibble_3.2.1            cli_3.6.1               #> [117] uwot_0.1.16             xtable_1.8-4            #> [119] reticulate_1.32.0       systemfonts_1.0.4       #> [121] munsell_0.5.0           jquerylib_0.1.4         #> [123] GenomeInfoDb_1.36.3     Rcpp_1.0.11             #> [125] globals_0.16.2          spatstat.random_3.1-6   #> [127] png_0.1-8               parallel_4.3.1          #> [129] ellipsis_0.3.2          pkgdown_2.0.7           #> [131] readr_2.1.4             bitops_1.0-7            #> [133] listenv_0.9.0           viridisLite_0.4.2       #> [135] scales_1.2.1            ggridges_0.5.4          #> [137] crayon_1.5.2            leiden_0.4.3            #> [139] purrr_1.0.2             rlang_1.1.1             #> [141] cowplot_1.1.1"},{"path":"https://rnabioco.github.io/djvdj/articles/similarity.html","id":"calculating-repertoire-overlap","dir":"Articles","previous_headings":"","what":"Calculating repertoire overlap","title":"Repertoire Similarity","text":"calc_similarity() function calculate repertoire overlap clusters add results object meta.data. function designed specifically work R package abdiv. similarity metric use calculations can selected passing name function method argument. beta diversity function abdiv package takes species counts input can used. sure read documentation function using ensure appropriate analysis. example calculating Jaccard dissimilarity index BL6 MD4 samples. metric, value close 0 indicates samples high number shared clonotypes. Jaccard dissimilarity calculated using following equation, \\(\\) number species present x y, \\(b\\) number species present y x, \\(c\\) number species present x y. \\[ 1 - {\\+ b + c} \\] Similarity metrics can also calculated specific chain. , column passed data_col argument must contain per-chain data, CDR3 amino acid nucleotide sequences. example similarity calculated based heavy chain CDR3 sequences. Instead adding results object meta.data, matrix can also returned.","code":"so_vdj <- so |>   calc_similarity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = abdiv::jaccard   ) so_vdj <- so |>   calc_similarity(     data_col    = \"cdr3_nt\",     cluster_col = \"sample\",     chain       = \"IGH\"   ) so |>   calc_similarity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     return_mat  = TRUE   ) #>           BL6-1     BL6-2     BL6-3     MD4-1     MD4-2     MD4-3 #> BL6-1 0.0000000 0.9639640 0.9696970 1.0000000 1.0000000 0.9830508 #> BL6-2 0.9639640 0.0000000 0.9813084 1.0000000 1.0000000 0.9848485 #> BL6-3 0.9696970 0.9813084 0.0000000 0.9807692 1.0000000 1.0000000 #> MD4-1 1.0000000 1.0000000 0.9807692 0.0000000 0.8571429 0.9000000 #> MD4-2 1.0000000 1.0000000 1.0000000 0.8571429 0.0000000 0.8750000 #> MD4-3 0.9830508 0.9848485 1.0000000 0.9000000 0.8750000 0.0000000"},{"path":"https://rnabioco.github.io/djvdj/articles/similarity.html","id":"plotting-overlap","dir":"Articles","previous_headings":"","what":"Plotting overlap","title":"Repertoire Similarity","text":"plot_similarity() function create plots summarizing repertoire overlap samples. default, Jaccard dissimilarity calculated plotted heatmap. example, none samples show strong overlap. may seem surprising since MD4 samples mainly composed single clonotype similar repertoire. However, Jaccard index measuring number overlapping clonotypes influenced clonotype abundance.  metric takes account clonotype abundance Horn-Morisita index. metric measures probability clonotypes drawn sample different. Values close 0 indicate high similarity. example see clonotype abundance taken account, MD4 samples appear similar .  appearance heatmap can modified additional arguments. Setting cluster_heatmap FALSE remove dendrograph. remove_upper_triangle argument can used plot lower triangle heatmap. plot_colors argument adjust color gradient. Additional parameters can passed directly ComplexHeatmap::Heatmap().","code":"so |>   plot_similarity(     data_col = \"clonotype_id\",     cluster_col = \"sample\"   ) so |>   plot_similarity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = abdiv::horn_morisita   ) so |>   plot_similarity(     data_col        = \"clonotype_id\",     cluster_col     = \"sample\",     method          = abdiv::horn_morisita,     plot_colors     = c(\"#3182bd\", \"white\", \"#fec44f\"),     cluster_heatmap = FALSE,     remove_upper_triangle = TRUE,          name = \"Horn-Morisita\"  # parameter to pass to Heatmap()   )"},{"path":"https://rnabioco.github.io/djvdj/articles/similarity.html","id":"circos-plot","dir":"Articles","previous_headings":"","what":"Circos plot","title":"Repertoire Similarity","text":"circos plot can created setting method argument ‘circos’. plot summarize number clonotypes overlapping samples. group_col argument can used split graph distinct sections based grouping variable. number overlapping clonotypes shown axis labels sample. width link reflects number clonotypes shared samples. Labels can rotated eliminate overlapping text using rotate_labels argument.  Plot colors can modified using plot_colors argument, additional parameters can passed directly circlize::chordDiagram(). example scale plot sample width.","code":"so |>   plot_similarity(     data_col      = \"clonotype_id\",     cluster_col   = \"sample\",     group_col     = \"orig.ident\",     method        = \"circos\",     rotate_labels = TRUE   ) so |>   plot_similarity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     group_col   = \"orig.ident\",     method      = \"circos\",     plot_colors = brewer.pal(10, \"Spectral\"),          scale = TRUE  # parameter to pass to chordDiagram()   )"},{"path":"https://rnabioco.github.io/djvdj/articles/similarity.html","id":"mds-plot","dir":"Articles","previous_headings":"","what":"MDS plot","title":"Repertoire Similarity","text":"Multidimensional scaling (MDS) can used visualize overall similarity repertoires. calc_mds() function calculate MDS coordinates using either Jaccard dissimilarity index Horn-Morisita index. method can specified using method argument. MDS coordinates get added meta.data. plot_mds() function create MDS plot labels added sample.  ggplot2 functions can used adjust plot aesthetics, additional arguments can passed directly ggplot2, e.g. size, shape, etc.  remove sample labels, set label_points FALSE.","code":"so_vdj <- so |>   calc_mds(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = \"horn_morisita\"   ) so |>   plot_mds(     data_col = \"clonotype_id\",     cluster_col = \"sample\"   ) so |>   plot_mds(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",          size  = 4,    # parameters to pass to ggplot      shape = 2   ) +   ggplot2::theme(legend.position = \"none\") so |>   plot_mds(     data_col     = \"clonotype_id\",     cluster_col  = \"sample\",     label_points = FALSE   )"},{"path":"https://rnabioco.github.io/djvdj/articles/similarity.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Repertoire Similarity","text":"","code":"#> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] RColorBrewer_1.1-3 ggplot2_3.4.3      SeuratObject_4.1.4 #> [4] Seurat_4.4.0       djvdj_0.1.0        #>  #> loaded via a namespace (and not attached): #>   [1] shape_1.4.6            jsonlite_1.8.7         magrittr_2.0.3         #>   [4] spatstat.utils_3.0-3   farver_2.1.1           rmarkdown_2.25         #>   [7] GlobalOptions_0.1.2    fs_1.6.3               ragg_1.2.5             #>  [10] vctrs_0.6.3            ROCR_1.0-11            memoise_2.0.1          #>  [13] spatstat.explore_3.2-3 htmltools_0.5.6        sass_0.4.7             #>  [16] sctransform_0.4.0      parallelly_1.36.0      KernSmooth_2.23-21     #>  [19] bslib_0.5.1            htmlwidgets_1.6.2      desc_1.4.2             #>  [22] ica_1.0-3              plyr_1.8.8             plotly_4.10.2          #>  [25] zoo_1.8-12             cachem_1.0.8           igraph_1.5.1           #>  [28] iterators_1.0.14       mime_0.12              lifecycle_1.0.3        #>  [31] pkgconfig_2.0.3        Matrix_1.6-1.1         R6_2.5.1               #>  [34] fastmap_1.1.1          clue_0.3-65            fitdistrplus_1.1-11    #>  [37] future_1.33.0          shiny_1.7.5            digest_0.6.33          #>  [40] colorspace_2.1-0       S4Vectors_0.38.2       patchwork_1.1.3        #>  [43] rprojroot_2.0.3        tensor_1.5             irlba_2.3.5.1          #>  [46] textshaping_0.3.6      labeling_0.4.3         abdiv_0.2.0            #>  [49] progressr_0.14.0       fansi_1.0.4            spatstat.sparse_3.0-2  #>  [52] httr_1.4.7             polyclip_1.10-6        abind_1.4-5            #>  [55] compiler_4.3.1         doParallel_1.0.17      bit64_4.0.5            #>  [58] withr_2.5.1            MASS_7.3-60            rjson_0.2.21           #>  [61] tools_4.3.1            lmtest_0.9-40          httpuv_1.6.11          #>  [64] future.apply_1.11.0    goftest_1.2-3          glue_1.6.2             #>  [67] nlme_3.1-162           promises_1.2.1         grid_4.3.1             #>  [70] Rtsne_0.16             cluster_2.1.4          reshape2_1.4.4         #>  [73] generics_0.1.3         gtable_0.3.4           spatstat.data_3.0-1    #>  [76] tzdb_0.4.0             tidyr_1.3.0            data.table_1.14.8      #>  [79] hms_1.1.3              sp_2.0-0               utf8_1.2.3             #>  [82] BiocGenerics_0.46.0    spatstat.geom_3.2-5    RcppAnnoy_0.0.21       #>  [85] foreach_1.5.2          ggrepel_0.9.3          RANN_2.6.1             #>  [88] pillar_1.9.0           stringr_1.5.0          vroom_1.6.3            #>  [91] later_1.3.1            circlize_0.4.15        splines_4.3.1          #>  [94] dplyr_1.1.3            lattice_0.21-8         bit_4.0.5              #>  [97] survival_3.5-5         deldir_1.0-9           tidyselect_1.2.0       #> [100] ComplexHeatmap_2.16.0  miniUI_0.1.1.1         pbapply_1.7-2          #> [103] knitr_1.44             gridExtra_2.3          IRanges_2.34.1         #> [106] scattermore_1.2        stats4_4.3.1           xfun_0.40              #> [109] matrixStats_1.0.0      stringi_1.7.12         lazyeval_0.2.2         #> [112] yaml_2.3.7             evaluate_0.21          codetools_0.2-19       #> [115] tibble_3.2.1           cli_3.6.1              uwot_0.1.16            #> [118] xtable_1.8-4           reticulate_1.32.0      systemfonts_1.0.4      #> [121] munsell_0.5.0          jquerylib_0.1.4        Rcpp_1.0.11            #> [124] globals_0.16.2         spatstat.random_3.1-6  png_0.1-8              #> [127] parallel_4.3.1         ellipsis_0.3.2         pkgdown_2.0.7          #> [130] readr_2.1.4            listenv_0.9.0          viridisLite_0.4.2      #> [133] scales_1.2.1           ggridges_0.5.4         crayon_1.5.2           #> [136] leiden_0.4.3           purrr_1.0.2            GetoptLong_1.0.5       #> [139] rlang_1.1.1            cowplot_1.1.1"},{"path":"https://rnabioco.github.io/djvdj/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ryan Sheridan. Author, maintainer. Jay Hesselberth. Contributor. Rui Fu. Contributor. Kent Riemondy. Contributor. . Funder.","code":""},{"path":"https://rnabioco.github.io/djvdj/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sheridan R (2023). djvdj: collection single-cell V(D)J tools. https://rnabioco.github.io/djvdj/, https://github.com/rnabioco/djvdj/.","code":"@Manual{,   title = {djvdj: A collection of single-cell V(D)J tools},   author = {Ryan Sheridan},   year = {2023},   note = {https://rnabioco.github.io/djvdj/, https://github.com/rnabioco/djvdj/}, }"},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"djvdj-","dir":"","previous_headings":"","what":"A collection of single-cell V(D)J tools","title":"A collection of single-cell V(D)J tools","text":"djvdj package provides range tools analyze manipulate single cell V(D)J sequencing data. tools straightforward easily integrate standard Seurat workflow. work progress, please report bugs opening new issue.","code":""},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A collection of single-cell V(D)J tools","text":"can install development version djvdj GitHub :","code":"devtools::install_github(\"rnabioco/djvdj\")"},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"import","dir":"","previous_headings":"","what":"Import","title":"A collection of single-cell V(D)J tools","text":"djvdj can import V(D)J sequencing results Cell Ranger add data Seurat SingleCellExperiment object using import_vdj(). Additional functions provided filter modify (filter_vdj(), mutate_vdj(), summarize_vdj()) object based V(D)J metrics including chains, clonotypes, CDR3 sequences.","code":"library(djvdj)  # Import VDJ data # A vector of paths can be provided to load multiple datasets # If prefixes were added to the cell barcodes when the object was generated, # include these as the vector names vdj_dirs <- c(   BL6 = system.file(\"extdata/splen/BL6_BCR\", package = \"djvdj\"),   MD4 = system.file(\"extdata/splen/MD4_BCR\", package = \"djvdj\") )  # Add V(D)J data to object so <- import_vdj(splen_so, vdj_dir = vdj_dirs)"},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"calculate","dir":"","previous_headings":"","what":"Calculate","title":"A collection of single-cell V(D)J tools","text":"djvdj allows calculate range population diversity similarity metrics implemented abdiv package. function calc_diversity() can used measure diversity per-cluster per-sample basis allow comparison across conditions. calc_similarity() measure repertoire overlap clusters samples allow direct comparisons cells interest. Additional functions also available calculate clonotype abundances V(D)J gene usage (calc_frequency(), calc_gene_usage()).","code":"so <- calc_diversity(   input       = so,              # Seurat object   data_col    = \"clonotype_id\",  # Column containing clonotypes   cluster_col = \"orig.ident\",    # Column containing cell clusters to compare   method      = abdiv::simpson   # Diversity metric to use )"},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"plot","dir":"","previous_headings":"","what":"Plot","title":"A collection of single-cell V(D)J tools","text":"‘calc’ function, djvdj also provides corresponding ‘plot’ function summarize results.","code":"# Compare the usage of different V and J genes plot_gene_usage(   input       = so,                     # Seurat object   data_cols   = c(\"v_gene\", \"j_gene\"),  # Column(s) containing V(D)J genes to plot   cluster_col = \"orig.ident\",           # Column containing cell clusters to compare   chain       = \"IGK\",                  # Chain to plot   plot_colors = \"#6A51A3\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate repertoire diversity — calc_diversity","title":"Calculate repertoire diversity — calc_diversity","text":"Calculate repertoire diversity","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate repertoire diversity — calc_diversity","text":"","code":"calc_diversity(   input,   data_col,   cluster_col = NULL,   method = abdiv::simpson,   downsample = FALSE,   n_boots = 0,   chain = NULL,   chain_col = global$chain_col,   prefix = paste0(data_col, \"_\"),   return_df = FALSE,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate repertoire diversity — calc_diversity","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating diversity, e.g. 'clonotype_id' cluster_col meta.data column containing cluster IDs use grouping cells calculating diversity. cluster_col omitted, diversity index calculated using cells. method Method use calculating diversity. named list can also passed use multiple methods. names specify names output columns. downsample Downsample clusters size calculating diversity metrics n_boots Number bootstrap replicates calculating standard error, n_boots 0 skipped. chain Chain use calculating diversity. calculate diversity single chain, column passed data_col argument must contain per-chain data CDR3 sequences. Set NULL include chains. chain_col meta.data column containing chains cell prefix Prefix add new columns return_df Return results data.frame. FALSE, results added input object. sep Separator used storing per-chain V(D)J data cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate repertoire diversity — calc_diversity","text":"Single cell object data.frame diversity metrics","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate repertoire diversity — calc_diversity","text":"","code":"# Calculate diversity for each cell cluster res <- calc_diversity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   method      = abdiv::simpson ) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, #>     colOrderStats, colProds, colQuantiles, colRanges, colRanks, #>     colSdDiffs, colSds, colSums2, colTabulates, colVarDiffs, #>     colVars, colWeightedMads, colWeightedMeans, #>     colWeightedMedians, colWeightedSds, colWeightedVars, rowAlls, #>     rowAnyNAs, rowAnys, rowAvgsPerColSet, rowCollapse, rowCounts, #>     rowCummaxs, rowCummins, rowCumprods, rowCumsums, rowDiffs, #>     rowIQRDiffs, rowIQRs, rowLogSumExps, rowMadDiffs, rowMads, #>     rowMaxs, rowMeans2, rowMedians, rowMins, rowOrderStats, #>     rowProds, rowQuantiles, rowRanges, rowRanks, rowSdDiffs, #>     rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, #>     append, as.data.frame, basename, cbind, colnames, dirname, #>     do.call, duplicated, eval, evalq, get, grep, grepl, #>     intersect, is.unsorted, lapply, mapply, match, mget, order, #>     paste, pmax, pmax.int, pmin, pmin.int, rank, rbind, rownames, #>     sapply, setdiff, sort, table, tapply, union, unique, unsplit, #>     which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages #>     'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 50 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq #>                      <character>  <character> #> 1_AAGCCGCAGCTTATCG-1          NA           NA #>                      clonotype_id_simpson_diversity #>                                           <numeric> #> 1_AAGCCGCAGCTTATCG-1                             NA"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate frequency of cell groups present in object — calc_frequency","title":"Calculate frequency of cell groups present in object — calc_frequency","text":"Calculate frequency cell label present provided meta.data column. useful comparing proportion cells belonging different samples, cell types, clonotypes, isotypes, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate frequency of cell groups present in object — calc_frequency","text":"","code":"calc_frequency(   input,   data_col,   cluster_col = NULL,   prefix = paste0(data_col, \"_\"),   return_df = FALSE,   per_chain = FALSE,   chain = NULL,   chain_col = global$chain_col,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate frequency of cell groups present in object — calc_frequency","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing cell labels use calculating frequency. calculate clonotype frequencies, provide column containing clonotype IDs, calculate isotype frequencies provide column containing cell isotypes. default clonotype_id used calculations. cluster_col meta.data column containing cluster IDs use grouping cells calculating clonotype abundance prefix Prefix add new columns return_df Return results data.frame. set FALSE, results added input object. per_chain TRUE frequency per-chain value calculated. FALSE per-chain data parsed values present data_col used . chain Chain(s) use calculating frequency. Set NULL include chains. chain_col meta.data column(s) containing chains cell sep Separator used storing per-chain V(D)J data cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate frequency of cell groups present in object — calc_frequency","text":"Single cell object data.frame clonotype frequencies","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate frequency of cell groups present in object — calc_frequency","text":"","code":"# Calculate clonotype abundance using all cells res <- calc_frequency(   vdj_sce,   data_col = \"clonotype_id\" )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 53 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq   n_cells clonotype_id_freq #>                      <character>  <character> <integer>         <integer> #> 1_AAGCCGCAGCTTATCG-1          NA           NA        NA                NA #>                      clonotype_id_pct clonotype_id_grp #>                             <numeric>         <factor> #> 1_AAGCCGCAGCTTATCG-1               NA               NA  # Group cells based on meta.data column before calculating abundance res <- calc_frequency(   vdj_sce,   data_col = \"clonotype_id\",   cluster_col = \"orig.ident\" )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 54 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq   n_cells clonotype_id_freq #>                      <character>  <character> <numeric>         <integer> #> 1_AAGCCGCAGCTTATCG-1          NA           NA        NA                NA #>                      clonotype_id_pct clonotype_id_shared #>                             <numeric>           <logical> #> 1_AAGCCGCAGCTTATCG-1               NA                  NA #>                      clonotype_id_grp #>                              <factor> #> 1_AAGCCGCAGCTTATCG-1               NA  # Add a prefix to the new columns # this is useful if multiple abundance calculations are stored in the # meta.data res <- calc_frequency(   vdj_sce,   data_col = \"clonotype_id\",   prefix = \"bcr_\" )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 53 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq   n_cells  bcr_freq #>                      <character>  <character> <integer> <integer> #> 1_AAGCCGCAGCTTATCG-1          NA           NA        NA        NA #>                        bcr_pct  bcr_grp #>                      <numeric> <factor> #> 1_AAGCCGCAGCTTATCG-1        NA       NA  # Return a data.frame instead of adding the results to the input object res <- calc_frequency(   vdj_sce,   data_col = \"clonotype_id\",   return_df = TRUE )  head(res, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAGCCGCAGCTTATCG-1     avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #> 1_AAGCCGCAGCTTATCG-1               0 -5.977054 -2.418108         <NA> #>                      exact_subclonotype_id chains n_chains cdr3 cdr3_nt #> 1_AAGCCGCAGCTTATCG-1                    NA   <NA>       NA <NA>    <NA> #>                      cdr3_length cdr3_nt_length v_gene d_gene j_gene #> 1_AAGCCGCAGCTTATCG-1        <NA>           <NA>   <NA>   <NA>   <NA> #>                      c_gene isotype reads umis productive full_length #> 1_AAGCCGCAGCTTATCG-1   <NA>    <NA>  <NA> <NA>       <NA>        <NA> #>                      paired v_ins v_del v_mis d_ins d_del d_mis j_ins #> 1_AAGCCGCAGCTTATCG-1     NA  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> #>                      j_del j_mis c_ins c_del c_mis all_ins all_del #> 1_AAGCCGCAGCTTATCG-1  <NA>  <NA>  <NA>  <NA>  <NA>    <NA>    <NA> #>                      all_mis vd_ins vd_del dj_ins dj_del v_mis_freq #> 1_AAGCCGCAGCTTATCG-1    <NA>   <NA>   <NA>   <NA>   <NA>       <NA> #>                      d_mis_freq j_mis_freq c_mis_freq all_mis_freq #> 1_AAGCCGCAGCTTATCG-1       <NA>       <NA>       <NA>         <NA> #>                      n_cells clonotype_id_freq clonotype_id_pct #> 1_AAGCCGCAGCTTATCG-1      NA                NA               NA #>                      clonotype_id_grp #> 1_AAGCCGCAGCTTATCG-1             <NA>"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate paired usage of V(D)J segments across chains — calc_gene_pairs","title":"Calculate paired usage of V(D)J segments across chains — calc_gene_pairs","text":"Quantify paired usage V(D)J segments across two chains. example, calc_gene_pairs() can calculate frequency different TRA TRB V segments appear together.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate paired usage of V(D)J segments across chains — calc_gene_pairs","text":"","code":"calc_gene_pairs(   input,   data_col,   chains,   cluster_col = NULL,   chain_col = global$chain_col,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate paired usage of V(D)J segments across chains — calc_gene_pairs","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing V(D)J genes identified clonotype. chains Chains use calculating usage different gene pairs. character vector containing two chains use calculations, e.g. c(\"IGH\", \"IGK\"). cluster_col meta.data column containing cell clusters use calculating gene usage chain_col meta.data column containing chains cell sep Separator used storing per cell V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate paired usage of V(D)J segments across chains — calc_gene_pairs","text":"data.frame containing gene pair summary","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate paired usage of V(D)J segments across chains — calc_gene_pairs","text":"","code":"# Calculate the frequency of different V genes for IGH and IGK chains calc_gene_pairs(   vdj_sce,   data_col    = \"v_gene\",   chains      = c(\"IGH\", \"IGK\"),   cluster_col = \"orig.ident\" ) #> # A tibble: 378 × 7 #>    IGH      IGK        orig.ident n_cells  freq   pct shared #>    <chr>    <chr>      <chr>        <dbl> <int> <dbl> <lgl>  #>  1 None     IGKV5-43   avid_2          33    21 63.6  TRUE   #>  2 None     IGKV5-43   avid_1          27    10 37.0  TRUE   #>  3 None     IGKV3-4    avid_1          27     2  7.41 FALSE  #>  4 None     IGKV8-24   avid_1          27     2  7.41 FALSE  #>  5 None     IGKV17-127 avid_2          33     2  6.06 FALSE  #>  6 None     IGKV6-23   avid_2          33     2  6.06 FALSE  #>  7 IGHV1-26 IGKV12-44  avid_1          27     1  3.70 FALSE  #>  8 IGHV1-78 IGKV12-44  avid_1          27     1  3.70 FALSE  #>  9 IGHV1-82 IGKV3-7    avid_1          27     1  3.70 FALSE  #> 10 IGHV10-1 None       avid_1          27     1  3.70 FALSE  #> # ℹ 368 more rows"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate V(D)J segment usage — calc_gene_usage","title":"Calculate V(D)J segment usage — calc_gene_usage","text":"Quantify usage different V(D)J segments cell cluster. usage two V(D)J segments can also calculated single chain. example, calc_gene_usage() can calculate frequency different heavy chain V J segments appear together.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate V(D)J segment usage — calc_gene_usage","text":"","code":"calc_gene_usage(   input,   data_cols,   cluster_col = NULL,   chain = NULL,   chain_col = global$chain_col,   prefix = paste0(data_cols[1], \"_\"),   return_df = FALSE,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate V(D)J segment usage — calc_gene_usage","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. data_cols meta.data column(s) containing V(D)J genes identified clonotype. multiple columns provided, paired usage genes calculated. cluster_col meta.data column containing cell clusters use calculating gene usage chain Chain(s) use calculating gene usage. Set NULL include chains. chain_col meta.data column containing chains cell prefix Prefix add new columns return_df Return results data.frame. FALSE, results added input object. sep Separator used storing per cell V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate V(D)J segment usage — calc_gene_usage","text":"data.frame containing gene usage summary","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate V(D)J segment usage — calc_gene_usage","text":"","code":"# Calculate V(D)J segment usage for all cells calc_gene_usage(   vdj_sce,   data_cols = \"v_gene\" ) #> class: SingleCellExperiment  #> dim: 200 200  #> metadata(0): #> assays(1): counts #> rownames(200): Gm48486 Trav19 ... Hkdc1 Wdr62 #> rowData names(0): #> colnames(200): 1_AAGCCGCAGCTTATCG-1 1_AATCCAGCATTACGAC-1 ... #>   2_TTCTACAAGGCCCTTG-1 2_TTTGTCATCCAAAGTC-1 #> colData names(51): orig.ident nCount_RNA ... v_gene_freq #>   v_gene_pct #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):  # Calculate gene usage separately for cell clusters calc_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   cluster_col = \"orig.ident\" ) #> class: SingleCellExperiment  #> dim: 200 200  #> metadata(0): #> assays(1): counts #> rownames(200): Gm48486 Trav19 ... Hkdc1 Wdr62 #> rowData names(0): #> colnames(200): 1_AAGCCGCAGCTTATCG-1 1_AATCCAGCATTACGAC-1 ... #>   2_TTCTACAAGGCCCTTG-1 2_TTTGTCATCCAAAGTC-1 #> colData names(52): orig.ident nCount_RNA ... v_gene_pct #>   v_gene_shared #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):  # Calculate gene usage for a specific chain(s) calc_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   chain = c(\"IGK\", \"IGL\") ) #> class: SingleCellExperiment  #> dim: 200 200  #> metadata(0): #> assays(1): counts #> rownames(200): Gm48486 Trav19 ... Hkdc1 Wdr62 #> rowData names(0): #> colnames(200): 1_AAGCCGCAGCTTATCG-1 1_AATCCAGCATTACGAC-1 ... #>   2_TTCTACAAGGCCCTTG-1 2_TTTGTCATCCAAAGTC-1 #> colData names(51): orig.ident nCount_RNA ... v_gene_freq #>   v_gene_pct #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):  # Calculate paired usage of V(D)J segments calc_gene_usage(   vdj_sce,   data_cols = c(\"v_gene\", \"j_gene\"), ) #> # A tibble: 41 × 5 #>    v_gene     j_gene n_cells  freq   pct #>    <chr>      <chr>    <int> <int> <dbl> #>  1 IGKV5-43   IGKJ2       67    36 53.7  #>  2 IGKV6-23   IGKJ5       67     3  4.48 #>  3 IGLV1      IGLJ1       67     3  4.48 #>  4 IGKV8-24   IGKJ5       67     2  2.99 #>  5 IGKV10-96  IGKJ1       67     2  2.99 #>  6 IGKV17-127 IGKJ5       67     2  2.99 #>  7 IGHV5-17   IGHJ4       67     1  1.49 #>  8 IGKV4-72   IGKJ2       67     1  1.49 #>  9 IGKV4-54   IGKJ5       67     1  1.49 #> 10 IGHV5-4    IGHJ4       67     1  1.49 #> # ℹ 31 more rows"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_mds.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform multidimensional scaling — calc_mds","title":"Perform multidimensional scaling — calc_mds","text":"Calculate MDS coordinates based beta diversity metric.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_mds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform multidimensional scaling — calc_mds","text":"","code":"calc_mds(   input,   data_col,   cluster_col,   method = \"jaccard\",   chain = NULL,   chain_col = global$chain_col,   prefix = \"\",   return_df = FALSE,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_mds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform multidimensional scaling — calc_mds","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating pairwise similarity clusters, e.g. 'clonotype_id' cluster_col meta.data column containing cluster IDs use calculating repertoire overlap method Method use comparing clusters calculating MDS coordinates, available methods include: 'jaccard', Jaccard dissimilarity index implemented abdiv::jaccard() 'horn_morisita', Horn-Morisita index implemented abdiv::horn_morisita() chain Chain use comparing clusters. perform calculations using single chain, column passed data_col argument must contain per-chain data CDR3 sequences. Set NULL include chains. chain_col meta.data column containing chains cell prefix Prefix add new columns return_df Return results data.frame. set FALSE, results added input object. sep Separator used storing per-chain V(D)J data cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_mds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform multidimensional scaling — calc_mds","text":"Single cell object data.frame MDS coordinates","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/calc_mds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform multidimensional scaling — calc_mds","text":"","code":"# Calculate MDS coordinates res <- calc_mds(   vdj_sce,   data_col = \"clonotype_id\",   cluster_col = \"isotype\" )  # Calculate MDS coordinates based on IGK CDR3 sequences res <- calc_mds(   vdj_sce,   data_col    = \"cdr3\",   cluster_col = \"isotype\",   chain       = \"IGK\" )  # Change the method used for calculating repertoire similarity res <- calc_mds(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"isotype\",   method      = \"horn_morisita\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate repertoire similarity — calc_similarity","title":"Calculate repertoire similarity — calc_similarity","text":"Calculate repertoire similarity","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate repertoire similarity — calc_similarity","text":"","code":"calc_similarity(   input,   data_col,   cluster_col,   method = abdiv::jaccard,   chain = NULL,   chain_col = global$chain_col,   prefix = NULL,   return_mat = FALSE,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate repertoire similarity — calc_similarity","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating pairwise similarity clusters, e.g. 'clonotype_id' cluster_col meta.data column containing cluster IDs use calculating repertoire overlap method Method use comparing clusters, possible values include: 'count', count number clonotypes overlapping cluster function takes two numeric vectors containing counts unique value data_col, e.g. abdiv::jaccard() chain Chain use comparing clusters. perform calculations using single chain, column passed data_col argument must contain per-chain data CDR3 sequences. Set NULL include chains. chain_col meta.data column containing chains cell prefix Prefix add new columns return_mat Return matrix similarity values. set FALSE, results added input object. sep Separator used storing per-chain V(D)J data cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate repertoire similarity — calc_similarity","text":"Single cell object data.frame similarity values","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate repertoire similarity — calc_similarity","text":"","code":"# Calculate repertoire overlap res <- calc_similarity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   method      = abdiv::jaccard )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 51 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq jaccard_avid_1 #>                      <character>  <character>      <numeric> #> 1_AAGCCGCAGCTTATCG-1          NA           NA              0 #>                      jaccard_avid_2 #>                           <numeric> #> 1_AAGCCGCAGCTTATCG-1       0.941176  # Add a prefix to the new columns # this is useful if multiple calculations are stored in the meta.data res <- calc_similarity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   prefix      = \"bcr_\" )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 51 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq bcr_avid_1 bcr_avid_2 #>                      <character>  <character>  <numeric>  <numeric> #> 1_AAGCCGCAGCTTATCG-1          NA           NA          0   0.941176  # Return a matrix instead of adding the results to the input object calc_similarity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   return_mat  = TRUE ) #>           avid_1    avid_2 #> avid_1 0.0000000 0.9411765 #> avid_2 0.9411765 0.0000000"},{"path":"https://rnabioco.github.io/djvdj/reference/cluster_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster cells based on CDR3 sequences — cluster_sequences","title":"Cluster cells based on CDR3 sequences — cluster_sequences","text":"Cluster cells based CDR3 sequences","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/cluster_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster cells based on CDR3 sequences — cluster_sequences","text":"","code":"cluster_sequences(   input,   data_col = \"cdr3\",   chain = NULL,   method = \"louvain\",   resolution = 0.5,   k = 10,   dist_method = NULL,   run_umap = TRUE,   chain_col = global$chain_col,   prefix = paste0(data_col, \"_\"),   return_df = FALSE,   sep = global$sep,   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/cluster_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster cells based on CDR3 sequences — cluster_sequences","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing sequences use calculating Levenshtein distance. chain Chain use clustering sequences. Cells one provided chain excluded analysis. NULL, sequences cells multiple chains concatenated. method Method use clustering, possible values include: 'louvain', multi-level optimization modality implemented igraph::cluster_louvain() 'leiden', Leiden clustering algorithm implemented igraph::cluster_leiden() resolution Resolution (coarseness) clusters k Number neighbors k-nearest neighbors algorithm dist_method Method use computing distance sequences. NULL, distance calculated amino acid sequences using BLOSUM62 substitution matrix levenshtein distance calculated nucleotide sequences. possible values include: 'levenshtein' 'hamming' name substitution matrix available Biostrings package, e.g. 'BLOSUM62' run_umap Uniform Manifold Approximation Projection (UMAP) dimensional reduction method performed. add UMAP coordinates meta.data. chain_col meta.data column containing chains cell. prefix Prefix add graph name return_df Return results data.frame. FALSE, results added input object. sep Separator used storing per cell V(D)J data ... Additional parameters pass clustering method","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/cluster_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster cells based on CDR3 sequences — cluster_sequences","text":"Single cell object data.frame clustering results","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/cluster_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster cells based on CDR3 sequences — cluster_sequences","text":"","code":"# Cluster cells based on CDR3 amino acid sequences and plot results res <- cluster_sequences(   vdj_sce,   data_col   = \"cdr3\",   chain      = \"IGK\",   resolution = c(0.5, 1) )  plot_scatter(   res,   x = \"cdr3_UMAP_1\",   y = \"cdr3_UMAP_2\",   data_col = \"cdr3_cluster_0.5\" ) #> Warning: Removed 141 rows containing missing values"},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Define clonotypes based on V(D)J data — define_clonotypes","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"assign new clonotype IDs based combination values present provided columns","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"","code":"define_clonotypes(   input,   data_cols,   clonotype_col = \"clonotype_id\",   filter_chains = c(\"productive\", \"full_length\"),   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_cols meta.data columns containing V(D)J data use defining clonotypes clonotype_col Name column use storing clonotype IDs filter_chains Column(s) use filtering chains prior defining clonotypes (e.g. productive, full_length). column(s) must contain TRUE FALSE chain. NULL, chains used defining clonotypes. sep Separator used storing per cell V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"Single cell object data.frame added clonotype IDs","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"","code":"# Define clonotypes using the CDR3 nucleotide sequence res <- define_clonotypes(   vdj_sce,   data_cols = \"cdr3_nt\" )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 49 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 #>                             <factor> <numeric> <numeric> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811 #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq clonotype_id #>                      <character>  <character>  <character> #> 1_AAGCCGCAGCTTATCG-1          NA           NA           NA  # Define clonotypes based on the combination of the CDR3 nucleotide sequence # and the V and J genes res <- define_clonotypes(   vdj_sce,   data_cols = c(\"cdr3_nt\", \"v_gene\", \"j_gene\") )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 49 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 #>                             <factor> <numeric> <numeric> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811 #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq clonotype_id #>                      <character>  <character>  <character> #> 1_AAGCCGCAGCTTATCG-1          NA           NA           NA  # Modify the name of the column used to store clonotype IDs res <- define_clonotypes(   vdj_sce,   data_cols = \"cdr3_nt\",   clonotype_col = \"NEW_clonotype_id\" )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 50 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq NEW_clonotype_id #>                      <character>  <character>      <character> #> 1_AAGCCGCAGCTTATCG-1          NA           NA               NA  # When defining clonotypes only use chains that are productive res <- define_clonotypes(   vdj_sce,   data_cols = \"cdr3_nt\",   filter_chains = \"productive\" )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 49 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 #>                             <factor> <numeric> <numeric> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811 #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq clonotype_id #>                      <character>  <character>  <character> #> 1_AAGCCGCAGCTTATCG-1          NA           NA           NA"},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj-package.html","id":null,"dir":"Reference","previous_headings":"","what":"djvdj: A collection of single-cell V(D)J tools — djvdj-package","title":"djvdj: A collection of single-cell V(D)J tools — djvdj-package","text":"djvdj provides single-cell V(D)J analysis workflow integrates popular single-cell data structures. includes ability cluster CDR3 sequences quantify repertoire diversity, repertoire similarity, gene segment usage. Tools also provided generate variety visualizations including rarefaction curves, circos plots UMAP projections.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"djvdj: A collection of single-cell V(D)J tools — djvdj-package","text":"Maintainer: Ryan Sheridan ryan.sheridan@cuanschutz.edu (ORCID) contributors: Jay Hesselberth jay.hesselberth@gmail.com [contributor] Rui Fu raysinensis@gmail.com [contributor] Kent Riemondy kent.riemondy@ucdenver.edu [contributor] RNA Bioscience Initiative [funder]","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for djvdj plotting functions — djvdj_theme","title":"Theme for djvdj plotting functions — djvdj_theme","text":"Theme djvdj plotting functions","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for djvdj plotting functions — djvdj_theme","text":"","code":"djvdj_theme(   base_size = 11,   base_family = \"\",   base_line_size = base_size/22,   base_rect_size = base_size/22,   line_color = \"grey85\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for djvdj plotting functions — djvdj_theme","text":"base_size base font size pts base_family base font family base_line_size base size line elements base_rect_size base size rect element line_color color line elements","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme for djvdj plotting functions — djvdj_theme","text":"ggplot theme","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme for djvdj plotting functions — djvdj_theme","text":"","code":"plot_scatter(vdj_sce, data_col = \"seurat_clusters\") +   djvdj_theme()"},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch V(D)J data from object — fetch_vdj","title":"Fetch V(D)J data from object — fetch_vdj","text":"Fetch per-chain V(D)J data object. Within object meta.data, row represents single cell can include information multiple chains. function can return data.frame row represents single chain. useful plotting per-chain metrics CDR3 length number insertions/deletions.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch V(D)J data from object — fetch_vdj","text":"","code":"fetch_vdj(   input,   data_cols = NULL,   clonotype_col = NULL,   filter_cells = FALSE,   per_chain = TRUE,   unnest = TRUE,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch V(D)J data from object — fetch_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_cols meta.data columns containing per-chain V(D)J data unnest. NULL, V(D)J data automatically selected identifying columns NAs rows clonotype_col. clonotype_col meta.data column containing clonotype IDs. column used determine columns V(D)J data. clonotype_col data_cols NULL, columns included. filter_cells Remove cells V(D)J data, clonotype_col must provided determine cells filter. per_chain TRUE return per-chain data, .e. row represents chain. unnest FALSE, nested data.frame returned row represents cell V(D)J data stored list-cols. TRUE, columns unnested row represents single chain. sep Separator used storing per cell V(D)J data. used identify columns containing per-chain data can unnested.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch V(D)J data from object — fetch_vdj","text":"data.frame containing V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch V(D)J data from object — fetch_vdj","text":"","code":"# Fetch per-chain V(D)J data fetch_vdj(vdj_sce) #> # A tibble: 216 × 50 #>    .cell_id             orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>    <chr>                <chr>           <dbl>        <int> <fct>           #>  1 1_AAGCCGCAGCTTATCG-1 avid_1              0            0 0               #>  2 1_AATCCAGCATTACGAC-1 avid_1              6            4 0               #>  3 1_ACAGCTAGTCTGGTCG-1 avid_1             15            4 0               #>  4 1_ACCAGTAGTGCAGTAG-1 avid_1              4            2 1               #>  5 1_ACCTTTATCGACGGAA-1 avid_1              5            5 0               #>  6 1_ACGAGGAGTGACTCAT-1 avid_1              1            1 1               #>  7 1_ACGCAGCTCGTGACAT-1 avid_1              3            2 1               #>  8 1_ACGCCGACACGTCAGC-1 avid_1              5            2 0               #>  9 1_ACGGAGACATGCTGGC-1 avid_1              5            3 0               #> 10 1_ACTTTCATCGCTAGCG-1 avid_1              1            1 0               #> # ℹ 206 more rows #> # ℹ 45 more variables: seurat_clusters <fct>, UMAP_1 <dbl>, UMAP_2 <dbl>, #> #   clonotype_id <chr>, exact_subclonotype_id <dbl>, chains <chr>, #> #   n_chains <int>, cdr3 <chr>, cdr3_nt <chr>, cdr3_length <dbl>, #> #   cdr3_nt_length <dbl>, v_gene <chr>, d_gene <chr>, j_gene <chr>, #> #   c_gene <chr>, isotype <chr>, reads <dbl>, umis <dbl>, #> #   productive <lgl>, full_length <lgl>, paired <lgl>, v_ins <dbl>, …  # To increase performance, specify which columns to return per-chain data, # per-cell data will be returned for all other columns fetch_vdj(   vdj_sce,   data_cols = c(\"chains\", \"reads\") ) #> # A tibble: 216 × 50 #>    .cell_id             orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>    <chr>                <chr>           <dbl>        <int> <fct>           #>  1 1_AAGCCGCAGCTTATCG-1 avid_1              0            0 0               #>  2 1_AATCCAGCATTACGAC-1 avid_1              6            4 0               #>  3 1_ACAGCTAGTCTGGTCG-1 avid_1             15            4 0               #>  4 1_ACCAGTAGTGCAGTAG-1 avid_1              4            2 1               #>  5 1_ACCTTTATCGACGGAA-1 avid_1              5            5 0               #>  6 1_ACGAGGAGTGACTCAT-1 avid_1              1            1 1               #>  7 1_ACGCAGCTCGTGACAT-1 avid_1              3            2 1               #>  8 1_ACGCCGACACGTCAGC-1 avid_1              5            2 0               #>  9 1_ACGGAGACATGCTGGC-1 avid_1              5            3 0               #> 10 1_ACTTTCATCGCTAGCG-1 avid_1              1            1 0               #> # ℹ 206 more rows #> # ℹ 45 more variables: seurat_clusters <fct>, UMAP_1 <dbl>, UMAP_2 <dbl>, #> #   clonotype_id <chr>, exact_subclonotype_id <dbl>, chains <chr>, #> #   n_chains <int>, cdr3 <chr>, cdr3_nt <chr>, cdr3_length <chr>, #> #   cdr3_nt_length <chr>, v_gene <chr>, d_gene <chr>, j_gene <chr>, #> #   c_gene <chr>, isotype <chr>, reads <dbl>, umis <chr>, #> #   productive <chr>, full_length <chr>, paired <lgl>, v_ins <chr>, …  # Only include cells that have V(D)J data # clonotype_col must be specified to identify cells with V(D)J data fetch_vdj(   vdj_sce,   filter_cells = TRUE,   clonotype_col = \"clonotype_id\" ) #> # A tibble: 83 × 50 #>    .cell_id             orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>    <chr>                <chr>           <dbl>        <int> <fct>           #>  1 1_ACGGAGACATGCTGGC-1 avid_1              5            3 0               #>  2 1_AGGCCACTCGGTCCGA-1 avid_1              3            2 1               #>  3 1_AGGCCACTCGGTCCGA-1 avid_1              3            2 1               #>  4 1_AGGCCACTCGGTCCGA-1 avid_1              3            2 1               #>  5 1_ATCATCTAGGCTAGAC-1 avid_1              3            3 0               #>  6 1_CACAGGCGTGGTCCGT-1 avid_1              9            4 0               #>  7 1_CAGCAGCGTAAAGTCA-1 avid_1              3            3 0               #>  8 1_CAGCTGGGTGCGATAG-1 avid_1              2            2 1               #>  9 1_CAGCTGGGTGCGATAG-1 avid_1              2            2 1               #> 10 1_CAGCTGGGTGCGATAG-1 avid_1              2            2 1               #> # ℹ 73 more rows #> # ℹ 45 more variables: seurat_clusters <fct>, UMAP_1 <dbl>, UMAP_2 <dbl>, #> #   clonotype_id <chr>, exact_subclonotype_id <dbl>, chains <chr>, #> #   n_chains <int>, cdr3 <chr>, cdr3_nt <chr>, cdr3_length <dbl>, #> #   cdr3_nt_length <dbl>, v_gene <chr>, d_gene <chr>, j_gene <chr>, #> #   c_gene <chr>, isotype <chr>, reads <dbl>, umis <dbl>, #> #   productive <lgl>, full_length <lgl>, paired <lgl>, v_ins <dbl>, …"},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter V(D)J data in object — filter_vdj","title":"Filter V(D)J data in object — filter_vdj","text":"Remove V(D)J data chains/cells satisfy provided condition","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter V(D)J data in object — filter_vdj","text":"","code":"filter_vdj(   input,   filt,   data_cols = NULL,   clonotype_col = \"clonotype_id\",   sep = global$sep,   per_chain = TRUE )"},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter V(D)J data in object — filter_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. filt Condition use filtering V(D)J data. allow filtering per-chain V(D)J data, data cell converted vector, e.g. 'IGH;IGK' equivalent c('IGH', 'IGK'). allows R vector operations performed per-chain values. filtering condition must return TRUE/FALSE chain single TRUE/FALSE cell. Data can filtered based cell barcodes referring '.cell_id' column. data_cols meta.data columns containing V(D)J data use filtering. NULL, V(D)J data automatically selected identifying columns NAs rows clonotype_col. clonotype_col meta.data column containing clonotype IDs. column used determine columns contain V(D)J data. sep Separator used storing per cell V(D)J data. per_chain TRUE per-chain data parsed values individual chains can filtered, FALSE values filtered .","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter V(D)J data in object — filter_vdj","text":"Object filtered meta.data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter V(D)J data in object — filter_vdj","text":"","code":"# Only include V(D)J data for productive chains res <- filter_vdj(vdj_sce, productive)  # Only include V(D)J data for cells with paired chains res <- filter_vdj(vdj_sce, paired)  # Only include V(D)J data for cells with at least one heavy and one light # chain res <- filter_vdj(   vdj_sce,   \"IGH\" %in% chains && any(c(\"IGK\", \"IGL\") %in% chains) )  # Only include V(D)J data for cells that have an IGH, IGK, and IGL chain res <- filter_vdj(   vdj_sce,   all(c(\"IGH\", \"IGK\", \"IGL\") %in% chains) )  # Only include V(D)J data for heavy chains res <- filter_vdj(vdj_sce, chains == \"IGH\")  # Remove chains that only have 1 UMI for support res <- filter_vdj(vdj_sce, umis > 1)  # Filter based on cell barcode res <- filter_vdj(vdj_sce, .cell_id == \"1_ACGGAGACATGCTGGC-1\")"},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Import V(D)J data — import_vdj","title":"Import V(D)J data — import_vdj","text":"Import V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import V(D)J data — import_vdj","text":"","code":"import_vdj(   input = NULL,   vdj_dir = NULL,   prefix = \"\",   data_cols = NULL,   filter_chains = TRUE,   filter_paired = FALSE,   define_clonotypes = NULL,   include_mutations = FALSE,   include_constant = FALSE,   aggr_dir = NULL,   quiet = FALSE,   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import V(D)J data — import_vdj","text":"input Object containing single cell data, set NULL data.frame containing V(D)J results returned vdj_dir Directory containing output cellranger vdj. vector named vector can given load data multiple runs. named vector given, cell barcodes prefixed provided names. mimics behavior Seurat::Read10X(). prefix Prefix add new columns data_cols Additional columns filtered_contig_annotations.csv include object. filter_chains include chains least one productive full length contig. filter_paired include clonotypes paired chains. TCR data clonotype must least one TRA TRB chain, BCR data clonotype must least one IGH chain least one IGK IGL chain. define_clonotypes Define clonotype IDs based V(D)J data. useful V(D)J datasets loaded consistent clonotype IDs, .e., clonotype1 across samples. Possible values : 'cdr3aa', define clonotypes based CDR3 amino acid sequence 'cdr3nt', define clonotypes based CDR3 nucleotide sequence 'cdr3_gene', define clonotypes based combination CDR3 nucleotide sequence V(D)J genes. defining clonotypes, productive full length chains used. Set NULL (default) use clonotype IDs already present input data. include_mutations Include information number insertions/deletions/mismatches chain. requires concat_ref.bam file cellranger vdj present directory provided vdj_dir. include_mutations TRUE, filter_chains also automatically set TRUE since indel data available productive chains. include_constant constant region included \"\" mutation count. TRUE, constant region included \"\" mutation count length V + J + D + C regions used calculate \"all_freq\". FALSE (default), mutations c region counted \"\" mutation count length V + J + D region used calculate frequency. aggr_dir Path cellranger aggr output. include mutation information chain, also provide paths original cellranger vdj output directories using vdj_dir argument. correctly match cell barcodes object, gene expression data sample must loaded order samples specified cellranger aggr config file. addition, loading mutation data, sample paths provided vdj_dir argument must also order samples specified cellranger aggr config file. quiet TRUE progress updates displayed sep Separator use storing per cell V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import V(D)J data — import_vdj","text":"Single cell object data.frame added V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import V(D)J data — import_vdj","text":"","code":"# Load GEX data data_dir <- system.file(\"extdata/splen\", package = \"djvdj\")  gex_dirs <- c(   BL6 = file.path(data_dir, \"BL6_GEX/filtered_feature_bc_matrix\"),   MD4 = file.path(data_dir, \"MD4_GEX/filtered_feature_bc_matrix\") )  splen_so <- gex_dirs |>   Seurat::Read10X() |>   Seurat::CreateSeuratObject() #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal)  # Loading multiple datasets # to ensure cell barcodes for the V(D)J data match those in the object # load the datasets in the same order as the gene expression data vdj_dirs <- c(   file.path(data_dir, \"BL6_BCR\"),   file.path(data_dir, \"MD4_BCR\") )  res <- splen_so |>   import_vdj(vdj_dir = vdj_dirs) #> ℹ Loading V(D)J data #> ✔ Loading V(D)J data [291ms] #>  #> ℹ Formatting V(D)J data #> ✔ Formatting V(D)J data [158ms] #>  #> ────────────────────────────────────────────────────────────────────────── #>       # cells   # VDJ   # paired   # overlap   % overlap  #> ✔ 1 |     500 |   170 |       67 |       170 |      100% #> ✔ 2 |     500 |   159 |        7 |       159 |      100% #> ──────────────────────────────────────────────────────────────────────────  head(slot(res, \"meta.data\"), 1) #>                        orig.ident nCount_RNA nFeature_RNA clonotype_id #> BL6_AAACGGGGTTCTGTTT-1        BL6        202           25         <NA> #>                        exact_subclonotype_id chains n_chains cdr3 cdr3_nt #> BL6_AAACGGGGTTCTGTTT-1                    NA   <NA>       NA <NA>    <NA> #>                        cdr3_length cdr3_nt_length v_gene d_gene j_gene #> BL6_AAACGGGGTTCTGTTT-1        <NA>           <NA>   <NA>   <NA>   <NA> #>                        c_gene isotype reads umis productive full_length #> BL6_AAACGGGGTTCTGTTT-1   <NA>    <NA>  <NA> <NA>       <NA>        <NA> #>                        paired #> BL6_AAACGGGGTTCTGTTT-1     NA  # Specifying cell prefixes using vector names # cell barcode prefixes can also be specified by passing a named vector vdj_dirs <- c(   BL6 = file.path(data_dir, \"BL6_BCR\"),   MD4 = file.path(data_dir, \"MD4_BCR\") )  res <- splen_so |>   import_vdj(vdj_dir = vdj_dirs) #> ℹ Loading V(D)J data #> ✔ Loading V(D)J data [95ms] #>  #> ℹ Formatting V(D)J data #> ✔ Formatting V(D)J data [164ms] #>  #> ────────────────────────────────────────────────────────────────────────── #>          # cells   # VDJ   # paired   # overlap   % overlap  #> ✔ BL6_ |     500 |   170 |       67 |       170 |      100% #> ✔ MD4_ |     500 |   159 |        7 |       159 |      100% #> ──────────────────────────────────────────────────────────────────────────  head(slot(res, \"meta.data\"), 1) #>                        orig.ident nCount_RNA nFeature_RNA clonotype_id #> BL6_AAACGGGGTTCTGTTT-1        BL6        202           25         <NA> #>                        exact_subclonotype_id chains n_chains cdr3 cdr3_nt #> BL6_AAACGGGGTTCTGTTT-1                    NA   <NA>       NA <NA>    <NA> #>                        cdr3_length cdr3_nt_length v_gene d_gene j_gene #> BL6_AAACGGGGTTCTGTTT-1        <NA>           <NA>   <NA>   <NA>   <NA> #>                        c_gene isotype reads umis productive full_length #> BL6_AAACGGGGTTCTGTTT-1   <NA>    <NA>  <NA> <NA>       <NA>        <NA> #>                        paired #> BL6_AAACGGGGTTCTGTTT-1     NA  # Only include V(D)J data for paired chains res <- splen_so |>   import_vdj(     vdj_dir = vdj_dirs,     filter_paired = TRUE   ) #> ℹ Loading V(D)J data #> ✔ Loading V(D)J data [114ms] #>  #> ℹ Formatting V(D)J data #> ✔ Formatting V(D)J data [136ms] #>  #> ────────────────────────────────────────────────────────────────────────── #>          # cells   # VDJ   # paired   # overlap   % overlap  #> ✔ BL6_ |     500 |   170 |       67 |       170 |      100% #> ✔ MD4_ |     500 |   159 |        7 |       159 |      100% #> ──────────────────────────────────────────────────────────────────────────  head(slot(res, \"meta.data\"), 1) #>                        orig.ident nCount_RNA nFeature_RNA clonotype_id #> BL6_AAACGGGGTTCTGTTT-1        BL6        202           25         <NA> #>                        exact_subclonotype_id chains n_chains cdr3 cdr3_nt #> BL6_AAACGGGGTTCTGTTT-1                    NA   <NA>       NA <NA>    <NA> #>                        cdr3_length cdr3_nt_length v_gene d_gene j_gene #> BL6_AAACGGGGTTCTGTTT-1        <NA>           <NA>   <NA>   <NA>   <NA> #>                        c_gene isotype reads umis productive full_length #> BL6_AAACGGGGTTCTGTTT-1   <NA>    <NA>  <NA> <NA>       <NA>        <NA> #>                        paired #> BL6_AAACGGGGTTCTGTTT-1     NA  # Defining clonotypes # this is useful if the original clonotype IDs are not consistent across # datasets, i.e. clonotype1 is not the same for all samples res <- splen_so |>   import_vdj(     vdj_dir = vdj_dirs,     define_clonotypes = \"cdr3_gene\"   ) #> ℹ Loading V(D)J data #> ✔ Loading V(D)J data [92ms] #>  #> ℹ Formatting V(D)J data #> ✔ Formatting V(D)J data [141ms] #>  #> ℹ Defining clonotypes #> ✔ Defining clonotypes [175ms] #>  #> ────────────────────────────────────────────────────────────────────────── #>          # cells   # VDJ   # paired   # overlap   % overlap  #> ✔ BL6_ |     500 |   170 |       67 |       170 |      100% #> ✔ MD4_ |     500 |   159 |        7 |       159 |      100% #> ──────────────────────────────────────────────────────────────────────────  head(slot(res, \"meta.data\"), 1) #>                        orig.ident nCount_RNA nFeature_RNA #> BL6_AAACGGGGTTCTGTTT-1        BL6        202           25 #>                        exact_subclonotype_id chains n_chains cdr3 cdr3_nt #> BL6_AAACGGGGTTCTGTTT-1                    NA   <NA>       NA <NA>    <NA> #>                        cdr3_length cdr3_nt_length v_gene d_gene j_gene #> BL6_AAACGGGGTTCTGTTT-1        <NA>           <NA>   <NA>   <NA>   <NA> #>                        c_gene isotype reads umis productive full_length #> BL6_AAACGGGGTTCTGTTT-1   <NA>    <NA>  <NA> <NA>       <NA>        <NA> #>                        paired clonotype_id #> BL6_AAACGGGGTTCTGTTT-1     NA         <NA>  # Include mutation information for each chain # this information will be included if the file concat_ref.bam is present # including mutation information will cause data import to be slower res <- splen_so |>   import_vdj(     vdj_dir = vdj_dirs,     include_mutations = TRUE   ) #> ℹ Loading V(D)J data #> ✔ Loading V(D)J data [418ms] #>  #> ℹ Calculating mutation frequencies #> ✔ Calculating mutation frequencies [610ms] #>  #> ℹ Formatting V(D)J data #> ✔ Formatting V(D)J data [272ms] #>  #> ────────────────────────────────────────────────────────────────────────── #>          # cells   # VDJ   # paired   # overlap   % overlap  #> ✔ BL6_ |     500 |   170 |       67 |       170 |      100% #> ✔ MD4_ |     500 |   159 |        7 |       159 |      100% #> ──────────────────────────────────────────────────────────────────────────  head(slot(res, \"meta.data\"), 1) #>                        orig.ident nCount_RNA nFeature_RNA clonotype_id #> BL6_AAACGGGGTTCTGTTT-1        BL6        202           25         <NA> #>                        exact_subclonotype_id chains n_chains cdr3 cdr3_nt #> BL6_AAACGGGGTTCTGTTT-1                    NA   <NA>       NA <NA>    <NA> #>                        cdr3_length cdr3_nt_length v_gene d_gene j_gene #> BL6_AAACGGGGTTCTGTTT-1        <NA>           <NA>   <NA>   <NA>   <NA> #>                        c_gene isotype reads umis productive full_length #> BL6_AAACGGGGTTCTGTTT-1   <NA>    <NA>  <NA> <NA>       <NA>        <NA> #>                        paired v_ins v_del v_mis d_ins d_del d_mis j_ins #> BL6_AAACGGGGTTCTGTTT-1     NA  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> #>                        j_del j_mis c_ins c_del c_mis all_ins all_del #> BL6_AAACGGGGTTCTGTTT-1  <NA>  <NA>  <NA>  <NA>  <NA>    <NA>    <NA> #>                        all_mis vd_ins vd_del dj_ins dj_del v_mis_freq #> BL6_AAACGGGGTTCTGTTT-1    <NA>   <NA>   <NA>   <NA>   <NA>       <NA> #>                        d_mis_freq j_mis_freq c_mis_freq all_mis_freq #> BL6_AAACGGGGTTCTGTTT-1       <NA>       <NA>       <NA>         <NA>"},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify object meta.data — mutate_meta","title":"Modify object meta.data — mutate_meta","text":"Modify object meta.data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify object meta.data — mutate_meta","text":"","code":"mutate_meta(input, fn, ...)"},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify object meta.data — mutate_meta","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. fn Function use modifying object meta.data. can either function, e.g. mean, purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE) \".x\" refers meta.data table. ... Additional arguments pass provided function","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify object meta.data — mutate_meta","text":"Object mutated meta.data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify object meta.data — mutate_meta","text":"","code":"# Sum two meta.data columns # all additional arguments provided to mutate_meta() are passed directly to # the function (in this case, dplyr::mutate()) res <- mutate_meta(   tiny_sce,   dplyr::mutate,   NEW = nCount_RNA + nFeature_RNA )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 8 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2       NEW #>                             <factor> <numeric> <numeric> <numeric> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811         0  # Pass a purrr-style lambda # this produces the same result as the previous example res <- mutate_meta(   tiny_sce,   ~ dplyr::mutate(.x, NEW = nCount_RNA + nFeature_RNA) )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 8 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2       NEW #>                             <factor> <numeric> <numeric> <numeric> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811         0  # Modify multiple meta.data columns res <- mutate_meta(   tiny_sce,   dplyr::mutate,   NEW_1 = nCount_RNA + nFeature_RNA,   NEW_2 = stringr::str_c(orig.ident, seurat_clusters) )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 9 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2     NEW_1 #>                             <factor> <numeric> <numeric> <numeric> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811         0 #>                            NEW_2 #>                      <character> #> 1_AAGCCGCAGCTTATCG-1     avid_10  # Remove meta.data columns # any function can be passed to mutate_meta(), in this example # dplyr::select() is used to remove columns res <- mutate_meta(   tiny_sce,   dplyr::select,   -UMAP_1 )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 6 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_2 #>                             <factor> <numeric> #> 1_AAGCCGCAGCTTATCG-1               0  -2.41811  # Perform grouped operations using dplyr # multi-line commands can be passed using brackets, just refer to the # meta.data with '.x' # this calculates the mean number of features for each group in the # orig.ident meta.data column res <- mutate_meta(tiny_sce, ~ {   y <- dplyr::group_by(.x, orig.ident)   y <- dplyr::mutate(y, mean_genes = mean(nFeature_RNA))   y })  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 8 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 mean_genes #>                             <factor> <numeric> <numeric>  <numeric> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811    2.35417"},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify V(D)J data in object — mutate_vdj","title":"Modify V(D)J data in object — mutate_vdj","text":"Modify per-chain V(D)J data cell. function offers greater flexibility summarize_vdj(), less user-friendly.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify V(D)J data in object — mutate_vdj","text":"","code":"mutate_vdj(   input,   ...,   clonotype_col = global$clonotype_col,   data_cols = NULL,   return_df = FALSE,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify V(D)J data in object — mutate_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. ... Name-value pairs use creating modifying per-chain V(D)J meta.data, e.g. mean_umis = mean(umis). allow modification per-chain V(D)J data, data cell converted vector, e.g. 'IGH;IGK' equivalent c('IGH', 'IGK'). allows R vector operations performed per-chain values. operations produce result greater length 1 need returned list(), e.g. new_col = umis + 1 return new value chain, prevent error must written new_col = list(umis + 1). clonotype_col meta.data column containing clonotype IDs. used identify columns containing V(D)J data. data_cols meta.data columns containing V(D)J data modify. NULL, data automatically selected identifying columns NAs rows clonotype_col. return_df Return results data.frame. FALSE, results added input object. sep Separator used storing per cell V(D)J data. NULL, columns containing V(D)J data converted vectors filtering.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify V(D)J data in object — mutate_vdj","text":"Object modified meta.data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify V(D)J data in object — mutate_vdj","text":"","code":"# Calculate mean reads and UMIs per cell res <- mutate_vdj(   vdj_sce,   mean_umis  = mean(umis),   mean_reads = mean(reads) )  head(slot(res, \"colData\"), 3) #> DataFrame with 3 rows and 51 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #> 1_AATCCAGCATTACGAC-1      avid_1          6            4               0 #> 1_ACAGCTAGTCTGGTCG-1      avid_1         15            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0 -5.977054 -2.418108           NA #> 1_AATCCAGCATTACGAC-1               0  1.282983 -0.700069           NA #> 1_ACAGCTAGTCTGGTCG-1               0 -0.537163  0.133260           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #> 1_AATCCAGCATTACGAC-1                    NA          NA        NA #> 1_ACAGCTAGTCTGGTCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA             NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA        NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq mean_umis mean_reads #>                      <character>  <character> <numeric>  <numeric> #> 1_AAGCCGCAGCTTATCG-1          NA           NA        NA         NA #> 1_AATCCAGCATTACGAC-1          NA           NA        NA         NA #> 1_ACAGCTAGTCTGGTCG-1          NA           NA        NA         NA  # Calculate the total number of insertions + deletions for each chain # we have to wrap our expression in list() since a value is returned for # each chain res <- mutate_vdj(   vdj_sce,   indels = list(all_ins + all_del) )  head(slot(res, \"colData\"), 3) #> DataFrame with 3 rows and 50 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #> 1_AATCCAGCATTACGAC-1      avid_1          6            4               0 #> 1_ACAGCTAGTCTGGTCG-1      avid_1         15            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0 -5.977054 -2.418108           NA #> 1_AATCCAGCATTACGAC-1               0  1.282983 -0.700069           NA #> 1_ACAGCTAGTCTGGTCG-1               0 -0.537163  0.133260           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #> 1_AATCCAGCATTACGAC-1                    NA          NA        NA #> 1_ACAGCTAGTCTGGTCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA             NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA        NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq      indels #>                      <character>  <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA           NA          NA #> 1_AATCCAGCATTACGAC-1          NA           NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA           NA          NA  # Create a new column showing the unique chains for each cell res <- mutate_vdj(   vdj_sce,   unique_chains = stringr::str_c(unique(chains), collapse = \"_\") )  head(slot(res, \"colData\"), 3) #> DataFrame with 3 rows and 50 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #> 1_AATCCAGCATTACGAC-1      avid_1          6            4               0 #> 1_ACAGCTAGTCTGGTCG-1      avid_1         15            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0 -5.977054 -2.418108           NA #> 1_AATCCAGCATTACGAC-1               0  1.282983 -0.700069           NA #> 1_ACAGCTAGTCTGGTCG-1               0 -0.537163  0.133260           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #> 1_AATCCAGCATTACGAC-1                    NA          NA        NA #> 1_ACAGCTAGTCTGGTCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA             NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA        NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq unique_chains #>                      <character>  <character>   <character> #> 1_AAGCCGCAGCTTATCG-1          NA           NA            NA #> 1_AATCCAGCATTACGAC-1          NA           NA            NA #> 1_ACAGCTAGTCTGGTCG-1          NA           NA            NA  # Determine which cells have both an IGK and IGL chain res <- mutate_vdj(   vdj_sce,   both_light = all(c(\"IGK\", \"IGL\") %in% chains) )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 50 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq both_light #>                      <character>  <character>  <logical> #> 1_AAGCCGCAGCTTATCG-1          NA           NA      FALSE  # Determine which cells have multiple light chains res <- mutate_vdj(   vdj_sce,   multi_light = sum(chains %in% c(\"IGK\", \"IGL\")) > 1 )  head(slot(res, \"colData\"), 3) #> DataFrame with 3 rows and 50 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #> 1_AATCCAGCATTACGAC-1      avid_1          6            4               0 #> 1_ACAGCTAGTCTGGTCG-1      avid_1         15            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0 -5.977054 -2.418108           NA #> 1_AATCCAGCATTACGAC-1               0  1.282983 -0.700069           NA #> 1_ACAGCTAGTCTGGTCG-1               0 -0.537163  0.133260           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #> 1_AATCCAGCATTACGAC-1                    NA          NA        NA #> 1_ACAGCTAGTCTGGTCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA             NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA        NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq multi_light #>                      <character>  <character>   <logical> #> 1_AAGCCGCAGCTTATCG-1          NA           NA       FALSE #> 1_AATCCAGCATTACGAC-1          NA           NA       FALSE #> 1_ACAGCTAGTCTGGTCG-1          NA           NA       FALSE"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clone_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clonotype frequency — plot_clone_frequency","title":"Plot clonotype frequency — plot_clone_frequency","text":"Plot clonotype frequency","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clone_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clonotype frequency — plot_clone_frequency","text":"","code":"plot_clone_frequency(   input,   data_col = global$clonotype_col,   cluster_col = NULL,   group_col = NULL,   clones = NULL,   method = \"bar\",   units = \"percent\",   plot_colors = NULL,   plot_lvls = names(plot_colors),   trans = \"identity\",   panel_nrow = NULL,   panel_scales = \"free_x\",   n_label = \"corner\",   label_params = list(),   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clone_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clonotype frequency — plot_clone_frequency","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing clonotype IDs use calculating clonotype abundance cluster_col meta.data column containing cluster IDs use grouping cells calculating clonotype frequencies. Clonotypes plotted separately cluster. group_col meta.data column use grouping cluster IDs present cluster_col. useful multiple replicates patients treatment condition. applicable method 'line'. clones integer specifying number clonotypes show, vector giving names clonotypes include. method set 'line', specify clonotypes label. method Method use plotting, possible values include: 'bar', create bargraph 'line', create rank-abundance plot units Units plot y-axis, either 'frequency' 'percent' plot_colors Character vector containing colors plotting plot_lvls Levels use ordering clusters trans Transformation use plotting data, e.g. 'log10'. default values transformed, refer ggplot2::continuous_scale() panel_nrow number rows use arranging plot panels, use separate bar graphs created cell cluster panel_scales scales plot panels fixed free. passes scales specification ggplot2::facet_wrap, can 'fixed', 'free', 'free_x', 'free_y'. 'fixed' cause panels share scales. Use separate bar graphs created cell cluster. n_label Location plot n label added, can combination following: 'corner', display total number cells plotted top right corner, position label can modified passing x y specifications label_params argument 'legend', display number cells plotted group shown plot legend 'none', display number cells plotted label_params Named list providing additional parameters modify clonotype n label aesthetics, e.g. list(size = 4, color = \"red\") ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clone_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot clonotype frequency — plot_clone_frequency","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clone_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot clonotype frequency — plot_clone_frequency","text":"","code":"# Plot clonotype abundance using all cells plot_clone_frequency(   vdj_sce,   data_col = \"clonotype_id\" )   # Plot clonotype abundance separately for each cell cluster plot_clone_frequency(   vdj_sce,   cluster_col = \"orig.ident\" )   # Plot the frequency of each clonotype instead of percentage plot_clone_frequency(   vdj_sce,   cluster_col = \"orig.ident\",   units = \"frequency\" )   # Specify colors to use for each cell cluster plot_clone_frequency(   vdj_sce,   cluster_col = \"orig.ident\",   plot_colors = c(avid_1 = \"blue\", avid_2 = \"red\") )   # Specify order to use for plotting cell clusters plot_clone_frequency(   vdj_sce,   cluster_col = \"orig.ident\",   plot_lvls = c(\"avid_2\", \"avid_1\") )   # Specify the number of top clonotypes to plot plot_clone_frequency(   vdj_sce,   clones = 5 )   #' # Create line graph # use clones to set the number of clonotypes to label plot_clone_frequency(   vdj_sce,   cluster_col = \"orig.ident\",   method = \"line\",   clones = 3 )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot repertoire diversity — plot_diversity","title":"Plot repertoire diversity — plot_diversity","text":"Plot repertoire diversity","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot repertoire diversity — plot_diversity","text":"","code":"plot_diversity(   input,   data_col,   cluster_col = NULL,   group_col = NULL,   method = abdiv::simpson,   downsample = FALSE,   n_boots = 0,   chain = NULL,   chain_col = global$chain_col,   sep = global$sep,   plot_colors = NULL,   plot_lvls = names(plot_colors),   panel_nrow = NULL,   panel_scales = \"free\",   n_label = NULL,   p_label = \"all\",   p_method = NULL,   p_file = NULL,   label_params = list(),   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot repertoire diversity — plot_diversity","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating diversity, e.g. 'clonotype_id' cluster_col meta.data column containing cluster IDs use grouping cells calculating clonotype abundance group_col meta.data column use grouping clusters present cluster_col method Function use calculating diversity, e.g. abdiv::simpson. named list functions can passed plot multiple diversity metrics, e.g. list(simpson = abdiv::simpson, shannon = abdiv::shannon) downsample Downsample clusters size calculating diversity metrics n_boots Number bootstrap replicates calculating standard deviation, n_boots 0 skipped. chain Chain use calculating diversity. calculate diversity single chain, column passed data_col argument must contain per-chain data CDR3 sequences. Set NULL include chains. chain_col meta.data column containing chains cell sep Separator used storing per-chain V(D)J data cell plot_colors Character vector containing colors plotting plot_lvls Character vector containing levels ordering panel_nrow number rows use arranging plot panels panel_scales scales plot panels fixed free. passes scales specification ggplot2::facet_wrap, can 'fixed', 'free', 'free_x', 'free_y'. 'fixed' cause panels share scales. n_label Location plot n label added, can combination following: 'corner', display total number cells plotted top right corner, position label can modified passing x y specifications label_params argument 'axis', display number cells plotted group shown x-axis 'legend', display number cells plotted group shown plot legend 'none', display number cells plotted p_label Specification indicating p-values labeled plot, can one following: 'none', display p-values '', show p-values groups named vector providing p-value cutoffs labels display, e.g. c('*' = 0.05, '**' = 0.01, '***' = 0.001). keyword 'value' can used display p-value less certain cutoff, e.g. c(value = 0.05, ns = 1.1) show significant p-values, others labeled 'ns'. p_method Method use calculating p-values, default comparing two groups t-test used. comparing two groups Kruskal-Wallis test used. p-values adjusted multiple testing using Bonferroni correction. Possible methods include: 't', two sample t-test performed stats::t.test() 'wilcox', Wilcoxon rank sum test performed stats::wilcox.test() 'kruskal', Kruskal-Wallis test performed stats::kruskal.test() p_file File path save table containing p-values comparison. label_params Named list providing additional parameters modify n label aesthetics, e.g. list(size = 4, color = \"red\") ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot repertoire diversity — plot_diversity","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot repertoire diversity — plot_diversity","text":"","code":"# Specify method to use for calculating repertoire diversity plot_diversity(   vdj_sce,   data_col = \"clonotype_id\",   method   = abdiv::shannon )   # Plot diversity separately for each cell cluster plot_diversity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\" )   # Plot multiple diversity metrics mets <- list(   simpson = abdiv::simpson,   shannon = abdiv::shannon )  plot_diversity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   method      = mets )   # Specify colors to use for each cell cluster plot_diversity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   plot_colors = c(avid_2 = \"green\", avid_1 = \"purple\") )   # Specify order to use for plotting cell clusters plot_diversity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   plot_lvls   = c(\"avid_2\", \"avid_1\") )   # Specify how to organize panels when plotting multiple metrics plot_diversity(   vdj_sce,   data_col   = \"clonotype_id\",   method     = mets,   panel_nrow = 2 )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot frequency of cell groups present in object — plot_frequency","title":"Plot frequency of cell groups present in object — plot_frequency","text":"Plot frequency cell label present provided meta.data column. useful comparing proportion cells belonging different samples, cell types, clonotypes, isotypes, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot frequency of cell groups present in object — plot_frequency","text":"","code":"plot_frequency(   input,   data_col,   cluster_col = NULL,   group_col = NULL,   method = \"bar\",   stack = NULL,   units = \"percent\",   top = NULL,   other_label = \"other\",   plot_colors = NULL,   plot_lvls = NULL,   na_color = \"grey80\",   trans = \"identity\",   show_points = TRUE,   show_zeros = TRUE,   n_label = NULL,   p_label = c(value = 0.05),   p_method = NULL,   p_file = NULL,   label_params = list(),   ...,   per_chain = FALSE,   chain = NULL,   chain_col = global$chain_col,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot frequency of cell groups present in object — plot_frequency","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing cell labels use calculating frequency, e.g. cell types, isotypes etc. cluster_col meta.data column containing cluster IDs (patients, treatment conditions, etc.) use calculating frequency. Calculations performed separately cluster. group_col meta.data column use grouping cluster IDs present cluster_col. useful multiple replicates patients treatment condition. method Method use plotting group_col provided, possible values 'bar' 'boxplot' stack TRUE, stacked bargraphs generated, otherwise grouped bargraphs generated units Units plot y-axis, either 'frequency' 'percent' top show top cell groups present data_col, provide one following, cells labeled using value provided other_label argument. NULL automatically set. Integer specifying number top groups show Vector specifying names cell groups show other_label Label use '' cells top specified, NULL cell groups present data_col displayed plot. plot_colors Character vector containing colors plotting plot_lvls Levels use ordering clusters groups na_color Color use missing values trans Transformation use plotting data, e.g. 'log10'. default values transformed, refer ggplot2::continuous_scale() options. Values can transformed stack FALSE show_points TRUE data points shown boxplots, point size can adjusted using point.size parameter show_zeros TRUE cell labels missing cluster still shown plot n_label Location plot n label added, can combination following: 'corner', display total number cells plotted top right corner, position label can modified passing x y specifications label_params argument 'axis', display number cells plotted group shown x-axis 'legend', display number cells plotted group shown plot legend 'none', display number cells plotted p_label Specification indicating p-values labeled plot, can one following: 'none', display p-values '', show p-values groups named vector providing p-value cutoffs labels display, e.g. c('*' = 0.05, '**' = 0.01, '***' = 0.001). keyword 'value' can used display p-value less certain cutoff, e.g. c(value = 0.05, ns = 1.1) show significant p-values, others labeled 'ns'. p_method Method use calculating p-values, default comparing two groups t-test used. comparing two groups Kruskal-Wallis test used. exception edgeR method, p-values adjusted multiple testing using Bonferroni correction. Possible methods include: 't', two sample t-test performed stats::t.test() 'wilcox', Wilcoxon rank sum test performed stats::wilcox.test() 'kruskal', Kruskal-Wallis test performed stats::kruskal.test() 'edgeR', differential abundance calculated edgeR package p_file File path save table containing p-values comparison. label_params Named list providing additional parameters modify n label aesthetics, e.g. list(size = 4, color = \"red\") ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc. per_chain TRUE frequency per-chain value calculated. FALSE per-chain data parsed values present data_col used . chain Chain(s) use calculating frequency. Set NULL include chains. chain_col meta.data column(s) containing chains cell sep Separator storing per-chain data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot frequency of cell groups present in object — plot_frequency","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot frequency of cell groups present in object — plot_frequency","text":"","code":"# Plot frequency of different isotypes plot_frequency(   vdj_sce,   data_col = \"isotype\" )   # Plot frequency separately for cell clusters plot_frequency(   vdj_sce,   data_col    = \"isotype\",   cluster_col = \"orig.ident\" )   # Create grouped bar graphs plot_frequency(   vdj_sce,   data_col    = \"isotype\",   cluster_col = \"orig.ident\",   stack       = FALSE )   # Plot number of cells on the y-axis plot_frequency(   vdj_sce,   data_col    = \"seurat_clusters\",   cluster_col = \"orig.ident\",   units       = \"frequency\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot paired usage of V(D)J segments across chains — plot_gene_pairs","title":"Plot paired usage of V(D)J segments across chains — plot_gene_pairs","text":"Plot paired usage V(D)J segments across two chains. example, plot_gene_pairs() can used plot frequency different TRA TRB V segments appear together.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot paired usage of V(D)J segments across chains — plot_gene_pairs","text":"","code":"plot_gene_pairs(   input,   data_col,   chains,   cluster_col = NULL,   genes = 20,   chain_col = global$chain_col,   method = \"heatmap\",   units = \"percent\",   return_list = FALSE,   sep = global$sep,   plot_colors = NULL,   plot_lvls = NULL,   trans = \"identity\",   rotate_labels = FALSE,   panel_nrow = NULL,   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot paired usage of V(D)J segments across chains — plot_gene_pairs","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing V(D)J genes identified clonotype. chains Chains use calculating usage different gene pairs. character vector containing two chains use calculations, e.g. c(\"IGH\", \"IGK\"). cluster_col meta.data column containing cell clusters use calculating gene usage genes integer specifying number genes plot, vector giving names genes include. chain_col meta.data column containing chains cell method Method use plotting, possible values : 'heatmap', create heatmap, default two columns passed data_cols argument 'circos', create circos plot, requires two columns provided data_cols argument units Units show scale, either 'frequency' 'percent' return_list list plots returned, FALSE plots combined arranged panels sep Separator used storing per-chain V(D)J data cell plot_colors Character vector containing colors use plot. bar graph created specify color cell clusters. heatmap, colors used generate color gradient. plot_lvls Levels use ordering clusters trans Transformation use plotting segment usage, e.g. 'log10'. default values transformed, refer ggplot2::continuous_scale() options. rotate_labels labels circos plot rotated reduce overlapping text panel_nrow number rows use arranging plots return_list FALSE ... Additional arguments pass plotting function, ggplot2::geom_tile() heatmap, circlize::chordDiagram() circos plot","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot paired usage of V(D)J segments across chains — plot_gene_pairs","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot paired usage of V(D)J segments across chains — plot_gene_pairs","text":"","code":"# Plot the frequency of different V genes for IGH and IGK chains plot_gene_pairs(   vdj_sce,   data_col    = \"v_gene\",   chains      = c(\"IGH\", \"IGK\"),   cluster_col = \"orig.ident\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot V(D)J segment usage — plot_gene_usage","title":"Plot V(D)J segment usage — plot_gene_usage","text":"Plot usage different V(D)J segments cell cluster. usage two V(D)J segments can also plotted single chain.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot V(D)J segment usage — plot_gene_usage","text":"","code":"plot_gene_usage(   input,   data_cols,   cluster_col = NULL,   group_col = NULL,   method = NULL,   units = \"percent\",   genes = 20,   return_list = FALSE,   plot_colors = NULL,   plot_lvls = NULL,   trans = \"identity\",   rotate_labels = FALSE,   panel_nrow = NULL,   show_points = TRUE,   show_zeros = TRUE,   n_label = NULL,   p_label = c(value = 0.05),   p_method = NULL,   p_file = NULL,   label_params = list(),   ...,   chain = NULL,   chain_col = global$chain_col,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot V(D)J segment usage — plot_gene_usage","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. data_cols meta.data column containing genes clonotype, provide vector two column names plot paired usage genes cluster_col meta.data column containing cell clusters use calculating gene usage group_col meta.data column use grouping cluster IDs present cluster_col. useful multiple replicates patients treatment condition. method Method use plotting, possible values : 'bar', create bargraph, default single column passed data_cols argument 'boxplot', create boxplots, can used group_col provided 'heatmap', create heatmap, default two columns passed data_cols argument 'circos', create circos plot, requires two columns provided data_cols argument units Units plot y-axis, either 'frequency' 'percent' genes integer specifying number genes plot, vector giving names genes include. return_list list plots returned, FALSE plots combined arranged panels plot_colors Character vector containing colors use plot. bar graph created specify color cell clusters. heatmap, colors used generate color gradient. plot_lvls Levels use ordering clusters trans Transformation use plotting segment usage, e.g. 'log10'. default values transformed, refer ggplot2::continuous_scale() options. rotate_labels labels circos plot rotated reduce overlapping text panel_nrow number rows use arranging plots return_list FALSE show_points TRUE data points shown boxplots, point size can adjusted using point.size parameter show_zeros TRUE cell labels missing cluster still shown plot n_label Location plot n label added, applicable method 'bar' can combination following: 'corner', display total number cells plotted top right corner, position label can modified passing x y specifications label_params argument 'legend', display number cells plotted group shown plot legend 'none', display number cells plotted p_label Specification indicating p-values labeled plot, can one following: 'none', display p-values '', show p-values groups named vector providing p-value cutoffs labels display, e.g. c('*' = 0.05, '**' = 0.01, '***' = 0.001). keyword 'value' can used display p-value less certain cutoff, e.g. c(value = 0.05, ns = Inf) show significant p-values, others labeled 'ns'. p_method Method use calculating p-values. default comparing two groups t-test performed, comparing two groups Kruskal-Wallis test used. p-values adjusted multiple testing using Bonferroni correction. Possible methods include: 't', two sample t-test performed stats::t.test() 'wilcox', Wilcoxon rank sum test performed stats::wilcox.test() 'kruskal', Kruskal-Wallis test performed stats::kruskal.test() p_file File path save table containing p-values comparison. label_params Named list providing additional parameters modify n label aesthetics, e.g. list(size = 4, color = \"red\") ... Additional arguments pass plotting function, ggplot2::geom_col() bargraph, ggplot2::geom_tile() heatmap, circlize::chordDiagram() circos plot chain Chain use calculating gene usage, set NULL include chains chain_col meta.data column containing chains cell sep Separator used storing per-chain V(D)J data cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot V(D)J segment usage — plot_gene_usage","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot V(D)J segment usage — plot_gene_usage","text":"","code":"# Plot V(D)J segment usage for all cells plot_gene_usage(   vdj_sce,   data_cols = \"v_gene\" )   # Plot gene usage separately for cell clusters plot_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   cluster_col = \"orig.ident\" )   # Plot gene usage for a specific chain plot_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   chain = c(\"IGH\", \"IGK\") )   # Plot paired usage of V(D)J segments plot_gene_usage(   vdj_sce,   data_cols = c(\"v_gene\", \"j_gene\"),   type = \"circos\" ) #> Warning: Ignoring unknown parameters: `type`  # Specify colors to use for each cell cluster plot_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   cluster_col = \"orig.ident\",   plot_colors = c(avid_2 = \"blue\", avid_1 = \"green\") )   # Specify order to use for plotting cell clusters plot_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   cluster_col = \"orig.ident\",   plot_lvls = c(\"avid_2\", \"avid_1\") )   # Specify certain V(D)J genes to include in plot plot_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   vdj_genes = c(\"IGKV5-43\", \"IGLV1\", \"IGHV1-64\") ) #> Warning: Ignoring unknown parameters: `vdj_genes`   # Specify the number of top V(D)J genes to include in plot plot_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   genes = 10 )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_mds.html","id":null,"dir":"Reference","previous_headings":"","what":"Create MDS plot — plot_mds","title":"Create MDS plot — plot_mds","text":"Calculate MDS coordinates based beta diversity metric plot results.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_mds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create MDS plot — plot_mds","text":"","code":"plot_mds(   input,   data_col,   cluster_col,   method = \"jaccard\",   chain = NULL,   chain_col = global$chain_col,   plot_colors = NULL,   plot_lvls = names(plot_colors),   label_points = TRUE,   n_label = \"none\",   label_params = list(),   sep = global$sep,   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_mds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create MDS plot — plot_mds","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating pairwise similarity clusters, e.g. 'clonotype_id' cluster_col meta.data column containing cluster IDs use calculating overlap method Method use comparing clusters calculating MDS coordinates, available methods include: 'jaccard', Jaccard dissimilarity index implemented abdiv::jaccard() 'horn_morisita', Horn-Morisita index implemented abdiv::horn_morisita() chain Chain use comparing clusters. perform calculations using single chain, column passed data_col must contain per-chain data CDR3 sequences. Set NULL include chains. chain_col meta.data column containing chains cell plot_colors Character vector containing colors plotting plot_lvls Levels use ordering clusters label_points Label points plot n_label Location plot n label added, can combination following: 'corner', display total number points plotted top right corner, position label can modified passing x y specifications label_params argument 'none', display number points plotted label_params Named list providing additional parameters modify n label aesthetics, e.g. list(size = 4, color = \"red\") sep Separator used storing per-chain V(D)J data cell ... Additional arguments pass ggplot2::geom_point()","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_mds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create MDS plot — plot_mds","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_mds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create MDS plot — plot_mds","text":"","code":"# Calculate MDS coordinates plot_mds(   vdj_sce,   data_col = \"clonotype_id\",   cluster_col = \"isotype\" )   # Calculate MDS coordinates based on IGK CDR3 sequences plot_mds(   vdj_sce,   data_col    = \"cdr3\",   cluster_col = \"isotype\",   chain       = \"IGK\" )   # Calculate repertoire similarity using the Horn-Morisita index plot_mds(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"isotype\",   method      = \"horn_morisita\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot CDR3 sequence motifs — plot_motifs","title":"Plot CDR3 sequence motifs — plot_motifs","text":"Plot CDR3 sequence motifs","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot CDR3 sequence motifs — plot_motifs","text":"","code":"plot_motifs(   input,   data_col = global$cdr3_col,   cluster_col = NULL,   chain,   chain_col = global$chain_col,   width = 0.75,   align_end = \"5\",   quiet = FALSE,   sep = global$sep,   plot_colors = NULL,   plot_lvls = names(plot_colors),   panel_nrow = NULL,   panel_scales = \"free\",   n_label = \"corner\",   label_params = list(),   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_motifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot CDR3 sequence motifs — plot_motifs","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing sequences use plotting. cluster_col meta.data column containing cluster IDs use grouping cells. chain Chain use plotting sequences. Cells one provided chain excluded analysis. chain_col meta.data column containing chains cell. width Integer specifying many residues include, sequences longer width get trimmed based align_end argument, sequences shorter width get removed. fraction provided, width cutoff set based percent rank, .e. value 0.75 select width least 75% sequences longer cutoff. align_end End use aligning sequences, specify '5' '3' align sequences 5' 3' end plotting. quiet TRUE messages displayed sep Separator used storing per cell V(D)J data plot_colors Character vector containing colors plotting plot_lvls Character vector containing levels ordering panel_nrow number rows use arranging plot panels panel_scales scales plot panels fixed free. passes scales specification ggplot2::facet_wrap(), can 'fixed', 'free', 'free_x', 'free_y'. 'fixed' cause panels share scales. Use separate bar graphs created cell cluster. n_label Location plot n label added, can one following: 'corner', display total number cells plotted top right corner, position label can modified passing x y specifications label_params argument 'none', display number cells plotted label_params Named list providing additional parameters modify n label aesthetics, e.g. list(size = 4, color = \"red\") ... Additional parameters pass ggseqlogo::geom_logo()","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_motifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot CDR3 sequence motifs — plot_motifs","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_motifs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot CDR3 sequence motifs — plot_motifs","text":"","code":"# Cluster cells based on CDR3 amino acid sequences and plot sequence motifs res <- cluster_sequences(   vdj_sce,   data_col = \"cdr3\" )  plot_motifs(   res,   data_col    = \"cdr3\",   cluster_col = \"cdr3_cluster_0.5\",   chain       = \"IGK\" ) #> ℹ 1 sequences (1.7%) are shorter than `width` and were removed"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_numerical.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot numerical single-cell data — plot_numerical","title":"Plot numerical single-cell data — plot_numerical","text":"Visualize numerical single-cell data creating histogram, density plot, violin plots, boxplots. plotting V(D)J data, values can plotted separately chain summarized plotted cell.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_numerical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot numerical single-cell data — plot_numerical","text":"","code":"plot_histogram(   input,   data_col,   cluster_col = NULL,   group_col = NULL,   method = \"histogram\",   top = NULL,   other_label = \"other\",   units = \"frequency\",   plot_colors = NULL,   plot_lvls = NULL,   trans = \"identity\",   panel_nrow = NULL,   panel_scales = \"fixed\",   na_color = \"grey80\",   n_label = NULL,   label_params = list(),   ...,   per_chain = FALSE,   chain = NULL,   chain_col = global$chain_col,   summary_fn = mean,   sep = global$sep )  plot_violin(   input,   data_col,   cluster_col = NULL,   group_col = NULL,   method = \"violin\",   top = NULL,   other_label = \"other\",   plot_colors = NULL,   plot_lvls = NULL,   trans = \"identity\",   panel_nrow = NULL,   panel_scales = \"free_x\",   na_color = \"grey80\",   n_label = NULL,   label_params = list(),   ...,   per_chain = FALSE,   chain = NULL,   chain_col = global$chain_col,   summary_fn = mean,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_numerical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot numerical single-cell data — plot_numerical","text":"input Single cell object data.frame, data.frame provided, cell barcodes stored row names. data_col meta.data column containing data plot cluster_col meta.data column containing cluster IDs use grouping cells plotting group_col meta.data column use grouping clusters separate panels method Method use plotting, possible values include, 'histogram', 'density', 'boxplot', 'violin' top show top cell groups, provide one following, cells labeled using value provided other_label argument. NULL automatically set. Integer specifying number top groups show Vector specifying names cell groups show other_label Label use '' cells top specified, NULL cell groups shown. units Units use y-axis method 'histogram'. Use 'frequency' show number values 'percent' show percentage total values. plot_colors Character vector specifying colors use cell clusters specified cluster_col. cluster_col NULL, plot colors can directly modified ggplot2 parameters color fill, e.g. fill = \"red\", color = \"black\" plot_lvls Character vector containing order use plotting cell clusters specified cluster_col trans Transformation use plotting data, e.g. 'log10'. default values transformed, refer ggplot2::continuous_scale() options. panel_nrow number rows use arranging plot panels panel_scales scales plot panels fixed free. passes scales specification ggplot2::facet_wrap(), can 'fixed', 'free', 'free_x', 'free_y'. 'fixed' cause panels share scales. na_color Color use missing values. plotting V(D)J data, cells lacking data plotted NAs. n_label Location plot n label added, can combination following: 'corner', display total number cells plotted top right corner, position label can modified passing x y specifications label_params argument 'axis', display number cells plotted group shown x-axis 'legend', display number cells plotted group shown plot legend 'none', display number cells plotted label_params Named list providing additional parameters modify n label aesthetics, e.g. list(size = 4, color = \"red\") ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc. per_chain TRUE values plotted chain, .e. data point represents chain. FALSE values summarized cell using summary_fn plotting, .e. data point represents cell. chain Chain(s) use filtering data plotting. NULL data filtered based chain. chain_col meta.data column containing chains cell summary_fn Function use summarizing values per_chain FALSE, can either function, e.g. mean, purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE) .x refers column. NULL, mean calculated. sep Separator used storing per-chain V(D)J data cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_numerical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot numerical single-cell data — plot_numerical","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_numerical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot numerical single-cell data — plot_numerical","text":"","code":"# Create histogram plot_histogram(   vdj_sce,   data_col    = \"reads\",   cluster_col = \"orig.ident\",   trans       = \"log10\" ) #> Warning: Removed 133 rows containing missing values #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Create violin plots plot_violin(   vdj_sce,   data_col    = \"nFeature_RNA\",   cluster_col = \"orig.ident\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_rarefaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rarefaction curves — plot_rarefaction","title":"Plot rarefaction curves — plot_rarefaction","text":"method involves calculating species diversity different sized samples generated randomly downsampling cluster. default bootstrapped 95% confidence interval also plotted.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_rarefaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rarefaction curves — plot_rarefaction","text":"","code":"plot_rarefaction(   input,   data_col,   cluster_col = NULL,   method = \"richness\",   n_boots = 50,   chain = NULL,   chain_col = global$chain_col,   sep = global$sep,   plot_colors = NULL,   plot_lvls = names(plot_colors),   panel_nrow = NULL,   panel_scales = \"free\",   ci_alpha = 0.15,   n_label = \"legend\",   label_params = list(),   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_rarefaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rarefaction curves — plot_rarefaction","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating diversity cluster_col meta.data column containing cluster IDs use grouping cells calculating clonotype abundance method Method use calculating diversity, available methods include: 'richness', species richness, equivalent calculation performed abdiv::richness() 'shannon', exponential Shannon entropy 'invsimpson', inverse Simpson index, equivalent calculation performed abdiv::invsimpson() n_boots Number bootstrap replicates calculating standard error, n_boots 0 skipped. chain Chain use calculating diversity. calculate diversity single chain, column passed data_col argument must contain per-chain data CDR3 sequences. Set NULL include chains. chain_col meta.data column containing chains cell sep Separator used storing per-chain V(D)J data cell plot_colors Character vector containing colors plotting plot_lvls Character vector containing levels ordering panel_nrow number rows use arranging plot panels panel_scales scales plot panels fixed free. passes scales specification ggplot2::facet_wrap, can 'fixed', 'free', 'free_x', 'free_y'. 'fixed' cause panels share scales. ci_alpha Transparency use plotting 95% confidence interval n_label Location plot n label added, can combination following: 'corner', display total number cells plotted top right corner, position label can modified passing x y specifications label_params argument 'legend', display number cells plotted group shown plot legend 'none', display number cells plotted label_params Named list providing additional parameters modify n label aesthetics, e.g. list(size = 4, color = \"red\") ... Additional arguments pass ggplot2, e.g. color, fill, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_rarefaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot rarefaction curves — plot_rarefaction","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_rarefaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot rarefaction curves — plot_rarefaction","text":"","code":"# Plot rarefaction curve for each cluster plot_rarefaction(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   method      = \"shannon\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 2D scatter plot — plot_scatter","title":"Create 2D scatter plot — plot_scatter","text":"Create scatter plot cells colored based provided feature. can used create dimensional reduction plots (e.g. UMAP, tSNE, PCA) compare different cell attributes (e.g. CD4 vs CD8 expression). plotting V(D)J data, per-chain values summarized cell.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 2D scatter plot — plot_scatter","text":"","code":"plot_scatter(   input,   data_col = NULL,   x = \"UMAP_1\",   y = \"UMAP_2\",   group_col = NULL,   data_slot = \"data\",   top = NULL,   other_label = \"other\",   plot_colors = NULL,   plot_lvls = NULL,   outline = FALSE,   trans = \"identity\",   panel_nrow = NULL,   panel_scales = \"fixed\",   min_q = NULL,   max_q = NULL,   na_color = \"grey80\",   n_label = NULL,   label_params = list(),   ...,   chain = NULL,   chain_col = global$chain_col,   summary_fn = NULL,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create 2D scatter plot — plot_scatter","text":"input Single cell object data.frame, data.frame provided, cell barcodes stored row names. data_col Name meta.data column variable (e.g. gene name) use coloring points x, y Name meta.data column variable plot x y-axis group_col meta.data column use splitting plot panels data_slot Slot pull data input Seurat object top show top cell groups, provide one following, cells labeled using value provided other_label argument. NULL automatically set. Integer specifying number top groups show Vector specifying names cell groups show other_label Label use '' cells top specified, NULL cell groups shown. plot_colors Character vector specifying colors use cell clusters specified cluster_col. plot_lvls Character vector containing order use plotting cell clusters specified cluster_col. outline Add outline around cluster, outline aesthetics can modified passing arguments directly ggtrace::geom_point_trace() trans Transformation use plotting data, e.g. 'log10'. default values transformed, refer ggplot2::continuous_scale() options. panel_nrow number rows use arranging plot panels panel_scales scales plot panels fixed free. passes scales specification ggplot2::facet_wrap(), can 'fixed', 'free', 'free_x', 'free_y'. 'fixed' cause panels share scales. min_q Minimum quantile cutoff color scale. max_q Maximum quantile cutoff color scale. na_color Color use missing values. plotting V(D)J data, cells lacking data plotted NAs. n_label Location plot n label added, can combination following: 'corner', display total number cells plotted top right corner, position label can modified passing x y specifications label_params argument 'legend', display number cells plotted group shown plot legend 'none', display number cells plotted label_params Named list providing additional parameters modify n label aesthetics, e.g. list(size = 4, color = \"red\") ... Additional arguments pass ggplot2::geom_point(), ggtrace::geom_point_trace() outline = TRUE, e.g. color, size, etc. chain Chain(s) use filtering data plotting. NULL data filtered based chain. chain_col meta.data column containing chains cell summary_fn Function use summarizing per-chain values cell, can either function, e.g. mean, purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE) .x refers column. NULL, mean calculated numeric values, non-numeric columns combined single string. sep Separator used storing per-chain V(D)J data cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 2D scatter plot — plot_scatter","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 2D scatter plot — plot_scatter","text":"","code":"# Create scatter plot plot_scatter(   vdj_sce,   data_col = \"reads\",   x        = \"UMAP_1\",   y        = \"UMAP_2\",   trans    = \"log10\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot repertoire similarity — plot_similarity","title":"Plot repertoire similarity — plot_similarity","text":"Plot repertoire similarity","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot repertoire similarity — plot_similarity","text":"","code":"plot_similarity(   input,   data_col,   cluster_col,   group_col = NULL,   method = abdiv::jaccard,   chain = NULL,   chain_col = global$chain_col,   cluster_heatmap = TRUE,   sep = global$sep,   plot_colors = NULL,   plot_lvls = names(plot_colors),   rotate_labels = FALSE,   remove_upper_triangle = FALSE,   remove_diagonal = remove_upper_triangle,   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot repertoire similarity — plot_similarity","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating pairwise similarity clusters, e.g. 'clonotype_id' cluster_col meta.data column containing cluster IDs use calculating overlap group_col meta.data column use grouping cluster IDs present cluster_col. useful multiple replicates patients treatment condition. method Method use comparing clusters, possible values : function takes two numeric vectors containing counts clonotype object, beta diversity functions provided abdiv package. generate heatmap. 'count', count number clonotypes overlapping cluster, generate heatmap. 'circos', create circos plot summarizing overlap clusters chain Chain use comparing clusters. perform calculations using single chain, column passed data_col argument must contain per-chain data CDR3 sequences. Set NULL include chains. chain_col meta.data column containing chains cell cluster_heatmap FALSE, rows columns heatmap clustered. sep Separator used storing per-chain V(D)J data cell plot_colors Character vector containing colors plotting plot_lvls Levels use ordering clusters rotate_labels labels circos plot rotated reduce overlapping text remove_upper_triangle TRUE, upper triangle heatmap shown. remove_diagonal TRUE, diagonal heatmap shown. ... Additional arguments pass plotting function, ComplexHeatmap::Heatmap() heatmap, circlize::chordDiagram() circos plot","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot repertoire similarity — plot_similarity","text":"heatmap circos plot","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot repertoire similarity — plot_similarity","text":"","code":"# Plot repertoire overlap # use clonotype IDs present in 'clonotype_id' column for calculations plot_similarity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\" )   # Specify method to use for calculating repertoire overlap plot_similarity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   method      = abdiv::morisita )   # Specify colors to use for heatmap plot_similarity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   plot_color  = c(\"white\", \"red\") )   # Create circos plot plot_similarity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   method      = \"circos\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/splen_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta data for downsampled splenocyte data — splen_meta","title":"Meta data for downsampled splenocyte data — splen_meta","text":"Meta data downsampled splenocyte data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/splen_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta data for downsampled splenocyte data — splen_meta","text":"","code":"splen_meta"},{"path":"https://rnabioco.github.io/djvdj/reference/splen_meta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Meta data for downsampled splenocyte data — splen_meta","text":"data.frame containing meta data 500 cells","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/splen_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Meta data for downsampled splenocyte data — splen_meta","text":"Meta data downsampled splenocyte data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize V(D)J data for each cell — summarize_vdj","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"Summarize per-chain values cell using function purrr-style lambda. useful plotting filtering cells based V(D)J meta.data.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"","code":"summarize_vdj(   input,   data_cols,   fn = NULL,   ...,   chain = NULL,   chain_col = global$chain_col,   col_names = \"{.col}\",   return_df = FALSE,   sep = global$sep )"},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_cols meta.data column(s) containing V(D)J data summarize cell fn Function apply selected column, possible values can either function, e.g. mean, purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE). NULL, mean calculated numeric values, non-numeric columns combined single string. ... Additional arguments pass fn chain Chain use summarizing V(D)J data chain_col meta.data column(s) containing chains cell col_names glue specification describes name output columns, use {.col} refer original column name. col_names NULL, original column names used. return_df Return results data.frame. FALSE, results added input object. sep Separator used storing per cell V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"Object containing V(D)J data summarized cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"","code":"# Summarize numeric columns # by default the mean will be calculated for numeric columns res <- summarize_vdj(   vdj_sce,   data_cols = c(\"all_del\", \"all_ins\") )  head(slot(res, \"colData\"), 3) #> DataFrame with 3 rows and 49 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #> 1_AATCCAGCATTACGAC-1      avid_1          6            4               0 #> 1_ACAGCTAGTCTGGTCG-1      avid_1         15            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0 -5.977054 -2.418108           NA #> 1_AATCCAGCATTACGAC-1               0  1.282983 -0.700069           NA #> 1_ACAGCTAGTCTGGTCG-1               0 -0.537163  0.133260           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #> 1_AATCCAGCATTACGAC-1                    NA          NA        NA #> 1_ACAGCTAGTCTGGTCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA             NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA        NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            c_del       c_mis   all_ins   all_del #>                      <character> <character> <numeric> <numeric> #> 1_AAGCCGCAGCTTATCG-1          NA          NA        NA        NA #> 1_AATCCAGCATTACGAC-1          NA          NA        NA        NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA        NA        NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq #>                      <character>  <character> #> 1_AAGCCGCAGCTTATCG-1          NA           NA #> 1_AATCCAGCATTACGAC-1          NA           NA #> 1_ACAGCTAGTCTGGTCG-1          NA           NA  # Specifying a different summary function # this calculates the median number of insertions and deletions for each # cell res <- summarize_vdj(   vdj_sce,   data_cols = c(\"all_del\", \"all_ins\"),   fn = stats::median )  head(slot(res, \"colData\"), 3) #> DataFrame with 3 rows and 49 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #> 1_AATCCAGCATTACGAC-1      avid_1          6            4               0 #> 1_ACAGCTAGTCTGGTCG-1      avid_1         15            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0 -5.977054 -2.418108           NA #> 1_AATCCAGCATTACGAC-1               0  1.282983 -0.700069           NA #> 1_ACAGCTAGTCTGGTCG-1               0 -0.537163  0.133260           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #> 1_AATCCAGCATTACGAC-1                    NA          NA        NA #> 1_ACAGCTAGTCTGGTCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA             NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA        NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            c_del       c_mis   all_ins   all_del #>                      <character> <character> <numeric> <numeric> #> 1_AAGCCGCAGCTTATCG-1          NA          NA        NA        NA #> 1_AATCCAGCATTACGAC-1          NA          NA        NA        NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA        NA        NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq #>                      <character>  <character> #> 1_AAGCCGCAGCTTATCG-1          NA           NA #> 1_AATCCAGCATTACGAC-1          NA           NA #> 1_ACAGCTAGTCTGGTCG-1          NA           NA  # Summarize values for a specific chain res <- summarize_vdj(   vdj_sce,   data_cols = c(\"all_del\", \"all_ins\"),   chain = \"IGK\" )  head(slot(res, \"colData\"), 3) #> DataFrame with 3 rows and 49 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #> 1_AATCCAGCATTACGAC-1      avid_1          6            4               0 #> 1_ACAGCTAGTCTGGTCG-1      avid_1         15            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0 -5.977054 -2.418108           NA #> 1_AATCCAGCATTACGAC-1               0  1.282983 -0.700069           NA #> 1_ACAGCTAGTCTGGTCG-1               0 -0.537163  0.133260           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #> 1_AATCCAGCATTACGAC-1                    NA          NA        NA #> 1_ACAGCTAGTCTGGTCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA             NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA        NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            c_del       c_mis   all_ins   all_del #>                      <character> <character> <numeric> <numeric> #> 1_AAGCCGCAGCTTATCG-1          NA          NA        NA        NA #> 1_AATCCAGCATTACGAC-1          NA          NA        NA        NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA        NA        NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq #>                      <character>  <character> #> 1_AAGCCGCAGCTTATCG-1          NA           NA #> 1_AATCCAGCATTACGAC-1          NA           NA #> 1_ACAGCTAGTCTGGTCG-1          NA           NA  # Specifying new names for summarized columns # use {.col} to refer to the original column name res <- summarize_vdj(   vdj_sce,   data_cols = c(\"all_del\", \"all_ins\"),   fn = stats::median,   col_names = \"median_{.col}\" )  head(slot(res, \"colData\"), 1) #> DataFrame with 1 row and 51 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0  -5.97705  -2.41811           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq median_all_del #>                      <character>  <character>      <numeric> #> 1_AAGCCGCAGCTTATCG-1          NA           NA             NA #>                      median_all_ins #>                           <numeric> #> 1_AAGCCGCAGCTTATCG-1             NA  # Return a data.frame instead of adding the results to the input object res <- summarize_vdj(   vdj_sce,   data_cols = c(\"all_del\", \"all_ins\"),   return_df = TRUE )  head(res, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAGCCGCAGCTTATCG-1     avid_1          0            0               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #> 1_AAGCCGCAGCTTATCG-1               0 -5.977054 -2.418108         <NA> #>                      exact_subclonotype_id chains n_chains cdr3 cdr3_nt #> 1_AAGCCGCAGCTTATCG-1                    NA   <NA>       NA <NA>    <NA> #>                      cdr3_length cdr3_nt_length v_gene d_gene j_gene #> 1_AAGCCGCAGCTTATCG-1        <NA>           <NA>   <NA>   <NA>   <NA> #>                      c_gene isotype reads umis productive full_length #> 1_AAGCCGCAGCTTATCG-1   <NA>    <NA>  <NA> <NA>       <NA>        <NA> #>                      paired v_ins v_del v_mis d_ins d_del d_mis j_ins #> 1_AAGCCGCAGCTTATCG-1     NA  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> #>                      j_del j_mis c_ins c_del c_mis all_ins all_del #> 1_AAGCCGCAGCTTATCG-1  <NA>  <NA>  <NA>  <NA>  <NA>      NA      NA #>                      all_mis vd_ins vd_del dj_ins dj_del v_mis_freq #> 1_AAGCCGCAGCTTATCG-1    <NA>   <NA>   <NA>   <NA>   <NA>       <NA> #>                      d_mis_freq j_mis_freq c_mis_freq all_mis_freq #> 1_AAGCCGCAGCTTATCG-1       <NA>       <NA>       <NA>         <NA>  # Using a lambda function to summarize values # use '.x' to refer to values in the column # this creates a new column showing the unique chains for each cell res <- summarize_vdj(   vdj_sce,   data_cols = \"chains\",   fn = ~ paste0(unique(.x), collapse = \"_\"),   col_names = \"unique_chains\" )  head(slot(res, \"colData\"), 3) #> DataFrame with 3 rows and 50 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #> 1_AATCCAGCATTACGAC-1      avid_1          6            4               0 #> 1_ACAGCTAGTCTGGTCG-1      avid_1         15            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0 -5.977054 -2.418108           NA #> 1_AATCCAGCATTACGAC-1               0  1.282983 -0.700069           NA #> 1_ACAGCTAGTCTGGTCG-1               0 -0.537163  0.133260           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #> 1_AATCCAGCATTACGAC-1                    NA          NA        NA #> 1_ACAGCTAGTCTGGTCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA             NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA        NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq unique_chains #>                      <character>  <character>   <character> #> 1_AAGCCGCAGCTTATCG-1          NA           NA            NA #> 1_AATCCAGCATTACGAC-1          NA           NA            NA #> 1_ACAGCTAGTCTGGTCG-1          NA           NA            NA  # Creating an index column to use for filtering/plotting # this creates a column indicating which cells have no insertions # the V(D)J data can be filtered based on this new column res <- summarize_vdj(   vdj_sce,   data_cols = \"all_ins\",   fn = ~ all(.x == 0),   col_names = \"no_insertions\" )  res <- filter_vdj(   res,   filt = no_insertions )  head(slot(res, \"colData\"), 3) #> DataFrame with 3 rows and 50 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAGCCGCAGCTTATCG-1      avid_1          0            0               0 #> 1_AATCCAGCATTACGAC-1      avid_1          6            4               0 #> 1_ACAGCTAGTCTGGTCG-1      avid_1         15            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAGCCGCAGCTTATCG-1               0 -5.977054 -2.418108           NA #> 1_AATCCAGCATTACGAC-1               0  1.282983 -0.700069           NA #> 1_ACAGCTAGTCTGGTCG-1               0 -0.537163  0.133260           NA #>                      exact_subclonotype_id      chains  n_chains #>                                  <numeric> <character> <integer> #> 1_AAGCCGCAGCTTATCG-1                    NA          NA        NA #> 1_AATCCAGCATTACGAC-1                    NA          NA        NA #> 1_ACAGCTAGTCTGGTCG-1                    NA          NA        NA #>                             cdr3     cdr3_nt cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA             NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA             NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA             NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                      full_length    paired       v_ins       v_del #>                      <character> <logical> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA        NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA        NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA        NA          NA          NA #>                            v_mis       d_ins       d_del       d_mis #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            j_ins       j_del       j_mis       c_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                            c_del       c_mis     all_ins     all_del #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                          all_mis      vd_ins      vd_del      dj_ins #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                           dj_del  v_mis_freq  d_mis_freq  j_mis_freq #>                      <character> <character> <character> <character> #> 1_AAGCCGCAGCTTATCG-1          NA          NA          NA          NA #> 1_AATCCAGCATTACGAC-1          NA          NA          NA          NA #> 1_ACAGCTAGTCTGGTCG-1          NA          NA          NA          NA #>                       c_mis_freq all_mis_freq no_insertions #>                      <character>  <character>     <logical> #> 1_AAGCCGCAGCTTATCG-1          NA           NA            NA #> 1_AATCCAGCATTACGAC-1          NA           NA            NA #> 1_ACAGCTAGTCTGGTCG-1          NA           NA            NA"},{"path":"https://rnabioco.github.io/djvdj/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data |>     group_by(...) |>     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data |>     group_by(!!!dots) |>     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars |> summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data |>     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data |>     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://rnabioco.github.io/djvdj/reference/tidyeval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy eval helpers — tidyeval","text":"Nothing","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"A tiny SingleCellExperiment object — tiny_sce","title":"A tiny SingleCellExperiment object — tiny_sce","text":"tiny SingleCellExperiment object","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tiny SingleCellExperiment object — tiny_sce","text":"","code":"tiny_sce"},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_sce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A tiny SingleCellExperiment object — tiny_sce","text":"SingleCellExperiment object 200 features, 200 cells, 1 assay","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_sce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A tiny SingleCellExperiment object — tiny_sce","text":"tiny SingleCellExperiment object","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","title":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","text":"tiny SingleCellExperiment object V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","text":"","code":"vdj_sce"},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_sce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","text":"SingleCellExperiment object 200 features, 200 cells, 1 assay","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_sce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","text":"tiny SingleCellExperiment object V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/news/index.html","id":"djvdj-010","dir":"Changelog","previous_headings":"","what":"djvdj 0.1.0","title":"djvdj 0.1.0","text":"Initial release","code":""}]
