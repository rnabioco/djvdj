[{"path":"https://rnabioco.github.io/djvdj/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Ryan M. Sheridan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rnabioco.github.io/djvdj/articles/abundance.html","id":"calculating-clonal-abundance","dir":"Articles","previous_headings":"","what":"Calculating clonal abundance","title":"Clonal Abundance","text":"quantify clonotype abundance store results object meta.data, calc_frequency() function can used. add columns showing number occurrences clonotype (‘freq’), percentage cells sharing clonotype (‘pct’), label can used plotting (‘grp’). default calculations performed cells object. calculate clonotype abundance separately samples clusters, cluster_col argument can used. just specify name column containing sample cluster IDs cell. cluster_col specified, additional meta.data column (‘shared’) added indicating whether clonotype shared multiple clusters.","code":"so_vdj <- so %>%   calc_frequency(data_col = \"clonotype_id\") so_vdj <- so %>%   calc_frequency(     data_col = \"clonotype_id\",     cluster_col = \"sample\"   ) so_vdj@meta.data %>%   head(2) #>                        orig.ident nCount_RNA nFeature_RNA RNA_snn_res.1 #> BL6_AAACCTGAGACCTTTG-1        BL6        273          208             0 #> BL6_AAACCTGAGGAATCGC-1        BL6        243          199            12 #>                        seurat_clusters cell_type sample #> BL6_AAACCTGAGACCTTTG-1               0   B cells  BL6-1 #> BL6_AAACCTGAGGAATCGC-1              12   B cells  BL6-1 #>                        exact_subclonotype_id  chains n_chains #> BL6_AAACCTGAGACCTTTG-1                     1 IGH;IGK        2 #> BL6_AAACCTGAGGAATCGC-1                     1     IGL        1 #>                                          cdr3 #> BL6_AAACCTGAGACCTTTG-1 CARHPAMDYW;CWQGTHFPRTF #> BL6_AAACCTGAGGAATCGC-1            CALWYSTHYVF #>                                                                                 cdr3_nt #> BL6_AAACCTGAGACCTTTG-1 TGTGCCAGACATCCCGCTATGGACTACTGG;TGCTGGCAAGGTACACATTTTCCTCGGACGTTC #> BL6_AAACCTGAGGAATCGC-1                                TGTGCTCTATGGTACAGCACCCATTATGTTTTC #>                        cdr3_length cdr3_nt_length            v_gene #> BL6_AAACCTGAGACCTTTG-1       10;11          30;33 IGHV2-6;IGKV1-135 #> BL6_AAACCTGAGGAATCGC-1          11             33             IGLV2 #>                           d_gene      j_gene    c_gene isotype  reads #> BL6_AAACCTGAGACCTTTG-1 None;None IGHJ4;IGKJ1 IGHM;IGKC    IGHM 60;376 #> BL6_AAACCTGAGGAATCGC-1      None       IGLJ2     IGLC2    None    360 #>                        umis productive full_length paired  clonotype_id #> BL6_AAACCTGAGACCTTTG-1 6;22  TRUE;TRUE   TRUE;TRUE   TRUE clonotype5467 #> BL6_AAACCTGAGGAATCGC-1   13       TRUE        TRUE  FALSE clonotype5730 #>                        clonotype_id_freq clonotype_id_pct #> BL6_AAACCTGAGACCTTTG-1                 1        0.1620746 #> BL6_AAACCTGAGGAATCGC-1                 5        0.8103728 #>                        clonotype_id_shared clonotype_id_grp #> BL6_AAACCTGAGACCTTTG-1               FALSE                1 #> BL6_AAACCTGAGGAATCGC-1                TRUE              2-6"},{"path":"https://rnabioco.github.io/djvdj/articles/abundance.html","id":"plotting-clonal-abundance","dir":"Articles","previous_headings":"","what":"Plotting clonal abundance","title":"Clonal Abundance","text":"djvdj includes plot_clonal_abundance() function visualize differences clonotype frequency samples clusters. default produce bargraphs. Plot colors can adjusted using plot_colors argument.  Abundance values can calculated plotted separately sample cluster using cluster_col argument. panel_nrow panel_scales arguments can used add separate scales sample adjust number rows used arrange plots. expected see MD4 B cells share clonotype, BL6 cells diverse repertoire.  Rank-abundance plots can also generated setting method argument ‘line’. djvdj plotting functions return ggplot objects can modified ggplot2 functions. log10-transform y-axis using ggplot2::scale_y_log10() function.","code":"so %>%   plot_clonal_abundance(     clonotype_col = \"clonotype_id\",     plot_colors = \"#3182bd\"   ) so %>%   plot_clonal_abundance(     clonotype_col = \"clonotype_id\",     cluster_col   = \"orig.ident\",     panel_scales  = \"free\"   ) so %>%   plot_clonal_abundance(     clonotype_col = \"clonotype_id\",     cluster_col   = \"orig.ident\",     method        = \"line\",     plot_colors   = c(MD4 = \"#fec44f\", BL6 = \"#3182bd\")   ) +   scale_y_log10()"},{"path":"https://rnabioco.github.io/djvdj/articles/abundance.html","id":"umap-projections","dir":"Articles","previous_headings":"","what":"UMAP projections","title":"Clonal Abundance","text":"default calc_frequency() divide clonotypes groups based abundance add column meta.data containing group labels. Clonotype abundance can summarized UMAP projection plotting added ‘grp’ column using generic plotting function plot_features()  Highly abundant clonotypes can also specifically labeled UMAP projection. , add new meta.data column desired label using mutate_vdj() function. function works similar manner dplyr::mutate(), specifically modify object meta.data allows user parse per-chain information cell.","code":"# Create UMAP summarizing samples mouse_gg <- so %>%   plot_features(     feature = \"orig.ident\",     size = 0.25   )  # Create UMAP summarizing clonotype abundance abun_gg <- so %>%   calc_frequency(     data_col = \"clonotype_id\",     cluster_col = \"sample\"   ) %>%   plot_features(     feature = \"clonotype_id_grp\",     size = 0.25   )  mouse_gg + abun_gg top_gg <- so %>%   mutate_vdj(     top_clonotype = ifelse(clonotype_id == \"clonotype907\", clonotype_id, \"other\")   ) %>%   plot_features(     feature     = \"top_clonotype\",     size        = 0.25,     plot_colors = c(other = \"#fec44f\", clonotype907 = \"#3182bd\")   )  mouse_gg + top_gg"},{"path":"https://rnabioco.github.io/djvdj/articles/abundance.html","id":"other-frequency-calculations","dir":"Articles","previous_headings":"","what":"Other frequency calculations","title":"Clonal Abundance","text":"addition clonotype abundance, calc_frequency() can used summarize frequency cell label present object. example count number cells present cell type sample. plot fraction cells present cell type, can use generic plotting function, plot_frequency(). create stacked bargraphs summarizing cell label present data_col column. color group can specified plot_colors argument.  summarize number cells present cell type, set units argument ‘frequency’.  Frequency plots can also separated based additional grouping variable treatment group (e.g. placebo vs drug) disease status (e.g. healthy vs disease). generate boxplots point representing label present cluster_col column. example 5 BL6 5 MD4 samples, 5 points shown boxplot.","code":"so_vdj <- so %>%   calc_frequency(     data_col = \"cell_type\",     cluster_col = \"sample\"   ) so %>%   plot_frequency(     data_col    = \"cell_type\",     cluster_col = \"sample\",     plot_colors = c(\"#3182bd\", \"#fec44f\", \"#31a354\")   ) so %>%   plot_frequency(     data_col    = \"cell_type\",     cluster_col = \"sample\",     units       = \"frequency\",     stack       = FALSE   ) so %>%   plot_frequency(     data_col    = \"cell_type\",     cluster_col = \"sample\",     group_col   = \"orig.ident\",     plot_colors = c(MD4 = \"#fec44f\", BL6 = \"#3182bd\")   )"},{"path":"https://rnabioco.github.io/djvdj/articles/clustering.html","id":"clustering-sequences","dir":"Articles","previous_headings":"","what":"Clustering sequences","title":"CDR3 Clustering","text":"cluster_sequences() function can used cluster cells based CDR3 sequences, sequences present object. Provide meta.data column containing sequences data_col argument. default cell multiple chains, sequences concatenated. default, distances calculated amino acid sequences using BLOSUM62 substitution matrix, based observed amino acid frequencies substitution probabilities. calculated distances used cluster cells using either Louvain Leiden clustering algorithms. coarseness clusters adjusted using resolution argument smaller values returning fewer clusters. example clustering cells based CDR3 amino acid sequence. Use chain argument cluster using sequences specific chain. default Uniform Manifold Approximation Projection (UMAP) dimensional reduction method performed UMAP coordinates added object. skip step, set run_umap argument FALSE. return clustering results multiple resolutions, vector can provided resolution argument.","code":"so_vdj <- so %>%   cluster_sequences(     data_col    = \"cdr3\",     method      = \"louvain\",   # clustering method     dist_method = \"BLOSUM62\",  # method for calculating sequence distances     resolution  = 0.5   ) so_vdj <- so %>%   cluster_sequences(     data_col = \"cdr3\",     chain    = \"IGK\"   ) so_vdj <- so %>%   cluster_sequences(     data_col = \"cdr3\",     chain    = \"IGK\",     run_umap = FALSE   ) set.seed(42)  so_vdj <- so %>%   cluster_sequences(     data_col   = \"cdr3\",     chain      = \"IGK\",     resolution = c(0.4, 0.8, 1.6)   )"},{"path":"https://rnabioco.github.io/djvdj/articles/clustering.html","id":"plotting-clusters","dir":"Articles","previous_headings":"","what":"Plotting clusters","title":"CDR3 Clustering","text":"Clustering results can visualized UMAP projection using generic plotting function plot_features(). Colors can adjusted using plot_colors argument. function often generate warning saying rows missing values removed, expected since cells V(D)J data.  visualize proportion BL6 MD4 cells cluster can create stacked bargraph using plot_frequency() function. MD4 cells monoclonal expected cells found almost exclusively single cluster.","code":"clrs <- setNames(brewer.pal(11, \"Paired\"), 1:11)  so_vdj %>%   plot_features(     x = \"cdr3_UMAP_1\",     y = \"cdr3_UMAP_2\",     feature = \"cdr3_cluster_0.4\",     plot_colors = clrs   ) so_vdj %>%   plot_frequency(     data_col    = \"cdr3_cluster_0.4\",     cluster_col = \"sample\",     plot_colors = clrs   ) so_vdj %>%   plot_vdj(     data_col    = \"cdr3_length\",     cluster_col = \"cdr3_cluster_0.4\"   ) +   facet_wrap(~ cdr3_cluster_0.4, scales = \"free_y\") so_vdj %>%   plot_vdj_feature(     data_col = \"cdr3_length\",     chain    = \"IGK\"   )  so_vdj %>%   plot_vdj_feature(     data_col = \"cdr3_cluster_0.4\",     chain    = \"IGK\"   )"},{"path":"https://rnabioco.github.io/djvdj/articles/clustering.html","id":"cdr3-motifs","dir":"Articles","previous_headings":"","what":"CDR3 motifs","title":"CDR3 Clustering","text":"Using plot_motifs() function can generate sequence motifs cluster. just need provide data_col chain used clustering. create separate motif cluster, also need provide column containing cluster IDs cluster_col argument. expected see cells within MD4 cluster exact IGK CDR3 sequence.  default, sequences aligned 5’ end trimmed based width parameter. Sequences can aligned 3’ end using align_end parameter. Sequences longer width cutoff trimmed, sequences shorter width cutoff removed. default width cutoff automatically selected cluster include least 75% sequences. example generate motifs last 11 amino acids CDR3.  Plot colors can modified using plot_colors argument number rows used arrange panels can adjusted panel_nrow argument. Like djvdj plotting functions, plot_motifs() return ggplot2 object can modified ggplot2 functions.","code":"so_vdj %>%   plot_motifs(     data_col    = \"cdr3\",     cluster_col = \"cdr3_cluster_0.4\",     chain       = \"IGK\"   ) so_vdj %>%   plot_motifs(     data_col    = \"cdr3\",     cluster_col = \"cdr3_cluster_0.4\",     chain       = \"IGK\",     align_end   = \"3\",     width       = 11   ) so_vdj %>%   plot_motifs(     data_col    = \"cdr3\",     cluster_col = \"cdr3_cluster_0.4\",     chain       = \"IGK\",     plot_colors = brewer.pal(5, \"Set1\"),     panel_nrow  = 4   ) +   theme(     axis.text.x  = element_blank(),     axis.ticks.x = element_blank()   )"},{"path":"https://rnabioco.github.io/djvdj/articles/diversity.html","id":"calculating-diversity","dir":"Articles","previous_headings":"","what":"Calculating diversity","title":"Repertoire Diversity","text":"calculate repertoire diversity store results object meta.data, calc_diversity() function can used. function designed specifically work R package abdiv. diversity metric can selected passing name function method argument. alpha diversity function abdiv package takes species counts input can used. sure read documentation function using ensure appropriate analysis. example calculating Shannon entropy BL6 MD4 samples. Estimations species diversity influenced sample size. One approach deal equalize number cells present cluster. downsample argument randomly sample cells sample tested number cells smallest cluster. bootstrapped standard error can also calculated setting number bootstrap samples n_boots argument. Diversity metrics can also calculated specific chain. , column passed data_col argument must contain per-chain data, CDR3 amino acid nucleotide sequences. example diversity calculated based heavy chain CDR3 sequences.","code":"so_vdj <- so %>%   calc_diversity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = abdiv::shannon   ) so_vdj <- so %>%   calc_diversity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     downsample  = TRUE,     n_boots     = 50   ) so_vdj <- so %>%   calc_diversity(     data_col    = \"cdr3_nt\",     cluster_col = \"sample\",     chain       = \"IGH\"   )"},{"path":"https://rnabioco.github.io/djvdj/articles/diversity.html","id":"plotting-diversity","dir":"Articles","previous_headings":"","what":"Plotting diversity","title":"Repertoire Diversity","text":"plot_diversity() function create plots summarizing repertoire diversity sample. named list functions can also passed plot multiple metrics. Two metrics measuring diversity Simpson index Shannon entropy. metrics influenced species richness (number unique sequences) evenness (relative abundance sequences). Pielou’s index specifically measure species evenness. metrics, maximally diverse samples return value 1. expected, BL6 B cells diverse repertoire, MD4 cells restricted repertoire.  Diversity plots can also separated based additional grouping variable treatment group (e.g. pacebo vs drug) disease status (e.g. healthy vs disease). generate boxplots point representing label present cluster_col column. example 5 BL6 5 MD4 samples, 5 points shown boxplot.  Additional arguments provided adjust plot aesthetics. plot_colors parameter can used modify colors, panel_nrow panel_scales arguments adjust plot scales number rows used arrange plots.  plot_diversity() returns ggplot object can modified ggplot2 functions ggplot2::theme(). Plots can adjusted passing aesthetic parameters directly ggplot2, e.g. alpha, linetype, color, etc.","code":"div_fns <- list(   \"simpson\" = abdiv::simpson,   \"shannon\" = abdiv::simpson,   \"pielou evenness\" = abdiv::pielou_e )  so %>%   plot_diversity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = div_fns   ) so %>%   plot_diversity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     group_col   = \"orig.ident\",     method      = div_fns   ) so %>%   plot_diversity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     group_col   = \"orig.ident\",     method      = div_fns,     plot_colors = c(BL6 = \"#3182bd\", MD4 = \"#fec44f\"),     panel_nrow  = 2   ) so %>%   plot_diversity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = div_fns,          alpha    = 0.5,         # parameters to pass to ggplot2     linetype = 2,     color    = \"black\"       ) +   theme(strip.text = element_text(face = \"bold\"))"},{"path":"https://rnabioco.github.io/djvdj/articles/diversity.html","id":"rarefaction-curves","dir":"Articles","previous_headings":"","what":"Rarefaction curves","title":"Repertoire Diversity","text":"Another approach prevent differences sample size undue influence diversity calculations use rarefaction curves. method involves calculating species diversity different sized samples generated randomly downsampling cluster. default bootstrapped 95% confidence interval also plotted. Calculations used generate rarefaction curves performed using iNEXT package. three diversity calculations can specified method argument: ‘richness’, species richness, equivalent calculation performed abdiv::richness() ‘shannon’, exponential Shannon entropy ‘invsimpson’, inverse Simpson index, equivalent calculation performed abdiv::invsimpson()  95% confidence interval desired, set n_boots 0. example also plot separate line BL6 MD4 sample.","code":"so %>%   plot_rarefaction(     data_col    = \"clonotype_id\",     cluster_col = \"orig.ident\",     method      = c(\"richness\", \"shannon\", \"invsimpson\"),     plot_colors = c(\"#3182bd\", \"#fec44f\")   ) so %>%   plot_rarefaction(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = c(\"richness\", \"shannon\", \"invsimpson\"),     n_boots     = 0   )"},{"path":"https://rnabioco.github.io/djvdj/articles/gene-usage.html","id":"calculating-gene-usage","dir":"Articles","previous_headings":"","what":"Calculating gene usage","title":"Gene Usage","text":"calc_gene_usage() function calculate number cells (‘freq’) percentage cells (‘pct’) gene data_cols column(s). ‘n_cells’ column shows total number cells used calculating percentages. data.frame returned summarizing results. perform gene usage calculations separately cell clusters (samples), provide meta.data column containing cluster labels cluster_col argument. see MD4 samples almost exclusively use single V segment (IGKV5-43), expected since MD4 B cells monoclonal. perform calculations specific chain, use chain argument. example returning results IGK chain. see values ‘v_gene’ column labeled ‘None’, shows number cells V gene segment identified. two columns provided data_cols argument, number cells containing combination genes returned.","code":"so %>%   calc_gene_usage(data_cols = \"v_gene\") #> # A tibble: 179 × 4 #>    v_gene     n_cells  freq   pct #>    <chr>        <int> <int> <dbl> #>  1 IGKV5-43      5989  2717 45.4  #>  2 IGKV10-96     5989   199  3.32 #>  3 IGKV1-135     5989   181  3.02 #>  4 IGKV6-17      5989   152  2.54 #>  5 IGLV1         5989   149  2.49 #>  6 IGKV1-117     5989   117  1.95 #>  7 IGKV6-23      5989   108  1.80 #>  8 IGKV1-110     5989   106  1.77 #>  9 IGKV19-93     5989    97  1.62 #> 10 IGKV14-111    5989    94  1.57 #> # … with 169 more rows so %>%   calc_gene_usage(     data_cols = \"v_gene\",     cluster_col = \"sample\"   ) #> # A tibble: 1,790 × 5 #>    v_gene    sample n_cells  freq   pct #>    <chr>     <chr>    <dbl> <int> <dbl> #>  1 IGKV5-43  MD4-5      553   531 96.0  #>  2 IGKV5-43  MD4-2      569   545 95.8  #>  3 IGKV5-43  MD4-4      590   565 95.8  #>  4 IGKV5-43  MD4-1      530   501 94.5  #>  5 IGKV5-43  MD4-3      551   520 94.4  #>  6 IGKV10-96 BL6-1      617    43  6.97 #>  7 IGKV10-96 BL6-5      632    42  6.65 #>  8 IGKV10-96 BL6-3      654    42  6.42 #>  9 IGKV6-17  BL6-3      654    41  6.27 #> 10 IGKV10-96 BL6-4      661    41  6.20 #> # … with 1,780 more rows so %>%   calc_gene_usage(     data_cols   = \"v_gene\",     cluster_col = \"sample\",     chain       = \"IGK\"   ) #> # A tibble: 890 × 5 #>    v_gene    sample n_cells  freq   pct #>    <chr>     <chr>    <dbl> <int> <dbl> #>  1 IGKV5-43  MD4-5      553   531 96.0  #>  2 IGKV5-43  MD4-2      569   545 95.8  #>  3 IGKV5-43  MD4-4      590   565 95.8  #>  4 IGKV5-43  MD4-1      530   501 94.5  #>  5 IGKV5-43  MD4-3      551   520 94.4  #>  6 None      BL6-1      617    46  7.46 #>  7 None      BL6-5      632    46  7.28 #>  8 IGKV10-96 BL6-1      617    43  6.97 #>  9 IGKV10-96 BL6-5      632    42  6.65 #> 10 None      BL6-3      654    43  6.57 #> # … with 880 more rows so %>%   calc_gene_usage(     data_cols = c(\"v_gene\", \"j_gene\"),     cluster_col = \"sample\"   ) #> # A tibble: 5,680 × 6 #>    v_gene    j_gene sample n_cells  freq   pct #>    <chr>     <chr>  <chr>    <dbl> <int> <dbl> #>  1 IGKV5-43  IGKJ2  MD4-5      553   531 96.0  #>  2 IGKV5-43  IGKJ2  MD4-2      569   545 95.8  #>  3 IGKV5-43  IGKJ2  MD4-4      590   564 95.6  #>  4 IGKV5-43  IGKJ2  MD4-1      530   501 94.5  #>  5 IGKV5-43  IGKJ2  MD4-3      551   520 94.4  #>  6 IGKV10-96 IGKJ1  BL6-1      617    31  5.02 #>  7 IGLV1     IGLJ1  BL6-1      617    31  5.02 #>  8 IGLV1     IGLJ1  BL6-5      632    31  4.91 #>  9 IGLV1     IGLJ1  BL6-3      654    31  4.74 #> 10 IGKV10-96 IGKJ1  BL6-3      654    29  4.43 #> # … with 5,670 more rows"},{"path":"https://rnabioco.github.io/djvdj/articles/gene-usage.html","id":"plotting-gene-usage","dir":"Articles","previous_headings":"","what":"Plotting gene usage","title":"Gene Usage","text":"plot_gene_usage() function summarize frequency gene segment. default single column passed data_cols argument, bargraph returned. number top genes include plot can specified n_genes argument. Alternatively, vector gene names can passed vdj_genes argument plot set desired genes.  default, percentages shown y-axis, instead plot frequency, set units argument ‘frequency’.  two columns passed data_cols argument, heatmap generated summarizing usage segment pairs. column provided cluster_col argument, separate heatmap generated cluster.  Plot colors can adjusted using plot_colors argument. addition, plot_gene_usage() returns ggplot object can modified ggplot2 functions ggplot2::theme(). Plots can adjusted passing aesthetic parameters directly ggplot2, e.g. alpha, linetype, color, etc.","code":"so %>%   plot_gene_usage(     data_cols   = \"v_gene\",     cluster_col = \"orig.ident\",     n_genes     = 20   ) so %>%   plot_gene_usage(     data_cols   = \"v_gene\",     cluster_col = \"orig.ident\",     units       = \"frequency\"   ) so %>%   plot_gene_usage(     data_cols   = c(\"v_gene\", \"j_gene\"),     cluster_col = \"orig.ident\",     n_genes     = 15   ) %>%   Reduce(`+`, .) so %>%   plot_gene_usage(     data_cols   = \"v_gene\",     cluster_col = \"orig.ident\",     plot_colors = c(BL6 = \"#3288BD\", MD4 = \"#D53E4F\"),          color = \"black\",  # parameters to pass to ggplot2     alpha = 0.7   ) +   theme(axis.text.x = element_text(angle = 90))"},{"path":"https://rnabioco.github.io/djvdj/articles/gene-usage.html","id":"circos-plot","dir":"Articles","previous_headings":"","what":"Circos plot","title":"Gene Usage","text":"circos plot can created setting method argument ‘circos’. plot summarize number cells containing different segment pairs. number cells shown axis labels sample. example, summarizing segment usage entire dataset (BL6 MD4 cells combined). cluster_col argument can used create separate plot sample.  Plot colors can modified using plot_colors argument, additional parameters can passed directly circlize::chordDiagram(). example add border around links scale plot sample width.","code":"so %>%   plot_gene_usage(     data_cols = c(\"v_gene\", \"j_gene\"),     method    = \"circos\",     n_genes   = 6   ) so %>%   plot_gene_usage(     data_cols   = c(\"v_gene\", \"j_gene\"),     method      = \"circos\",     n_genes     = 10,     plot_colors = brewer.pal(10, \"Spectral\"),          link.border = \"black\",  # parameters to pass to chordDiagram()     scale       = TRUE   )"},{"path":"https://rnabioco.github.io/djvdj/articles/import_vdj.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Data Import","text":"load parse V(D)J data, FASTQ files must first processed using Cell Ranger. data used vignette processed using Cell Ranger v7.0. Cell Ranger generates several files djvdj uses downstream analysis. includes outs/filtered_contig_annotations.csv file, contains basic information chain required import_vdj() function. simplest use case import_vdj() involves creating object using data single run. import_vdj() adds variety per-chain metrics object meta.data. Information chain identified cell separated semicolon. separator used storing parsing per-chain V(D)J data can specified using sep argument included djvdj functions. NAs included cells lack V(D)J data. modify/filter/plot per-chain data, djvdj provides range functions make easy parse visualize information. detailed examples refer vignettes documentation following functions: filter_vdj(), mutate_vdj(), summarize_vdj(), plot_vdj(), plot_vdj_feature().","code":"# Create Seurat object so <- \"splenocytes/BL6_GEX/filtered_feature_bc_matrix\" %>%   Read10X() %>%   CreateSeuratObject()  # Add V(D)J data to object so_vdj <- so %>%   import_vdj(vdj_dir = \"splenocytes/BL6_BCR\") so_vdj@meta.data %>%   head(2) #>                       orig.ident nCount_RNA nFeature_RNA  clonotype_id #> AAACCTGAGACCTTTG-1 SeuratProject        273          208 clonotype2240 #> AAACCTGAGGAATCGC-1 SeuratProject        243          199   clonotype40 #>                    exact_subclonotype_id  chains n_chains #> AAACCTGAGACCTTTG-1                     1 IGH;IGK        2 #> AAACCTGAGGAATCGC-1                     1     IGL        1 #>                                      cdr3 #> AAACCTGAGACCTTTG-1 CARHPAMDYW;CWQGTHFPRTF #> AAACCTGAGGAATCGC-1            CALWYSTHYVF #>                                                                             cdr3_nt #> AAACCTGAGACCTTTG-1 TGTGCCAGACATCCCGCTATGGACTACTGG;TGCTGGCAAGGTACACATTTTCCTCGGACGTTC #> AAACCTGAGGAATCGC-1                                TGTGCTCTATGGTACAGCACCCATTATGTTTTC #>                    cdr3_length cdr3_nt_length            v_gene    d_gene #> AAACCTGAGACCTTTG-1       10;11          30;33 IGHV2-6;IGKV1-135 None;None #> AAACCTGAGGAATCGC-1          11             33             IGLV2      None #>                         j_gene    c_gene isotype  reads umis productive #> AAACCTGAGACCTTTG-1 IGHJ4;IGKJ1 IGHM;IGKC    IGHM 60;376 6;22  TRUE;TRUE #> AAACCTGAGGAATCGC-1       IGLJ2     IGLC2    None    360   13       TRUE #>                    full_length paired #> AAACCTGAGACCTTTG-1   TRUE;TRUE   TRUE #> AAACCTGAGGAATCGC-1        TRUE  FALSE"},{"path":"https://rnabioco.github.io/djvdj/articles/import_vdj.html","id":"loading-multiple-runs","dir":"Articles","previous_headings":"","what":"Loading multiple runs","title":"Data Import","text":"combining gene expression V(D)J data multiple runs Seurat object, must ensure import_vdj() able match cell barcodes two data types. easiest way load gene expression V(D)J samples order. V(D)J samples loaded order gene expression data, cell barcodes match receive error. Another way ensure cell barcodes gene expression V(D)J data able matched specify cell barcode prefixes sample. Seurat::Read10X() import_vdj() functions can done passing named vector. scenario, names added prefixes cell barcodes.","code":"# Load GEX data gex_dirs <- c(   \"splenocytes/BL6_GEX/filtered_feature_bc_matrix\",   \"splenocytes/MD4_GEX/filtered_feature_bc_matrix\" )  so <- gex_dirs %>%   Read10X() %>%   CreateSeuratObject()  # Load BCR data # note that the BL6 and MD4 paths are in the same order as the gene # expression data vdj_dirs <- c(   \"splenocytes/BL6_BCR\",   \"splenocytes/MD4_BCR\" )  so_vdj <- so %>%   import_vdj(vdj_dir = vdj_dirs) # Here we try to load the V(D)J data in the opposite order as the gene # expression data. THIS PRODUCES AN ERROR! vdj_dirs <- c(   \"splenocytes/MD4_BCR\",   \"splenocytes/BL6_BCR\" )  so_vdj <- so %>%   import_vdj(vdj_dir = vdj_dirs) # Load GEX data gex_dirs <- c(   BL6 = \"splenocytes/BL6_GEX/filtered_feature_bc_matrix\",   MD4 = \"splenocytes/MD4_GEX/filtered_feature_bc_matrix\" )  so <- gex_dirs %>%   Read10X() %>%   CreateSeuratObject()  # Load BCR data # note that the samples are not in the same order as the gene expression data, # but this is okay since cell prefixes are provided as names for the # input vector vdj_dirs <- c(   MD4 = \"splenocytes/MD4_BCR\",   BL6 = \"splenocytes/BL6_BCR\" )  so_vdj <- so %>%   import_vdj(vdj_dir = vdj_dirs)"},{"path":"https://rnabioco.github.io/djvdj/articles/import_vdj.html","id":"defining-clonotypes","dir":"Articles","previous_headings":"","what":"Defining clonotypes","title":"Data Import","text":"results multiple Cell Ranger runs added object, clonotype IDs match, .e. clonotype1 samples. allow clonotypes directly compared multiple samples, clonotypes can recalculated using define_clonotypes argument. argument assign new clonotype IDs using information available chain. three options specify step performed: ‘cdr3aa’: use CDR3 amino acid sequence ‘cdr3nt’: use CDR3 nucleotide sequence ‘cdr3_gene’: use CDR3 nucleotide sequence combination V(D)J genes identified cell clonotype IDs can also adjusted multiple samples using aggregate function available Cell Ranger. load aggregated output files just pass cellranger aggr output directory aggr_dir argument. correctly match cell barcodes aggregated V(D)J data gene expression data, gene expression samples must loaded object order samples listed cellranger aggr config file.","code":"so_vdj <- so %>%   import_vdj(     vdj_dir = vdj_dirs,     define_clonotypes = \"cdr3_gene\"   )"},{"path":"https://rnabioco.github.io/djvdj/articles/import_vdj.html","id":"filtering-chains","dir":"Articles","previous_headings":"","what":"Filtering chains","title":"Data Import","text":"import_vdj() function several arguments can used perform basic filtering chain. filter_chains argument include chains least one productive full length contig. However, noted recent versions Cell Ranger output files already filtered based criteria, argument relevant loading data processed earlier versions Cell Ranger v3.0. filter_paired argument include clonotypes paired chains. TCR data, means clonotype must least one TRA TRB chain. BCR data clonotype must least one IGH chain least one IGK IGL chain. noted clonotype multiple chains type, still included, e.g. TRA;TRB;TRB IGH;IGK;IGK still included. Clonotypes include two chains can filtered using filter_vdj().","code":"vdj_dirs <- c(   MD4 = \"splenocytes/MD4_BCR\",   BL6 = \"splenocytes/BL6_BCR\" )  so_vdj <- so %>%   import_vdj(     vdj_dir = vdj_dirs,     filter_chains = TRUE,     filter_paired = TRUE   )  # To only include clonotypes with exactly 2 chains so_vdj <- so_vdj %>%   filter_vdj(n_chains == 2)"},{"path":"https://rnabioco.github.io/djvdj/articles/import_vdj.html","id":"loading-mutation-information","dir":"Articles","previous_headings":"","what":"Loading mutation information","title":"Data Import","text":"Mutation information chain can parsed using two additional output files Cell Ranger: outs/concat_ref.bam: file contains alignment information used quantify insertions, deletions, mismatches chain. outs/airr_rearrangement.tsv: file contains coordinates V(D)J gene segment used quantify mutations segment /junction. additional columns added meta.data include number insertions, deletions, mismatches (ending ‘ins’, ‘del’, ‘mis’) V(D)J segment (prefixed ‘v’, ‘d’, ‘j’, ‘c’). Columns containing junction information prefixed either ‘vd’ ‘dj’. Columns ending ‘freq’ show event frequency calculated number events divided length region.","code":"vdj_dirs <- c(   MD4 = \"splenocytes/MD4_BCR\",   BL6 = \"splenocytes/BL6_BCR\" )  so_vdj <- so %>%   import_vdj(     vdj_dir = vdj_dirs,     include_mutations = TRUE   ) so_vdj@meta.data %>%   head(2) #>                        orig.ident nCount_RNA nFeature_RNA  clonotype_id #> BL6_AAACCTGAGACCTTTG-1        BL6        273          208 clonotype2240 #> BL6_AAACCTGAGGAATCGC-1        BL6        243          199   clonotype40 #>                        exact_subclonotype_id  chains n_chains #> BL6_AAACCTGAGACCTTTG-1                     1 IGH;IGK        2 #> BL6_AAACCTGAGGAATCGC-1                     1     IGL        1 #>                                          cdr3 #> BL6_AAACCTGAGACCTTTG-1 CARHPAMDYW;CWQGTHFPRTF #> BL6_AAACCTGAGGAATCGC-1            CALWYSTHYVF #>                                                                                 cdr3_nt #> BL6_AAACCTGAGACCTTTG-1 TGTGCCAGACATCCCGCTATGGACTACTGG;TGCTGGCAAGGTACACATTTTCCTCGGACGTTC #> BL6_AAACCTGAGGAATCGC-1                                TGTGCTCTATGGTACAGCACCCATTATGTTTTC #>                        cdr3_length cdr3_nt_length            v_gene #> BL6_AAACCTGAGACCTTTG-1       10;11          30;33 IGHV2-6;IGKV1-135 #> BL6_AAACCTGAGGAATCGC-1          11             33             IGLV2 #>                           d_gene      j_gene    c_gene isotype  reads #> BL6_AAACCTGAGACCTTTG-1 None;None IGHJ4;IGKJ1 IGHM;IGKC    IGHM 60;376 #> BL6_AAACCTGAGGAATCGC-1      None       IGLJ2     IGLC2    None    360 #>                        umis productive full_length paired v_ins v_del #> BL6_AAACCTGAGACCTTTG-1 6;22  TRUE;TRUE   TRUE;TRUE   TRUE   0;0   4;3 #> BL6_AAACCTGAGGAATCGC-1   13       TRUE        TRUE  FALSE     0     4 #>                        v_mis d_ins d_del d_mis j_ins j_del j_mis c_ins #> BL6_AAACCTGAGACCTTTG-1   0;0   0;0   0;0   0;0   0;0   0;3   0;0   0;0 #> BL6_AAACCTGAGGAATCGC-1     0     0     0     0     0     0     0     0 #>                        c_del c_mis all_ins all_del all_mis vd_ins vd_del #> BL6_AAACCTGAGACCTTTG-1   0;0   0;0     0;0     4;6     0;0    0;0    4;3 #> BL6_AAACCTGAGGAATCGC-1     0     0       0       4       0      0      0 #>                        dj_ins dj_del v_mis_freq d_mis_freq j_mis_freq #> BL6_AAACCTGAGACCTTTG-1    0;0    0;0        0;0        0;0        0;0 #> BL6_AAACCTGAGGAATCGC-1      0      0          0          0          0 #>                        c_mis_freq all_mis_freq #> BL6_AAACCTGAGACCTTTG-1        0;0          0;0 #> BL6_AAACCTGAGGAATCGC-1          0            0"},{"path":"https://rnabioco.github.io/djvdj/articles/import_vdj.html","id":"loading-tcr-and-bcr-data","dir":"Articles","previous_headings":"","what":"Loading TCR and BCR data","title":"Data Import","text":"add BCR TCR data object, run import_vdj() separately data type. distinguish columns containing BCR TCR data, use prefix argument add unique column names. results two sets new columns added meta.data. performing downstream analysis using djvdj functions, sure specify correct columns, .e. ‘bcr_clonotype_id’ ‘tcr_clonotype_id’.","code":"bcr_dirs <- c(   MD4 = \"splenocytes/MD4_BCR\",   BL6 = \"splenocytes/BL6_BCR\" )  tcr_dirs <- c(   MD4 = \"splenocytes/MD4_TCR\",   BL6 = \"splenocytes/BL6_TCR\" )  so_vdj <- so %>%   import_vdj(bcr_dirs, prefix = \"bcr_\") %>%   import_vdj(tcr_dirs, prefix = \"tcr_\") so_vdj@meta.data %>%   head(3) #>                        orig.ident nCount_RNA nFeature_RNA #> BL6_AAACCTGAGACCTTTG-1        BL6        273          208 #> BL6_AAACCTGAGGAATCGC-1        BL6        243          199 #> BL6_AAACCTGAGTATCGAA-1        BL6        250          202 #>                        bcr_clonotype_id bcr_exact_subclonotype_id #> BL6_AAACCTGAGACCTTTG-1    clonotype2240                         1 #> BL6_AAACCTGAGGAATCGC-1      clonotype40                         1 #> BL6_AAACCTGAGTATCGAA-1             <NA>                        NA #>                        bcr_chains bcr_n_chains               bcr_cdr3 #> BL6_AAACCTGAGACCTTTG-1    IGH;IGK            2 CARHPAMDYW;CWQGTHFPRTF #> BL6_AAACCTGAGGAATCGC-1        IGL            1            CALWYSTHYVF #> BL6_AAACCTGAGTATCGAA-1       <NA>           NA                   <NA> #>                                                                             bcr_cdr3_nt #> BL6_AAACCTGAGACCTTTG-1 TGTGCCAGACATCCCGCTATGGACTACTGG;TGCTGGCAAGGTACACATTTTCCTCGGACGTTC #> BL6_AAACCTGAGGAATCGC-1                                TGTGCTCTATGGTACAGCACCCATTATGTTTTC #> BL6_AAACCTGAGTATCGAA-1                                                             <NA> #>                        bcr_cdr3_length bcr_cdr3_nt_length #> BL6_AAACCTGAGACCTTTG-1           10;11              30;33 #> BL6_AAACCTGAGGAATCGC-1              11                 33 #> BL6_AAACCTGAGTATCGAA-1            <NA>               <NA> #>                               bcr_v_gene bcr_d_gene  bcr_j_gene #> BL6_AAACCTGAGACCTTTG-1 IGHV2-6;IGKV1-135  None;None IGHJ4;IGKJ1 #> BL6_AAACCTGAGGAATCGC-1             IGLV2       None       IGLJ2 #> BL6_AAACCTGAGTATCGAA-1              <NA>       <NA>        <NA> #>                        bcr_c_gene bcr_isotype bcr_reads bcr_umis #> BL6_AAACCTGAGACCTTTG-1  IGHM;IGKC        IGHM    60;376     6;22 #> BL6_AAACCTGAGGAATCGC-1      IGLC2        None       360       13 #> BL6_AAACCTGAGTATCGAA-1       <NA>        <NA>      <NA>     <NA> #>                        bcr_productive bcr_full_length bcr_paired #> BL6_AAACCTGAGACCTTTG-1      TRUE;TRUE       TRUE;TRUE       TRUE #> BL6_AAACCTGAGGAATCGC-1           TRUE            TRUE      FALSE #> BL6_AAACCTGAGTATCGAA-1           <NA>            <NA>         NA #>                        tcr_clonotype_id tcr_chains tcr_n_chains #> BL6_AAACCTGAGACCTTTG-1             <NA>       <NA>           NA #> BL6_AAACCTGAGGAATCGC-1             <NA>       <NA>           NA #> BL6_AAACCTGAGTATCGAA-1    clonotype1970        TRB            1 #>                              tcr_cdr3 #> BL6_AAACCTGAGACCTTTG-1           <NA> #> BL6_AAACCTGAGGAATCGC-1           <NA> #> BL6_AAACCTGAGTATCGAA-1 CAWSRDTNNSPLYF #>                                                       tcr_cdr3_nt #> BL6_AAACCTGAGACCTTTG-1                                       <NA> #> BL6_AAACCTGAGGAATCGC-1                                       <NA> #> BL6_AAACCTGAGTATCGAA-1 TGTGCCTGGAGCCGGGACACCAATAATTCGCCCCTCTACTTT #>                        tcr_cdr3_length tcr_cdr3_nt_length tcr_v_gene #> BL6_AAACCTGAGACCTTTG-1            <NA>               <NA>       <NA> #> BL6_AAACCTGAGGAATCGC-1            <NA>               <NA>       <NA> #> BL6_AAACCTGAGTATCGAA-1              14                 42     TRBV31 #>                        tcr_d_gene tcr_j_gene tcr_c_gene tcr_reads #> BL6_AAACCTGAGACCTTTG-1       <NA>       <NA>       <NA>      <NA> #> BL6_AAACCTGAGGAATCGC-1       <NA>       <NA>       <NA>      <NA> #> BL6_AAACCTGAGTATCGAA-1       None    TRBJ1-6      TRBC1       234 #>                        tcr_umis tcr_productive tcr_full_length tcr_paired #> BL6_AAACCTGAGACCTTTG-1     <NA>           <NA>            <NA>         NA #> BL6_AAACCTGAGGAATCGC-1     <NA>           <NA>            <NA>         NA #> BL6_AAACCTGAGTATCGAA-1        2           TRUE            TRUE      FALSE"},{"path":"https://rnabioco.github.io/djvdj/articles/import_vdj.html","id":"other-object-types","dir":"Articles","previous_headings":"","what":"Other object types","title":"Data Import","text":"addition Seurat objects, djvdj also works SingleCellExperiment objects data.frames. input object provided import_vdj(), data.frame containing V(D)J information returned. data.frame can used djvdj functions perform downstream analysis.","code":"vdj_dirs <- c(   MD4 = \"splenocytes/MD4_BCR\",   BL6 = \"splenocytes/BL6_BCR\" )  # This will load V(D)J data and return a data.frame df_vdj <- import_vdj(vdj_dir = vdj_dirs)"},{"path":"https://rnabioco.github.io/djvdj/articles/mutate.html","id":"filtering-vdj-data","dir":"Articles","previous_headings":"","what":"Filtering V(D)J data","title":"Data Manipulation","text":"Per-chain data can filtered filter_vdj() function. per-chain values cell parsed based ; separator converted vector. allows vector operations used filtering. function remove cells object, instead remove V(D)J data cells match provided filtering expression. example including V(D)J data cells chains, IGH, IGK, IGL. example removing V(D)J data chains except IGH.","code":"res <- so %>%   filter_vdj(     all(c(\"IGH\", \"IGK\", \"IGL\") %in% chains)   )  res@meta.data %>%   filter(!is.na(clonotype_id)) %>%   select(chains, cdr3) %>%   head(3) #>                             chains #> BL6_AACTCTTTCATAGCAC-1 IGH;IGK;IGL #> BL6_ACACTGATCGCCTGAG-1 IGH;IGK;IGL #> BL6_ACGATGTCATAGGATA-1 IGH;IGK;IGL #>                                                           cdr3 #> BL6_AACTCTTTCATAGCAC-1   CARVGLRGHFDYW;CQQWSSNPYTF;CALWYSNLWVF #> BL6_ACACTGATCGCCTGAG-1    CARMEDWAMDYW;CQQHYSTPWTF;CALWYSNHFIF #> BL6_ACGATGTCATAGGATA-1 CARYYYGSSYWFAYW;CQQLVEYPLTF;CALWYSNHLVF res <- so %>%   filter_vdj(chains == \"IGH\")  res@meta.data %>%   filter(!is.na(clonotype_id)) %>%   select(chains, cdr3) %>%   head(3) #>                        chains              cdr3 #> BL6_AAACCTGAGACCTTTG-1    IGH        CARHPAMDYW #> BL6_AAACCTGGTCTCGTTC-1    IGH CARSGYGSSPWWYFDVW #> BL6_AAACGGGCATGTAGTC-1    IGH   CTREGGDSVGYFDVW"},{"path":"https://rnabioco.github.io/djvdj/articles/mutate.html","id":"summarizing-per-chain-data","dir":"Articles","previous_headings":"","what":"Summarizing per-chain data","title":"Data Manipulation","text":"summarize_vdj() function can used summarize per-chain data cell add results meta.data. example calculating median number deletions median number insertions cell. col_names argument can used name new columns, use ‘{.col}’ refer original column name. function can also used character strings chains column. example creating new column meta.data containing unique chains cell.","code":"res <- so %>%   summarize_vdj(     data_cols = c(\"all_del\", \"all_ins\"),     fn        = stats::median,     col_names = \"median_{.col}\"   )  res@meta.data %>%   select(all_del, all_ins, median_all_del, median_all_ins) %>%   head(2) #>                        all_del all_ins median_all_del median_all_ins #> BL6_AAACCTGAGACCTTTG-1     4;6     0;0              5              0 #> BL6_AAACCTGAGGAATCGC-1       4       0              4              0 res <- so %>%   summarize_vdj(     data_cols = \"chains\",     fn        = ~ paste0(unique(.x), collapse = \"_\"),     col_names = \"unique_chains\"   )  res@meta.data %>%   filter(n_chains > 2) %>%   select(chains, unique_chains) %>%   head(2) #>                             chains unique_chains #> BL6_AAACGGGTCTACTATC-1 IGH;IGK;IGK       IGH_IGK #> BL6_AAAGATGAGGAGCGAG-1 IGH;IGK;IGK       IGH_IGK"},{"path":"https://rnabioco.github.io/djvdj/articles/mutate.html","id":"mutating-per-chain-data","dir":"Articles","previous_headings":"","what":"Mutating per-chain data","title":"Data Manipulation","text":"Another way modify V(D)J data present object mutate_vdj() function. function behaves similar way dplyr::mutate(), parse per-chain values cell convert vector. allows vector operations performed modifying meta.data. example calculating sum insertions deletions cell storing information new column called ‘total_indels’.","code":"res <- so %>%   mutate_vdj(     total_indels = sum(all_ins, all_del)   )  res@meta.data %>%   select(all_ins, all_del, total_indels) %>%   head() #>                        all_ins all_del total_indels #> BL6_AAACCTGAGACCTTTG-1     0;0     4;6           10 #> BL6_AAACCTGAGGAATCGC-1       0       4            4 #> BL6_AAACCTGAGTATCGAA-1    <NA>    <NA>           NA #> BL6_AAACCTGAGTCAAGCG-1    <NA>    <NA>           NA #> BL6_AAACCTGAGTGAAGTT-1    <NA>    <NA>           NA #> BL6_AAACCTGAGTGGAGTC-1    <NA>    <NA>           NA"},{"path":"https://rnabioco.github.io/djvdj/articles/plotting.html","id":"plotting-numerical-data","dir":"Articles","previous_headings":"","what":"Plotting numerical data","title":"Plotting","text":"plot_vdj() function can used plot numerical V(D)J data present object. default, plot values present data_col column every chain. trans argument can used specify axis transformation.  plot values specific chain, chain argument can used. example plotting number UMIs IGK chain.  method argument can used generate types plots including boxplots.  Instead plotting values chain, per-chain values can summarized plotted cell. example plotting mean number reads cell.","code":"so %>%   plot_vdj(     data_col    = \"umis\",     cluster_col = \"orig.ident\",     trans       = \"log10\"   ) so %>%   plot_vdj(     data_col    = \"umis\",     cluster_col = \"orig.ident\",     chain       = \"IGK\",     trans       = \"log10\"   ) so %>%   plot_vdj(     data_col    = \"reads\",     cluster_col = \"sample\",     method      = \"boxplot\",     trans       = \"log10\"   ) so %>%   plot_vdj(     data_col    = \"reads\",     cluster_col = \"sample\",     method      = \"violin\",     trans       = \"log10\",          per_cell    = TRUE,     summary_fn  = mean   )"},{"path":"https://rnabioco.github.io/djvdj/articles/plotting.html","id":"umap-projections","dir":"Articles","previous_headings":"","what":"UMAP projections","title":"Plotting","text":"plot V(D)J information UMAP projections, plot_vdj_feature() can used. summary function use summarizing per-chain values cell must specified using summary_fn argument. example plotting mean number mutations cell.  Instead summarizing per-chain values cell, can also specify specific chain use plotting. example plotting CDR3 length IGK chains. cell IGK chain multiple IGK chains, plotted NA.  Like plot_vdj(), scale can also transformed using trans argument.","code":"so %>%   plot_vdj_feature(     data_col   = \"all_mis\",     summary_fn = mean   ) so %>%   plot_vdj_feature(     data_col = \"cdr3_length\",     chain    = \"IGK\"   ) so %>%   plot_vdj_feature(     data_col = \"umis\",     trans    = \"log10\"   )"},{"path":"https://rnabioco.github.io/djvdj/articles/similarity.html","id":"calculating-repertoire-overlap","dir":"Articles","previous_headings":"","what":"Calculating repertoire overlap","title":"Repertoire Similarity","text":"calc_similarity() function calculate repertoire overlap clusters add results object meta.data. function designed specifically work R package abdiv. similarity metric use calculations can selected passing name function method argument. beta diversity function abdiv package takes species counts input can used. sure read documentation function using ensure appropriate analysis. example calculating Jaccard dissimilarity index BL6 MD4 samples. metric, value close 0 indicates samples high number shared clonotypes. Jaccard dissimilarity calculated using following equation, \\(\\) number species present x y, \\(b\\) number species present y x, \\(c\\) number species present x y. \\[ 1 - {\\+ b + c} \\] Similarity metrics can also calculated specific chain. , column passed data_col argument must contain per-chain data, CDR3 amino acid nucleotide sequences. example similarity calculated based heavy chain CDR3 sequences. Instead adding results object meta.data, matrix can also returned.","code":"so_vdj <- so %>%   calc_similarity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = abdiv::jaccard   ) so_vdj <- so %>%   calc_similarity(     data_col    = \"cdr3_nt\",     cluster_col = \"sample\",     chain       = \"IGH\"   ) so %>%   calc_similarity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     return_mat  = TRUE   ) #>           BL6-1     BL6-2     BL6-3     BL6-4     BL6-5     MD4-1 #> BL6-1 0.0000000 0.8569697 0.8627451 0.8445532 0.8542964 0.9747899 #> BL6-2 0.8569697 0.0000000 0.8653396 0.8625866 0.8680801 0.9787645 #> BL6-3 0.8627451 0.8653396 0.0000000 0.8561321 0.8574879 0.9760956 #> BL6-4 0.8445532 0.8625866 0.8561321 0.0000000 0.8615385 0.9788054 #> BL6-5 0.8542964 0.8680801 0.8574879 0.8615385 0.0000000 0.9757085 #> MD4-1 0.9747899 0.9787645 0.9760956 0.9788054 0.9757085 0.0000000 #> MD4-2 0.9831579 0.9785575 0.9820000 0.9825581 0.9817073 0.9384615 #> MD4-3 0.9749478 0.9788868 0.9782609 0.9769674 0.9717172 0.9452055 #> MD4-4 0.9832985 0.9806950 0.9821429 0.9787645 0.9756592 0.9264706 #> MD4-5 0.9764957 0.9803922 0.9777328 0.9784314 0.9752577 0.9166667 #>           MD4-2     MD4-3     MD4-4     MD4-5 #> BL6-1 0.9831579 0.9749478 0.9832985 0.9764957 #> BL6-2 0.9785575 0.9788868 0.9806950 0.9803922 #> BL6-3 0.9820000 0.9782609 0.9821429 0.9777328 #> BL6-4 0.9825581 0.9769674 0.9787645 0.9784314 #> BL6-5 0.9817073 0.9717172 0.9756592 0.9752577 #> MD4-1 0.9384615 0.9452055 0.9264706 0.9166667 #> MD4-2 0.0000000 0.9411765 0.9032258 0.9285714 #> MD4-3 0.9411765 0.0000000 0.9295775 0.9032258 #> MD4-4 0.9032258 0.9295775 0.0000000 0.8965517 #> MD4-5 0.9285714 0.9032258 0.8965517 0.0000000"},{"path":"https://rnabioco.github.io/djvdj/articles/similarity.html","id":"plotting-overlap","dir":"Articles","previous_headings":"","what":"Plotting overlap","title":"Repertoire Similarity","text":"plot_similarity() function create plots summarizing repertoire overlap samples. default, Jaccard dissimilarity calculated plotted heatmap. example, none samples show strong overlap. may seem surprising since MD4 samples mainly composed single clonotype similar repertoire. However, Jaccard index measuring number overlapping clonotypes influenced clonotype abundance.  metric takes account clonotype abundance Horn-Morisita index. metric measures probability clonotypes drawn sample different. Values close 0 indicate high similarity. example see clonotype abundance taken account, MD4 samples appear similar .  appearance heatmap can modified additional arguments. Setting cluster_heatmap FALSE remove dendrograph. remove_upper_triangle argument can used plot lower triangle heatmap. plot_colors argument adjust color gradient. Additional parameters can passed directly ComplexHeatmap::Heatmap().","code":"so %>%   plot_similarity(     data_col = \"clonotype_id\",     cluster_col = \"sample\"   ) so %>%   plot_similarity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = abdiv::horn_morisita   ) so %>%   plot_similarity(     data_col        = \"clonotype_id\",     cluster_col     = \"sample\",     method          = abdiv::horn_morisita,     plot_colors     = c(\"#3182bd\", \"white\", \"#fec44f\"),     cluster_heatmap = FALSE,     remove_upper_triangle = TRUE,          name = \"Horn-Morisita\"  # parameter to pass to Heatmap()   )"},{"path":"https://rnabioco.github.io/djvdj/articles/similarity.html","id":"circos-plot","dir":"Articles","previous_headings":"","what":"Circos plot","title":"Repertoire Similarity","text":"circos plot can created setting method argument ‘circos’. plot summarize number clonotypes overlapping samples. group_col argument can used split graph distinct sections based grouping variable. number overlapping clonotypes shown axis labels sample. width link reflects number clonotypes overlapping samples.  Plot colors can modified using plot_colors argument, additional parameters can passed directly circlize::chordDiagram(). example scale plot sample width.","code":"so %>%   plot_similarity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     group_col   = \"orig.ident\",     method      = \"circos\"   ) so %>%   plot_similarity(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     group_col   = \"orig.ident\",     method      = \"circos\",     plot_colors = brewer.pal(10, \"Spectral\"),          scale = TRUE  # parameter to pass to chordDiagram()   )"},{"path":"https://rnabioco.github.io/djvdj/articles/similarity.html","id":"mds-plot","dir":"Articles","previous_headings":"","what":"MDS plot","title":"Repertoire Similarity","text":"Multidimensional scaling (MDS) can used visualize overall similarity repertoires. calc_mds() function calculate MDS coordinates using either Jaccard dissimilarity index Horn-Morisita index. method can specified using method argument. MDS coordinates get added meta.data. plot_mds() function create MDS plot labels added sample.  ggplot2 functions can used adjust plot aesthetics, additional arguments can passed directly ggplot2, e.g. size, shape, etc.  remove sample labels, set label_points FALSE.","code":"so_vdj <- so %>%   calc_mds(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",     method      = \"horn_morisita\"   ) so %>%   plot_mds(     data_col = \"clonotype_id\",     cluster_col = \"sample\"   ) so %>%   plot_mds(     data_col    = \"clonotype_id\",     cluster_col = \"sample\",          size  = 4,    # parameters to pass to ggplot      shape = 2   ) +   ggplot2::theme(legend.position = \"none\") so %>%   plot_mds(     data_col     = \"clonotype_id\",     cluster_col  = \"sample\",     label_points = FALSE   )"},{"path":"https://rnabioco.github.io/djvdj/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ryan Sheridan. Author, maintainer. Jay Hesselberth. Contributor. Rui Fu. Contributor. Kent Riemondy. Contributor. . Funder.","code":""},{"path":"https://rnabioco.github.io/djvdj/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sheridan R (2022). djvdj: collection single-cell V(D)J tools. https://rnabioco.github.io/djvdj/, https://github.com/rnabioco/djvdj/.","code":"@Manual{,   title = {djvdj: A collection of single-cell V(D)J tools},   author = {Ryan Sheridan},   year = {2022},   note = {https://rnabioco.github.io/djvdj/, https://github.com/rnabioco/djvdj/}, }"},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"djvdj-","dir":"","previous_headings":"","what":"A collection of single-cell V(D)J tools","title":"A collection of single-cell V(D)J tools","text":"djvdj package provides range tools analyze manipulate single cell V(D)J sequencing data. tools straightforward easily integrate standard Seurat workflow. work progress, please report bugs opening new issue.","code":""},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A collection of single-cell V(D)J tools","text":"can install development version djvdj GitHub :","code":"devtools::install_github(\"rnabioco/djvdj\")"},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"import","dir":"","previous_headings":"","what":"Import","title":"A collection of single-cell V(D)J tools","text":"djvdj can import V(D)J sequencing results Cell Ranger add data Seurat SingleCellExperiment object using import_vdj(). Additional functions provided filter modify (filter_vdj(), mutate_vdj(), summarize_vdj()) object based V(D)J metrics including chains, clonotypes, CDR3 sequences.","code":"# Import VDJ data # A vector of paths can be provided to load multiple datasets # If prefixes were added to the cell barcodes when the object was generated, # include these as the vector names paths <- c(   BL6 = \"splenocytes/BL6_BCR\",   MD4 = \"splenocytes/MD4_BCR\" )  # Add V(D)J data to object so <- import_vdj(   input         = so,      # Seurat or SingleCellExperiment object   vdj_dir       = paths,   # Cellranger output directories   filter_paired = FALSE    # Keep clonotypes without paired chains )"},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"calculate","dir":"","previous_headings":"","what":"Calculate","title":"A collection of single-cell V(D)J tools","text":"djvdj allows calculate range population diversity similarity metrics implemented abdiv package. function calc_diversity() can used measure diversity per-cluster per-sample basis allow comparison across conditions. calc_similarity() measure repertoire overlap clusters samples allow direct comparisons cells interest. Additional functions also available calculate clonotype abundances V(D)J gene usage (calc_frequency(), calc_gene_usage()).","code":"so <- calc_diversity(   input       = so,              # Seurat object   data_col    = \"clonotype_id\",  # Column containing clonotypes   cluster_col = \"orig.ident\",    # Column containing cell clusters to compare   method      = abdiv::simpson   # Diversity metric to use )"},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"plot","dir":"","previous_headings":"","what":"Plot","title":"A collection of single-cell V(D)J tools","text":"‘calc’ function, djvdj also provides corresponding ‘plot’ function summarize results.","code":"# Compare the usage of different V and J genes ggs <- plot_gene_usage(   input       = so,                     # Seurat object   data_cols   = c(\"v_gene\", \"j_gene\"),  # Column(s) containing V(D)J genes to plot   cluster_col = \"orig.ident\",           # Column containing cell clusters to compare   chain       = \"IGK\",                  # Chain to plot   plot_colors = \"#6A51A3\" )  Reduce(`+`, ggs)"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate repertoire diversity — calc_diversity","title":"Calculate repertoire diversity — calc_diversity","text":"Calculate repertoire diversity","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate repertoire diversity — calc_diversity","text":"","code":"calc_diversity(   input,   data_col,   cluster_col = NULL,   method = abdiv::simpson,   downsample = FALSE,   n_boots = 1,   chain = NULL,   chain_col = \"chains\",   prefix = paste0(data_col, \"_\"),   return_df = FALSE,   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate repertoire diversity — calc_diversity","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating diversity, e.g. 'clonotype_id' cluster_col meta.data column containing cluster IDs use grouping cells calculating diversity. cluster_col omitted, diversity index calculated using cells. method Method use calculating diversity. named list can also passed use multiple methods. names specify names output columns. downsample Downsample clusters size calculating diversity metrics n_boots Number bootstrap replicates chain Chain use calculating diversity. Set NULL include chains. chain_col meta.data column containing chains cell prefix Prefix add new columns return_df Return results data.frame. FALSE, results added input object. sep Separator used storing per-chain V(D)J data cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate repertoire diversity — calc_diversity","text":"Single cell object data.frame diversity metrics","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate repertoire diversity — calc_diversity","text":"","code":"# Calculate diversity using all cells res <- calc_diversity(   vdj_so,   data_col = \"clonotype_id\",   method   = abdiv::simpson )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains clonotype_id_simpson_diversity #> 1_AAACCTGAGTAGGTGC-1        1                      0.8112612  # Group cells based on meta.data column before calculating diversity res <- calc_diversity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\" )  head(res@colData, 1) #> DataFrame with 1 row and 28 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains clonotype_id_simpson_diversity #>                      <integer>                      <numeric> #> 1_AAACCTGAGTAGGTGC-1         1                         0.8576  # Add a prefix to the new columns # this is useful if multiple diversity calculations are stored in the # meta.data res <- calc_diversity(   vdj_so,   data_col = \"clonotype_id\",   prefix   = \"bcr_\" )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains bcr_simpson_diversity #> 1_AAACCTGAGTAGGTGC-1        1             0.8112612  # Calculate multiple metrics res <- calc_diversity(   vdj_sce,   data_col = \"clonotype_id\",   method = list(     simpson = abdiv::simpson,     shannon = abdiv::shannon   ) )  head(res@colData, 1) #> DataFrame with 1 row and 29 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains clonotype_id_simpson_diversity #>                      <integer>                      <numeric> #> 1_AAACCTGAGTAGGTGC-1         1                       0.811261 #>                      clonotype_id_shannon_diversity #>                                           <numeric> #> 1_AAACCTGAGTAGGTGC-1                        2.93551  # Return a data.frame instead of adding the results to the input object res <- calc_diversity(   vdj_so,   data_col  = \"clonotype_id\",   return_df = TRUE )  head(res, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains clonotype_id_simpson_diversity #> 1_AAACCTGAGTAGGTGC-1        1                      0.8112612"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate frequency of groups present in object — calc_frequency","title":"Calculate frequency of groups present in object — calc_frequency","text":"Calculate frequency cell label present provided meta.data column. useful comparing proportion cells belonging different samples, cell types, clonotypes, isotypes, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate frequency of groups present in object — calc_frequency","text":"","code":"calc_frequency(   input,   data_col,   cluster_col = NULL,   prefix = paste0(data_col, \"_\"),   return_df = FALSE )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate frequency of groups present in object — calc_frequency","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing cell labels use calculating abundance. calculate clonotype abundance, provide column containing clonotype IDs, calculate isotype abundance provide column containing cell isotypes. default clonotype_id used calculations. cluster_col meta.data column containing cluster IDs use grouping cells calculating clonotype abundance prefix Prefix add new columns return_df Return results data.frame. set FALSE, results added input object.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate frequency of groups present in object — calc_frequency","text":"Single cell object data.frame clonotype abundance metrics","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate frequency of groups present in object — calc_frequency","text":"","code":"# Calculate clonotype abundance using all cells res <- calc_frequency(   vdj_so,   data_col = \"clonotype_id\" )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains clonotype_id_freq clonotype_id_pct #> 1_AAACCTGAGTAGGTGC-1        1                38         42.69663 #>                      clonotype_id_grp #> 1_AAACCTGAGTAGGTGC-1               38  # Group cells based on meta.data column before calculating abundance res <- calc_frequency(   vdj_sce,   data_col = \"clonotype_id\",   cluster_col = \"orig.ident\" )  head(res@colData, 1) #> DataFrame with 1 row and 31 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains clonotype_id_freq clonotype_id_pct #>                      <integer>         <integer>        <numeric> #> 1_AAACCTGAGTAGGTGC-1         1                18               36 #>                      clonotype_id_shared clonotype_id_grp #>                                <logical>         <factor> #> 1_AAACCTGAGTAGGTGC-1                TRUE               18  # Add a prefix to the new columns # this is useful if multiple abundance calculations are stored in the # meta.data res <- calc_frequency(   vdj_so,   data_col = \"clonotype_id\",   prefix = \"bcr_\" )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains bcr_freq  bcr_pct bcr_grp #> 1_AAACCTGAGTAGGTGC-1        1       38 42.69663      38  # Return a data.frame instead of adding the results to the input object res <- calc_frequency(   vdj_sce,   data_col = \"clonotype_id\",   return_df = TRUE )  head(res, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains clonotype_id_freq clonotype_id_pct #> 1_AAACCTGAGTAGGTGC-1        1                38         42.69663 #>                      clonotype_id_grp #> 1_AAACCTGAGTAGGTGC-1               38"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate V(D)J segment usage — calc_gene_usage","title":"Calculate V(D)J segment usage — calc_gene_usage","text":"Calculate V(D)J segment usage","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate V(D)J segment usage — calc_gene_usage","text":"","code":"calc_gene_usage(   input,   data_cols,   cluster_col = NULL,   chain = NULL,   chain_col = \"chains\",   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate V(D)J segment usage — calc_gene_usage","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. data_cols meta.data column containing V(D)J genes identified clonotype. multiple columns provided, paired usage genes calculated. cluster_col meta.data column containing cell clusters use calculating gene usage chain Chain use calculating gene usage. Set NULL include chains. chain_col meta.data column containing chains cell sep Separator used storing per cell V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate V(D)J segment usage — calc_gene_usage","text":"data.frame containing gene usage summary","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate V(D)J segment usage — calc_gene_usage","text":"","code":"# Calculate V(D)J segment usage for all cells calc_gene_usage(   vdj_so,   data_cols = \"v_gene\" ) #> # A tibble: 62 × 4 #>    v_gene     n_cells  freq   pct #>    <chr>        <int> <int> <dbl> #>  1 IGKV5-43        89    53 59.6  #>  2 IGKV10-96       89     4  4.49 #>  3 IGHV1-82        89     3  3.37 #>  4 IGKV1-117       89     3  3.37 #>  5 IGKV10-94       89     3  3.37 #>  6 IGKV14-111      89     3  3.37 #>  7 IGKV2-137       89     3  3.37 #>  8 IGKV3-4         89     3  3.37 #>  9 IGKV6-15        89     3  3.37 #> 10 IGKV1-110       89     2  2.25 #> # … with 52 more rows  # Calculate gene usage separately for cell clusters calc_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   cluster_col = \"orig.ident\" ) #> # A tibble: 124 × 5 #>    v_gene    orig.ident n_cells  freq   pct #>    <chr>     <chr>        <dbl> <int> <dbl> #>  1 IGKV5-43  avid_2          39    26 66.7  #>  2 IGKV5-43  avid_1          50    27 54    #>  3 IGKV1-117 avid_1          50     3  6    #>  4 IGHV1-82  avid_2          39     2  5.13 #>  5 IGKV1-135 avid_2          39     2  5.13 #>  6 IGKV10-96 avid_2          39     2  5.13 #>  7 IGKV2-137 avid_2          39     2  5.13 #>  8 IGKV6-15  avid_2          39     2  5.13 #>  9 IGKV1-110 avid_1          50     2  4    #> 10 IGKV10-94 avid_1          50     2  4    #> # … with 114 more rows  # Calculate gene usage for a specific chain(s) calc_gene_usage(   vdj_so,   data_cols = \"v_gene\",   chain = c(\"IGK\", \"IGL\") ) #> # A tibble: 38 × 4 #>    v_gene     n_cells  freq   pct #>    <chr>        <int> <int> <dbl> #>  1 IGKV5-43        89    53 59.6  #>  2 IGKV10-96       89     4  4.49 #>  3 IGKV1-117       89     3  3.37 #>  4 IGKV10-94       89     3  3.37 #>  5 IGKV14-111      89     3  3.37 #>  6 IGKV2-137       89     3  3.37 #>  7 IGKV3-4         89     3  3.37 #>  8 IGKV6-15        89     3  3.37 #>  9 IGKV1-110       89     2  2.25 #> 10 IGKV1-135       89     2  2.25 #> # … with 28 more rows  # Calculate paired usage of V(D)J segments calc_gene_usage(   vdj_sce,   data_cols = c(\"v_gene\", \"j_gene\"), ) #> # A tibble: 76 × 5 #>    v_gene    j_gene n_cells  freq   pct #>    <chr>     <chr>    <int> <int> <dbl> #>  1 IGKV5-43  IGKJ2       89    53 59.6  #>  2 IGKV10-96 IGKJ1       89     3  3.37 #>  3 IGKV2-137 IGKJ2       89     3  3.37 #>  4 IGHV1-82  IGHJ4       89     2  2.25 #>  5 IGKV1-117 IGKJ2       89     2  2.25 #>  6 IGKV10-94 IGKJ1       89     2  2.25 #>  7 IGKV3-4   IGKJ2       89     2  2.25 #>  8 IGKV6-15  IGKJ2       89     2  2.25 #>  9 IGHV1-18  IGHJ4       89     1  1.12 #> 10 IGHV1-22  IGHJ3       89     1  1.12 #> # … with 66 more rows"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_mds.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform multidimensional scaling — calc_mds","title":"Perform multidimensional scaling — calc_mds","text":"Perform multidimensional scaling","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_mds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform multidimensional scaling — calc_mds","text":"","code":"calc_mds(   input,   data_col,   cluster_col,   method = abdiv::jaccard,   chain = NULL,   chain_col = \"chains\",   prefix = \"\",   return_df = FALSE,   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_mds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform multidimensional scaling — calc_mds","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating pairwise similarity clusters, e.g. 'clonotype_id' cluster_col meta.data column containing cluster IDs use calculating repertoire overlap method Method use comparing clusters calculating MDS coordinates, available methods include: 'jaccard', Jaccard dissimilarity index implemented abdiv::jaccard() 'horn_morisita', Horn-Morisita index implemented abdiv::horn_morisita() chain Chain use calculating gene usage. Set NULL include chains. chain_col meta.data column containing chains cell prefix Prefix add new columns return_df Return results data.frame. set FALSE, results added input object. sep Separator used storing per-chain V(D)J data cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_mds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform multidimensional scaling — calc_mds","text":"Single cell object data.frame MDS coordinates","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate cluster similarity — calc_similarity","title":"Calculate cluster similarity — calc_similarity","text":"Calculate cluster similarity","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate cluster similarity — calc_similarity","text":"","code":"calc_similarity(   input,   data_col,   cluster_col,   method = abdiv::jaccard,   chain = NULL,   chain_col = \"chains\",   prefix = NULL,   return_mat = FALSE,   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate cluster similarity — calc_similarity","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating pairwise similarity clusters, e.g. 'clonotype_id' cluster_col meta.data column containing cluster IDs use calculating repertoire overlap method Method use comparing clusters, possible values : 'count', count number clonotypes overlapping cluster function takes two numeric vectors containing counts unique value column provided data_col column, e.g. abdiv::jaccard() chain Chain use calculating gene usage. Set NULL include chains. chain_col meta.data column containing chains cell prefix Prefix add new columns return_mat Return matrix similarity values. set FALSE, results added input object. sep Separator used storing per-chain V(D)J data cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate cluster similarity — calc_similarity","text":"Single cell object data.frame similarity values","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate cluster similarity — calc_similarity","text":"","code":"# Calculate repertoire overlap res <- calc_similarity(   vdj_so,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   method      = abdiv::jaccard )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains jaccard_avid_1 jaccard_avid_2 #> 1_AAACCTGAGTAGGTGC-1        1              0      0.9807692  # Add a prefix to the new columns # this is useful if multiple calculations are stored in the meta.data res <- calc_similarity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   prefix      = \"bcr_\" )  head(res@colData, 1) #> DataFrame with 1 row and 29 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains bcr_avid_1 bcr_avid_2 #>                      <integer>  <numeric>  <numeric> #> 1_AAACCTGAGTAGGTGC-1         1          0   0.980769  # Return a matrix instead of adding the results to the input object calc_similarity(   vdj_so,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   return_mat  = TRUE ) #>           avid_1    avid_2 #> avid_1 0.0000000 0.9807692 #> avid_2 0.9807692 0.0000000"},{"path":"https://rnabioco.github.io/djvdj/reference/cluster_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster cells based on CDR3 sequences — cluster_sequences","title":"Cluster cells based on CDR3 sequences — cluster_sequences","text":"Cluster cells based CDR3 sequences","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/cluster_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster cells based on CDR3 sequences — cluster_sequences","text":"","code":"cluster_sequences(   input,   data_col = \"cdr3\",   chain = NULL,   method = \"louvain\",   resolution = 0.5,   k = 10,   dist_method = NULL,   run_umap = TRUE,   chain_col = \"chains\",   prefix = paste0(data_col, \"_\"),   return_df = FALSE,   sep = \";\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/cluster_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster cells based on CDR3 sequences — cluster_sequences","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing sequences use calculating Levenshtein distance. chain Chain use clustering sequences. Cells one provided chain excluded analysis. method Method use clustering, possible values : 'louvain', multi-level optimization modality implemented igraph::cluster_louvain() 'leiden', Leiden clustering algorithm implemented igraph::cluster_leiden() resolution Resolution (coarseness) clusters k Number neighbors k-nearest neighbors algorithm dist_method Method use computing distance sequences. NULL, distance calculated amino acid sequences using BLOSUM62 substitution matrix levenshtein distance calculated nucleotide sequences. possible values include: 'levenshtein' 'hamming' name substitution matrix available Biostrings package, e.g. 'BLOSUM62' run_umap Uniform Manifold Approximation Projection (UMAP) dimensional reduction method performed. add UMAP coordinates meta.data. chain_col meta.data column containing chains cell. prefix Prefix add graph name return_df Return results data.frame. FALSE, results added input object. sep Separator used storing per cell V(D)J data ... Additional parameters pass clustering method","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/cluster_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster cells based on CDR3 sequences — cluster_sequences","text":"Single cell object data.frame clustering results","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Define clonotypes based on V(D)J data — define_clonotypes","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"assign new clonotype IDs based combination values present provided columns","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"","code":"define_clonotypes(   input,   data_cols,   clonotype_col = \"clonotype_id\",   filter_chains = c(\"productive\", \"full_length\"),   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_cols meta.data columns containing V(D)J data use defining clonotypes clonotype_col Name column use storing clonotype IDs filter_chains Column(s) use filtering chains prior defining clonotypes (e.g. productive, full_length). column(s) must contain TRUE FALSE chain. NULL, chains used defining clonotypes. sep Separator used storing per cell V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"Single cell object data.frame added clonotype IDs","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"","code":"# Define clonotypes using the CDR3 nucleotide sequence res <- define_clonotypes(   vdj_so,   data_cols = \"cdr3_nt\" )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2   v_gene d_gene #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224 IGKV5-43   None #>                      j_gene c_gene chains isotype        cdr3 #> 1_AAACCTGAGTAGGTGC-1  IGKJ2   IGKC    IGK    None CQQSNSWPYTF #>                                                cdr3_nt reads umis #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054   70 #>                      productive full_length paired n_insertion n_deletion #> 1_AAACCTGAGTAGGTGC-1       TRUE        TRUE  FALSE           0          4 #>                      n_mismatch cdr3_length cdr3_nt_length n_chains #> 1_AAACCTGAGTAGGTGC-1          2          11             33        1 #>                      clonotype_id #> 1_AAACCTGAGTAGGTGC-1  clonotype16  # Define clonotypes based on the combination of the CDR3 nucleotide sequence # and the V and J genes res <- define_clonotypes(   vdj_sce,   data_cols = c(\"cdr3_nt\", \"v_gene\", \"j_gene\") )  head(res@colData, 1) #> DataFrame with 1 row and 27 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2      v_gene #>                             <factor> <numeric> <numeric> <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622    IGKV5-43 #>                           d_gene      j_gene      c_gene      chains #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        None       IGKJ2        IGKC         IGK #>                          isotype        cdr3                cdr3_nt #>                      <character> <character>            <character> #> 1_AAACCTGAGTAGGTGC-1        None CQQSNSWPYTF TGTCAACAGAGTAACAGCTG.. #>                            reads        umis  productive full_length #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        1054          70        TRUE        TRUE #>                         paired n_insertion  n_deletion  n_mismatch #>                      <logical> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1     FALSE           0           4           2 #>                      cdr3_length cdr3_nt_length  n_chains clonotype_id #>                      <character>    <character> <integer>  <character> #> 1_AAACCTGAGTAGGTGC-1          11             33         1  clonotype16  # Modify the name of the column used to store clonotype IDs res <- define_clonotypes(   vdj_so,   data_cols = \"cdr3_nt\",   clonotype_col = \"NEW_clonotype_id\" )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains NEW_clonotype_id #> 1_AAACCTGAGTAGGTGC-1        1      clonotype16  # When defining clonotypes only use chains that are productive res <- define_clonotypes(   vdj_sce,   data_cols = \"cdr3_nt\",   filter_chains = \"productive\" )  head(res@colData, 1) #> DataFrame with 1 row and 27 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2      v_gene #>                             <factor> <numeric> <numeric> <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622    IGKV5-43 #>                           d_gene      j_gene      c_gene      chains #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        None       IGKJ2        IGKC         IGK #>                          isotype        cdr3                cdr3_nt #>                      <character> <character>            <character> #> 1_AAACCTGAGTAGGTGC-1        None CQQSNSWPYTF TGTCAACAGAGTAACAGCTG.. #>                            reads        umis  productive full_length #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        1054          70        TRUE        TRUE #>                         paired n_insertion  n_deletion  n_mismatch #>                      <logical> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1     FALSE           0           4           2 #>                      cdr3_length cdr3_nt_length  n_chains clonotype_id #>                      <character>    <character> <integer>  <character> #> 1_AAACCTGAGTAGGTGC-1          11             33         1  clonotype16"},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj-package.html","id":null,"dir":"Reference","previous_headings":"","what":"djvdj: A collection of single-cell V(D)J tools — djvdj-package","title":"djvdj: A collection of single-cell V(D)J tools — djvdj-package","text":"djvdj provides range tools analyze single-cell V(D)J data.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"djvdj: A collection of single-cell V(D)J tools — djvdj-package","text":"Maintainer: Ryan Sheridan ryan.sheridan@cuanschutz.edu (ORCID) contributors: Jay Hesselberth jay.hesselberth@gmail.com [contributor] Rui Fu raysinensis@gmail.com [contributor] Kent Riemondy kent.riemondy@ucdenver.edu [contributor] RNA Bioscience Initiative [funder]","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for djvdj plotting functions — djvdj_theme","title":"Theme for djvdj plotting functions — djvdj_theme","text":"Theme djvdj plotting functions","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for djvdj plotting functions — djvdj_theme","text":"","code":"djvdj_theme(   ttl_size = 12,   txt_size = 8,   ln_size = 0.5,   txt_col = \"black\",   ln_col = \"grey85\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for djvdj plotting functions — djvdj_theme","text":"ttl_size Size axis titles txt_size Size axis text ln_size Size axis lines txt_col Color axis text ln_col Color axis lines","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme for djvdj plotting functions — djvdj_theme","text":"ggplot theme","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch V(D)J data from object — fetch_vdj","title":"Fetch V(D)J data from object — fetch_vdj","text":"Fetch per-chain V(D)J data object. Within object meta.data, row represents single cell can include information multiple chains. function can return data.frame row represents single chain. useful plotting per-chain metrics CDR3 length number insertions/deletions.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch V(D)J data from object — fetch_vdj","text":"","code":"fetch_vdj(   input,   data_cols = NULL,   clonotype_col = NULL,   filter_cells = FALSE,   per_cell = FALSE,   unnest = TRUE,   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch V(D)J data from object — fetch_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_cols meta.data columns containing per-chain V(D)J data unnest. NULL, V(D)J data automatically selected identifying columns NAs rows clonotype_col. clonotype_col meta.data column containing clonotype IDs. column used determine columns V(D)J data. clonotype_col data_cols NULL, columns included. filter_cells Remove cells V(D)J data, clonotype_col must provided determine cells filter. per_cell Return per-cell data instead per-chain data. unnest FALSE, nested data.frame returned row represents cell V(D)J data stored list-cols. TRUE, columns unnested row represents single chain. sep Separator used storing per cell V(D)J data. used identify columns containing per-chain data can unnested.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch V(D)J data from object — fetch_vdj","text":"data.frame containing V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch V(D)J data from object — fetch_vdj","text":"","code":"# Fetch per-chain V(D)J data fetch_vdj(vdj_so) #> # A tibble: 258 × 28 #>    .cell_id  orig.…¹ nCoun…² nFeat…³ RNA_s…⁴ seura…⁵ UMAP_1 UMAP_2 clono…⁶ #>    <chr>     <chr>     <dbl>   <int> <fct>   <fct>    <dbl>  <dbl> <chr>   #>  1 1_AAACCT… avid_1        1       1 1       1        2.56  -0.675 clonot… #>  2 1_AAACCT… avid_1        0       0 1       1       -3.40   6.84  clonot… #>  3 1_AAACCT… avid_1        0       0 1       1       -3.40   6.84  clonot… #>  4 1_AAACCT… avid_1        4       4 0       0        1.19  -2.11  clonot… #>  5 1_AAACCT… avid_1        4       4 0       0        1.19  -2.11  clonot… #>  6 1_AAACCT… avid_1        4       4 0       0        1.19  -2.11  clonot… #>  7 1_AAACCT… avid_1        9       8 0       0        0.137 -0.416 clonot… #>  8 1_AACGTT… avid_1        1       1 1       1       -0.914 -1.03  NA      #>  9 1_AATCGG… avid_1        1       1 1       1        3.09  -1.74  NA      #> 10 1_ACATCA… avid_1        2       2 0       0        2.22  -1.39  NA      #> # … with 248 more rows, 19 more variables: v_gene <chr>, d_gene <chr>, #> #   j_gene <chr>, c_gene <chr>, chains <chr>, isotype <chr>, cdr3 <chr>, #> #   cdr3_nt <chr>, reads <dbl>, umis <dbl>, productive <lgl>, #> #   full_length <lgl>, paired <lgl>, n_insertion <dbl>, n_deletion <dbl>, #> #   n_mismatch <dbl>, cdr3_length <dbl>, cdr3_nt_length <dbl>, #> #   n_chains <int>, and abbreviated variable names ¹​orig.ident, #> #   ²​nCount_RNA, ³​nFeature_RNA, ⁴​RNA_snn_res.0.3, ⁵​seurat_clusters, …  # To increase performance, specify which columns to return per-chain data, # per-cell data will be returned for all other columns fetch_vdj(   vdj_sce,   data_cols = c(\"chains\", \"n_insertion\") ) #> # A tibble: 258 × 28 #>    .cell_id  orig.…¹ nCoun…² nFeat…³ RNA_s…⁴ seura…⁵ UMAP_1 UMAP_2 clono…⁶ #>    <chr>     <chr>     <dbl>   <int> <fct>   <fct>    <dbl>  <dbl> <chr>   #>  1 1_AAACCT… avid_1        1       1 1       1        2.56  -0.675 clonot… #>  2 1_AAACCT… avid_1        0       0 1       1       -3.40   6.84  clonot… #>  3 1_AAACCT… avid_1        0       0 1       1       -3.40   6.84  clonot… #>  4 1_AAACCT… avid_1        4       4 0       0        1.19  -2.11  clonot… #>  5 1_AAACCT… avid_1        4       4 0       0        1.19  -2.11  clonot… #>  6 1_AAACCT… avid_1        4       4 0       0        1.19  -2.11  clonot… #>  7 1_AAACCT… avid_1        9       8 0       0        0.137 -0.416 clonot… #>  8 1_AACGTT… avid_1        1       1 1       1       -0.914 -1.03  NA      #>  9 1_AATCGG… avid_1        1       1 1       1        3.09  -1.74  NA      #> 10 1_ACATCA… avid_1        2       2 0       0        2.22  -1.39  NA      #> # … with 248 more rows, 19 more variables: v_gene <chr>, d_gene <chr>, #> #   j_gene <chr>, c_gene <chr>, chains <chr>, isotype <chr>, cdr3 <chr>, #> #   cdr3_nt <chr>, reads <chr>, umis <chr>, productive <chr>, #> #   full_length <chr>, paired <lgl>, n_insertion <dbl>, n_deletion <chr>, #> #   n_mismatch <chr>, cdr3_length <chr>, cdr3_nt_length <chr>, #> #   n_chains <int>, and abbreviated variable names ¹​orig.ident, #> #   ²​nCount_RNA, ³​nFeature_RNA, ⁴​RNA_snn_res.0.3, ⁵​seurat_clusters, …  # Only include cells that have V(D)J data # clonotype_col must be specified to identify cells with V(D)J data fetch_vdj(   vdj_so,   filter_cells = TRUE,   clonotype_col = \"clonotype_id\" ) #> # A tibble: 143 × 28 #>    .cell_id  orig.…¹ nCoun…² nFeat…³ RNA_s…⁴ seura…⁵ UMAP_1 UMAP_2 clono…⁶ #>    <chr>     <chr>     <dbl>   <int> <fct>   <fct>    <dbl>  <dbl> <chr>   #>  1 1_AAACCT… avid_1        1       1 1       1        2.56  -0.675 clonot… #>  2 1_AAACCT… avid_1        0       0 1       1       -3.40   6.84  clonot… #>  3 1_AAACCT… avid_1        0       0 1       1       -3.40   6.84  clonot… #>  4 1_AAACCT… avid_1        4       4 0       0        1.19  -2.11  clonot… #>  5 1_AAACCT… avid_1        4       4 0       0        1.19  -2.11  clonot… #>  6 1_AAACCT… avid_1        4       4 0       0        1.19  -2.11  clonot… #>  7 1_AAACCT… avid_1        9       8 0       0        0.137 -0.416 clonot… #>  8 1_ACCTTT… avid_1        4       4 0       0        1.13  -2.42  clonot… #>  9 1_ACCTTT… avid_1        4       4 0       0        1.13  -2.42  clonot… #> 10 1_ACCTTT… avid_1        4       4 0       0        1.13  -2.42  clonot… #> # … with 133 more rows, 19 more variables: v_gene <chr>, d_gene <chr>, #> #   j_gene <chr>, c_gene <chr>, chains <chr>, isotype <chr>, cdr3 <chr>, #> #   cdr3_nt <chr>, reads <dbl>, umis <dbl>, productive <lgl>, #> #   full_length <lgl>, paired <lgl>, n_insertion <dbl>, n_deletion <dbl>, #> #   n_mismatch <dbl>, cdr3_length <dbl>, cdr3_nt_length <dbl>, #> #   n_chains <int>, and abbreviated variable names ¹​orig.ident, #> #   ²​nCount_RNA, ³​nFeature_RNA, ⁴​RNA_snn_res.0.3, ⁵​seurat_clusters, …"},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter V(D)J data in object — filter_vdj","title":"Filter V(D)J data in object — filter_vdj","text":"Remove V(D)J data chains/cells satisfy provided condition","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter V(D)J data in object — filter_vdj","text":"","code":"filter_vdj(   input,   filt,   data_cols = NULL,   clonotype_col = \"clonotype_id\",   sep = \";\",   per_cell = FALSE )"},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter V(D)J data in object — filter_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. filt Condition use filtering V(D)J data. allow filtering per-chain V(D)J data, data cell converted vector, e.g. 'IGH;IGK' equivalent c('IGH', 'IGK'). allows R vector operations performed per-chain values. filtering condition must return TRUE/FALSE chain single TRUE/FALSE cell. Data can filtered based cell barcodes referring '.cell_id' column. data_cols meta.data columns containing V(D)J data use filtering. NULL, V(D)J data automatically selected identifying columns NAs rows clonotype_col. clonotype_col meta.data column containing clonotype IDs. column used determine columns contain V(D)J data. sep Separator used storing per cell V(D)J data. NULL, per_cell set TRUE. per_cell TRUE, per-chain data parsed values meta.data column filtered .","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter V(D)J data in object — filter_vdj","text":"Object filtered meta.data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter V(D)J data in object — filter_vdj","text":"","code":"# Only include V(D)J data for productive chains res <- filter_vdj(vdj_so, productive)  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains #> 1_AAACCTGAGTAGGTGC-1        1  # Only include V(D)J data for cells with paired chains res <- filter_vdj(vdj_sce, paired)  head(res@colData, 3) #> DataFrame with 3 rows and 27 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1      avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1      avid_1          4            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622           NA #> 1_AAACCTGAGTCAAGCG-1               1  -3.40268  6.838597           NA #> 1_AAACCTGCAGTTTACG-1               0   1.19011 -2.108460 clonotype537 #>                                      v_gene         d_gene #>                                 <character>    <character> #> 1_AAACCTGAGTAGGTGC-1                     NA             NA #> 1_AAACCTGAGTCAAGCG-1                     NA             NA #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGK.. None;None;None #>                                 j_gene         c_gene      chains #>                            <character>    <character> <character> #> 1_AAACCTGAGTAGGTGC-1                NA             NA          NA #> 1_AAACCTGAGTCAAGCG-1                NA             NA          NA #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK #>                          isotype                   cdr3 #>                      <character>            <character> #> 1_AAACCTGAGTAGGTGC-1          NA                     NA #> 1_AAACCTGAGTCAAGCG-1          NA                     NA #> 1_AAACCTGCAGTTTACG-1        IGHM CATLWYDAMDYW;CQQSNSW.. #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1                     NA          NA          NA #> 1_AAACCTGAGTCAAGCG-1                     NA          NA          NA #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGA.. 144;460;156     7;28;10 #>                          productive    full_length    paired n_insertion #>                         <character>    <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1             NA             NA        NA          NA #> 1_AAACCTGAGTCAAGCG-1             NA             NA        NA          NA #> 1_AAACCTGCAGTTTACG-1 TRUE;TRUE;TRUE TRUE;TRUE;TRUE      TRUE       4;0;0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1          NA          NA          NA             NA #> 1_AAACCTGAGTCAAGCG-1          NA          NA          NA             NA #> 1_AAACCTGCAGTTTACG-1       0;4;3       4;2;0    12;11;11       36;33;33 #>                       n_chains #>                      <integer> #> 1_AAACCTGAGTAGGTGC-1        NA #> 1_AAACCTGAGTCAAGCG-1        NA #> 1_AAACCTGCAGTTTACG-1         3  # Only include V(D)J data for cells with at least one heavy and one light chain res <- filter_vdj(   vdj_so,   \"IGH\" %in% chains && any(c(\"IGK\", \"IGL\") %in% chains) )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224         <NA> #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974         <NA> #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                                        v_gene         d_gene #> 1_AAACCTGAGTAGGTGC-1                     <NA>           <NA> #> 1_AAACCTGAGTCAAGCG-1                     <NA>           <NA> #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGKV3-2 None;None;None #>                                 j_gene         c_gene      chains isotype #> 1_AAACCTGAGTAGGTGC-1              <NA>           <NA>        <NA>    <NA> #> 1_AAACCTGAGTCAAGCG-1              <NA>           <NA>        <NA>    <NA> #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK    IGHM #>                                                      cdr3 #> 1_AAACCTGAGTAGGTGC-1                                 <NA> #> 1_AAACCTGAGTCAAGCG-1                                 <NA> #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW;CQQSNSWPYTF;CQQSKEVPRTF #>                                                                                                                       cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                                                                                     <NA> #> 1_AAACCTGAGTCAAGCG-1                                                                                                     <NA> #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGATGCTATGGACTACTGG;TGTCAACAGAGTAACAGCTGGCCGTACACGTTC;TGTCAGCAAAGTAAGGAGGTTCCTCGGACGTTC #>                            reads    umis     productive    full_length #> 1_AAACCTGAGTAGGTGC-1        <NA>    <NA>           <NA>           <NA> #> 1_AAACCTGAGTCAAGCG-1        <NA>    <NA>           <NA>           <NA> #> 1_AAACCTGCAGTTTACG-1 144;460;156 7;28;10 TRUE;TRUE;TRUE TRUE;TRUE;TRUE #>                      paired n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1     NA        <NA>       <NA>       <NA>        <NA> #> 1_AAACCTGAGTCAAGCG-1     NA        <NA>       <NA>       <NA>        <NA> #> 1_AAACCTGCAGTTTACG-1   TRUE       4;0;0      0;4;3      4;2;0    12;11;11 #>                      cdr3_nt_length n_chains #> 1_AAACCTGAGTAGGTGC-1           <NA>       NA #> 1_AAACCTGAGTCAAGCG-1           <NA>       NA #> 1_AAACCTGCAGTTTACG-1       36;33;33        3  # Only include V(D)J data for cells that have an IGH, IGK, and IGL chain res <- filter_vdj(   vdj_sce,   all(c(\"IGH\", \"IGK\", \"IGL\") %in% chains) )  head(res@colData, 1) #> DataFrame with 1 row and 27 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622           NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1          NA          NA          NA          NA #>                           chains     isotype        cdr3     cdr3_nt #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1          NA          NA          NA          NA #>                            reads        umis  productive full_length #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1          NA          NA          NA          NA #>                         paired n_insertion  n_deletion  n_mismatch #>                      <logical> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        NA          NA          NA          NA #>                      cdr3_length cdr3_nt_length  n_chains #>                      <character>    <character> <integer> #> 1_AAACCTGAGTAGGTGC-1          NA             NA        NA  # Only include V(D)J data for heavy chains res <- filter_vdj(vdj_so, chains == \"IGH\")  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224         <NA> #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974         <NA> #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                       v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1    <NA>   <NA>   <NA>   <NA>   <NA>    <NA> #> 1_AAACCTGAGTCAAGCG-1    <NA>   <NA>   <NA>   <NA>   <NA>    <NA> #> 1_AAACCTGCAGTTTACG-1 IGHV1-9   None  IGHJ4   IGHM    IGH    IGHM #>                              cdr3                              cdr3_nt #> 1_AAACCTGAGTAGGTGC-1         <NA>                                 <NA> #> 1_AAACCTGAGTCAAGCG-1         <NA>                                 <NA> #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW TGTGCAACTCTATGGTACGATGCTATGGACTACTGG #>                      reads umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1  <NA> <NA>       <NA>        <NA>     NA        <NA> #> 1_AAACCTGAGTCAAGCG-1  <NA> <NA>       <NA>        <NA>     NA        <NA> #> 1_AAACCTGCAGTTTACG-1   144    7       TRUE        TRUE   TRUE           4 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1       <NA>       <NA>        <NA>           <NA> #> 1_AAACCTGAGTCAAGCG-1       <NA>       <NA>        <NA>           <NA> #> 1_AAACCTGCAGTTTACG-1          0          4          12             36 #>                      n_chains #> 1_AAACCTGAGTAGGTGC-1       NA #> 1_AAACCTGAGTCAAGCG-1       NA #> 1_AAACCTGCAGTTTACG-1        3  # Remove chains that only have 1 UMI for support res <- filter_vdj(vdj_sce, umis > 1)  head(res@colData, 1) #> DataFrame with 1 row and 27 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains #>                      <integer> #> 1_AAACCTGAGTAGGTGC-1         1  # Filter based on cell barcode res <- filter_vdj(vdj_so, .cell_id == \"1_AAACCTGAGTAGGTGC-1\")  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974         <NA> #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603         <NA> #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #> 1_AAACCTGAGTCAAGCG-1     <NA>   <NA>   <NA>   <NA>   <NA>    <NA> #> 1_AAACCTGCAGTTTACG-1     <NA>   <NA>   <NA>   <NA>   <NA>    <NA> #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #> 1_AAACCTGAGTCAAGCG-1        <NA>                              <NA>  <NA> #> 1_AAACCTGCAGTTTACG-1        <NA>                              <NA>  <NA> #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #> 1_AAACCTGAGTCAAGCG-1 <NA>       <NA>        <NA>     NA        <NA> #> 1_AAACCTGCAGTTTACG-1 <NA>       <NA>        <NA>     NA        <NA> #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #> 1_AAACCTGAGTCAAGCG-1       <NA>       <NA>        <NA>           <NA> #> 1_AAACCTGCAGTTTACG-1       <NA>       <NA>        <NA>           <NA> #>                      n_chains #> 1_AAACCTGAGTAGGTGC-1        1 #> 1_AAACCTGAGTCAAGCG-1       NA #> 1_AAACCTGCAGTTTACG-1       NA"},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Import V(D)J data — import_vdj","title":"Import V(D)J data — import_vdj","text":"Import V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import V(D)J data — import_vdj","text":"","code":"import_vdj(   input = NULL,   vdj_dir = NULL,   prefix = \"\",   filter_chains = TRUE,   filter_paired = FALSE,   define_clonotypes = NULL,   include_mutations = FALSE,   aggr_dir = NULL,   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import V(D)J data — import_vdj","text":"input Object containing single cell data, set NULL data.frame containing V(D)J results returned vdj_dir Directory containing output cellranger vdj. vector named vector can given load data multiple runs. named vector given, cell barcodes prefixed provided names. mimics behavior Seurat::Read10X(). prefix Prefix add new columns filter_chains include chains least one productive full length contig. filter_paired include clonotypes paired chains. TCR data clonotype must least one TRA TRB chain, BCR data clonotype must least one IGH chain least one IGK IGL chain. define_clonotypes Define clonotype IDs based V(D)J data. useful V(D)J datasets loaded consistent clonotype IDs, .e., clonotype1 across samples. Possible values : 'cdr3aa', define clonotypes based CDR3 amino acid sequence 'cdr3nt', define clonotypes based CDR3 nucleotide sequence 'cdr3_gene', define clonotypes based combination CDR3 nucleotide sequence V(D)J genes. defining clonotypes, productive full length chains used. Set NULL (default) use clonotype IDs already present input data. include_mutations Include information number insertions/deletions/mismatches chain. requires concat_ref.bam file cellranger vdj present directory provided vdj_dir. include_mutations TRUE, filter_chains also automatically set TRUE since indel data available productive chains. aggr_dir Path cellranger aggr output. include mutation information chain, also provide paths original cellranger vdj output directories using vdj_dir argument. correctly match cell barcodes object, gene expression data sample must loaded order samples specified cellranger aggr config file. addition, loading mutation data, sample paths provided vdj_dir argument must also order samples specified cellranger aggr config file. sep Separator use storing per cell V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import V(D)J data — import_vdj","text":"Single cell object data.frame added V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import V(D)J data — import_vdj","text":"","code":"# Loading multiple datasets vdj_dir <- c(   system.file(\"extdata/bcr_1/outs\", package = \"djvdj\"),   system.file(\"extdata/bcr_2/outs\", package = \"djvdj\") )  vdj_so <- import_vdj(tiny_so, vdj_dir, include_mutations = FALSE) #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                      chains n_chains        cdr3 #> 1_AAACCTGAGTAGGTGC-1    IGK        1 CQQSNSWPYTF #>                                                cdr3_nt cdr3_length #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC          11 #>                      cdr3_nt_length   v_gene d_gene j_gene c_gene isotype #> 1_AAACCTGAGTAGGTGC-1             33 IGKV5-43   None  IGKJ2   IGKC    None #>                      reads umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1  1054   70       TRUE        TRUE  FALSE  # Specifying cell prefixes # if cell prefixes are not specified when loading multiple datasets, # prefixes will be automatically generated in a similar manner as # Seurat::Read10X vdj_so <- import_vdj(   tiny_so,   vdj_dir = vdj_dir,   include_mutations = FALSE ) #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                      chains n_chains        cdr3 #> 1_AAACCTGAGTAGGTGC-1    IGK        1 CQQSNSWPYTF #>                                                cdr3_nt cdr3_length #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC          11 #>                      cdr3_nt_length   v_gene d_gene j_gene c_gene isotype #> 1_AAACCTGAGTAGGTGC-1             33 IGKV5-43   None  IGKJ2   IGKC    None #>                      reads umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1  1054   70       TRUE        TRUE  FALSE  # Specifying cell prefixes using vector names # if a named vector is passed, the names will be used as the cell prefixes vdj_dir <- c(   \"1\" = system.file(\"extdata/bcr_1/outs\", package = \"djvdj\"),   \"2\" = system.file(\"extdata/bcr_2/outs\", package = \"djvdj\") )  vdj_so <- import_vdj(tiny_so, vdj_dir, include_mutations = FALSE) #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                      chains n_chains        cdr3 #> 1_AAACCTGAGTAGGTGC-1    IGK        1 CQQSNSWPYTF #>                                                cdr3_nt cdr3_length #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC          11 #>                      cdr3_nt_length   v_gene d_gene j_gene c_gene isotype #> 1_AAACCTGAGTAGGTGC-1             33 IGKV5-43   None  IGKJ2   IGKC    None #>                      reads umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1  1054   70       TRUE        TRUE  FALSE  # Only include V(D)J data for productive full length chains vdj_so <- import_vdj(   tiny_so,   vdj_dir = vdj_dir,   filter_chains = TRUE,   include_mutations = FALSE ) #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                      chains n_chains        cdr3 #> 1_AAACCTGAGTAGGTGC-1    IGK        1 CQQSNSWPYTF #>                                                cdr3_nt cdr3_length #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC          11 #>                      cdr3_nt_length   v_gene d_gene j_gene c_gene isotype #> 1_AAACCTGAGTAGGTGC-1             33 IGKV5-43   None  IGKJ2   IGKC    None #>                      reads umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1  1054   70       TRUE        TRUE  FALSE  # Only include V(D)J data for cells with paired chains vdj_so <- import_vdj(   tiny_so,   vdj_dir = vdj_dir,   filter_paired = TRUE,   include_mutations = FALSE ) #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224         <NA> #>                      chains n_chains cdr3 cdr3_nt cdr3_length #> 1_AAACCTGAGTAGGTGC-1   <NA>       NA <NA>    <NA>        <NA> #>                      cdr3_nt_length v_gene d_gene j_gene c_gene isotype #> 1_AAACCTGAGTAGGTGC-1           <NA>   <NA>   <NA>   <NA>   <NA>    <NA> #>                      reads umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1  <NA> <NA>       <NA>        <NA>     NA  # Defining clonotypes # this is useful if the original clonotype IDs are not consistent across # datasets, i.e. clonotype1 is not the same for all samples vdj_so <- import_vdj(   tiny_so,   vdj_dir = vdj_dir,   define_clonotypes = \"cdr3_gene\",   include_mutations = FALSE ) #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 chains n_chains #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224    IGK        1 #>                             cdr3                           cdr3_nt #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #>                      cdr3_length cdr3_nt_length   v_gene d_gene j_gene #> 1_AAACCTGAGTAGGTGC-1          11             33 IGKV5-43   None  IGKJ2 #>                      c_gene isotype reads umis productive full_length #> 1_AAACCTGAGTAGGTGC-1   IGKC    None  1054   70       TRUE        TRUE #>                      paired clonotype_id #> 1_AAACCTGAGTAGGTGC-1  FALSE  clonotype16  # Include mutation information for each chain # this information will be included if the file concat_ref.bam is present # including mutation information will cause data import to be slower vdj_so <- import_vdj(   tiny_so,   vdj_dir = vdj_dir,   include_mutations = TRUE ) #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id #> Warning: airr_rearrangement.tsv not found in /home/runner/work/_temp/Library/djvdj/extdata/bcr_1/outs. #> Warning: airr_rearrangement.tsv not found in /home/runner/work/_temp/Library/djvdj/extdata/bcr_2/outs. #> Warning: To add mutation data to object, concat_ref.bam and airr_rearrangement.tsv must be present for all samples, check that these files are in the provided directory paths, mutation data not added to object.  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                      chains n_chains        cdr3 #> 1_AAACCTGAGTAGGTGC-1    IGK        1 CQQSNSWPYTF #>                                                cdr3_nt cdr3_length #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC          11 #>                      cdr3_nt_length   v_gene d_gene j_gene c_gene isotype #> 1_AAACCTGAGTAGGTGC-1             33 IGKV5-43   None  IGKJ2   IGKC    None #>                      reads umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1  1054   70       TRUE        TRUE  FALSE  # Using import_vdj outside of Seurat # SingleCellExperiment objects are also compatible, or if an input object is # omitted, a data.frame containing the V(D)J data will be returned vdj_sce <- import_vdj(tiny_sce, vdj_dir) #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id  head(vdj_sce@colData, 1) #> DataFrame with 1 row and 24 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           chains  n_chains        cdr3 #>                      <character> <integer> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK         1 CQQSNSWPYTF #>                                     cdr3_nt cdr3_length cdr3_nt_length #>                                 <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..          11             33 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        None        1054          70        TRUE #>                      full_length    paired #>                      <character> <logical> #> 1_AAACCTGAGTAGGTGC-1        TRUE     FALSE  vdj_df <- import_vdj(vdj_dir = vdj_dir, include_mutations = FALSE) #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id #> Warning: The following named parsers don't match the column names: fwr1, fwr1_nt, cdr1, cdr1_nt, fwr2, fwr2_nt, cdr2, cdr2_nt, fwr3, fwr3_nt, fwr4, fwr4_nt, exact_subclonotype_id  head(vdj_df, 1) #>                     clonotype_id chains n_chains        cdr3 #> 1AAACCTGAGTAGGTGC-1   clonotype1    IGK        1 CQQSNSWPYTF #>                                               cdr3_nt cdr3_length #> 1AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC          11 #>                     cdr3_nt_length   v_gene d_gene j_gene c_gene isotype #> 1AAACCTGAGTAGGTGC-1             33 IGKV5-43   None  IGKJ2   IGKC    None #>                     reads umis productive full_length paired #> 1AAACCTGAGTAGGTGC-1  1054   70       TRUE        TRUE  FALSE"},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify object meta.data — mutate_meta","title":"Modify object meta.data — mutate_meta","text":"Modify object meta.data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify object meta.data — mutate_meta","text":"","code":"mutate_meta(input, fn, ...)"},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify object meta.data — mutate_meta","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. fn Function use modifying object meta.data. can either function, e.g. mean, purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE) \".x\" refers meta.data table. ... Additional arguments pass provided function","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify object meta.data — mutate_meta","text":"Object mutated meta.data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify object meta.data — mutate_meta","text":"","code":"# Sum two meta.data columns # all additional arguments provided to mutate_meta() are passed directly to # the function (in this case, dplyr::mutate()) res <- mutate_meta(   tiny_so,   dplyr::mutate,   NEW = nCount_RNA + nFeature_RNA )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 NEW #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   2  # Pass a purrr-style lambda # this produces the same result as the previous example res <- mutate_meta(   tiny_so,   ~ dplyr::mutate(.x, NEW = nCount_RNA + nFeature_RNA) )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 NEW #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   2  # Modify multiple meta.data columns res <- mutate_meta(   tiny_sce,   dplyr::mutate,   NEW_1 = nCount_RNA + nFeature_RNA,   NEW_2 = stringr::str_c(orig.ident, seurat_clusters) )  head(res@colData, 1) #> DataFrame with 1 row and 9 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2     NEW_1 #>                             <factor> <numeric> <numeric> <numeric> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622         2 #>                            NEW_2 #>                      <character> #> 1_AAACCTGAGTAGGTGC-1     avid_11  # Remove meta.data columns # any function can be passed to mutate_meta(), in this example # dplyr::select() is used to remove columns res <- mutate_meta(   tiny_so,   dplyr::select,   -UMAP_1 )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters     UMAP_2 #> 1_AAACCTGAGTAGGTGC-1               1 -0.6746224  # Perform grouped operations using dplyr # multi-line commands can be passed using brackets, just refer to the # meta.data with \".x\" # this calculates the mean number of features for each group in the # orig.ident meta.data column res <- mutate_meta(tiny_sce, ~ {   y <- dplyr::group_by(.x, orig.ident)   y <- dplyr::mutate(y, mean_genes = mean(nFeature_RNA))   y })  head(res@colData, 1) #> DataFrame with 1 row and 8 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 mean_genes #>                             <factor> <numeric> <numeric>  <numeric> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622       2.32"},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify V(D)J data in object — mutate_vdj","title":"Modify V(D)J data in object — mutate_vdj","text":"Modify per-chain V(D)J data cell. function offers greater flexibility summarize_vdj(), less user-friendly.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify V(D)J data in object — mutate_vdj","text":"","code":"mutate_vdj(   input,   ...,   clonotype_col = \"clonotype_id\",   data_cols = NULL,   return_df = FALSE,   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify V(D)J data in object — mutate_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. ... Name-value pairs use creating modifying per-chain V(D)J meta.data, e.g. mean_umis = mean(umis). allow modification per-chain V(D)J data, data cell converted vector, e.g. 'IGH;IGK' equivalent c('IGH', 'IGK'). allows R vector operations performed per-chain values. operations produce result greater length 1 need returned list(), e.g. new_col = umis + 1 return new value chain, prevent error must written new_col = list(umis + 1). clonotype_col meta.data column containing clonotype IDs. used identify columns containing V(D)J data. data_cols meta.data columns containing V(D)J data modify. NULL, data automatically selected identifying columns NAs rows clonotype_col. return_df Return results data.frame. FALSE, results added input object. sep Separator used storing per cell V(D)J data. NULL, columns containing V(D)J data converted vectors filtering.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify V(D)J data in object — mutate_vdj","text":"Object modified meta.data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify V(D)J data in object — mutate_vdj","text":"","code":"# Calculate mean reads and UMIs per cell res <- mutate_vdj(   vdj_so,   mean_umis  = mean(umis),   mean_reads = mean(reads) )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                                        v_gene         d_gene #> 1_AAACCTGAGTAGGTGC-1                 IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1      IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGKV3-2 None;None;None #>                                 j_gene         c_gene      chains isotype #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK    None #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK    None #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK    IGHM #>                                                      cdr3 #> 1_AAACCTGAGTAGGTGC-1                          CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1              CQQYNSYPYTF;CLQHGESPYTF #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW;CQQSNSWPYTF;CQQSKEVPRTF #>                                                                                                                       cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                                                        TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #> 1_AAACCTGAGTCAAGCG-1                                      TGTCAGCAATATAACAGCTATCCGTACACGTTC;TGTCTACAGCATGGTGAGAGCCCGTACACGTTC #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGATGCTATGGACTACTGG;TGTCAACAGAGTAACAGCTGGCCGTACACGTTC;TGTCAGCAAAGTAAGGAGGTTCCTCGGACGTTC #>                            reads    umis     productive    full_length #> 1_AAACCTGAGTAGGTGC-1        1054      70           TRUE           TRUE #> 1_AAACCTGAGTCAAGCG-1     570;234   31;17      TRUE;TRUE      TRUE;TRUE #> 1_AAACCTGCAGTTTACG-1 144;460;156 7;28;10 TRUE;TRUE;TRUE TRUE;TRUE;TRUE #>                      paired n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1  FALSE           0          4          2          11 #> 1_AAACCTGAGTCAAGCG-1  FALSE         0;0        4;4        0;0       11;11 #> 1_AAACCTGCAGTTTACG-1   TRUE       4;0;0      0;4;3      4;2;0    12;11;11 #>                      cdr3_nt_length n_chains mean_umis mean_reads #> 1_AAACCTGAGTAGGTGC-1             33        1        70  1054.0000 #> 1_AAACCTGAGTCAAGCG-1          33;33        2        24   402.0000 #> 1_AAACCTGCAGTTTACG-1       36;33;33        3        15   253.3333  # Calculate the total number of insertions + deletions for each chain # we have to wrap our expression in list() since a value is returned for # each chain res <- mutate_vdj(   vdj_sce,   indels = list(n_insertion + n_deletion) )  head(res@colData, 3) #> DataFrame with 3 rows and 28 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1      avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1      avid_1          4            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1  -3.40268  6.838597 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0   1.19011 -2.108460 clonotype537 #>                                      v_gene         d_gene #>                                 <character>    <character> #> 1_AAACCTGAGTAGGTGC-1               IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1    IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGK.. None;None;None #>                                 j_gene         c_gene      chains #>                            <character>    <character> <character> #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK #>                          isotype                   cdr3 #>                      <character>            <character> #> 1_AAACCTGAGTAGGTGC-1        None            CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1        None CQQYNSYPYTF;CLQHGESP.. #> 1_AAACCTGCAGTTTACG-1        IGHM CATLWYDAMDYW;CQQSNSW.. #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #> 1_AAACCTGAGTCAAGCG-1 TGTCAGCAATATAACAGCTA..     570;234       31;17 #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGA.. 144;460;156     7;28;10 #>                          productive    full_length    paired n_insertion #>                         <character>    <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1           TRUE           TRUE     FALSE           0 #> 1_AAACCTGAGTCAAGCG-1      TRUE;TRUE      TRUE;TRUE     FALSE         0;0 #> 1_AAACCTGCAGTTTACG-1 TRUE;TRUE;TRUE TRUE;TRUE;TRUE      TRUE       4;0;0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #> 1_AAACCTGAGTCAAGCG-1         4;4         0;0       11;11          33;33 #> 1_AAACCTGCAGTTTACG-1       0;4;3       4;2;0    12;11;11       36;33;33 #>                       n_chains      indels #>                      <integer> <character> #> 1_AAACCTGAGTAGGTGC-1         1           4 #> 1_AAACCTGAGTCAAGCG-1         2         4;4 #> 1_AAACCTGCAGTTTACG-1         3       4;4;3  # Create a new column showing the unique chains for each cell res <- mutate_vdj(   vdj_so,   unique_chains = stringr::str_c(unique(chains), collapse = \"_\") )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                                        v_gene         d_gene #> 1_AAACCTGAGTAGGTGC-1                 IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1      IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGKV3-2 None;None;None #>                                 j_gene         c_gene      chains isotype #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK    None #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK    None #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK    IGHM #>                                                      cdr3 #> 1_AAACCTGAGTAGGTGC-1                          CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1              CQQYNSYPYTF;CLQHGESPYTF #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW;CQQSNSWPYTF;CQQSKEVPRTF #>                                                                                                                       cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                                                        TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #> 1_AAACCTGAGTCAAGCG-1                                      TGTCAGCAATATAACAGCTATCCGTACACGTTC;TGTCTACAGCATGGTGAGAGCCCGTACACGTTC #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGATGCTATGGACTACTGG;TGTCAACAGAGTAACAGCTGGCCGTACACGTTC;TGTCAGCAAAGTAAGGAGGTTCCTCGGACGTTC #>                            reads    umis     productive    full_length #> 1_AAACCTGAGTAGGTGC-1        1054      70           TRUE           TRUE #> 1_AAACCTGAGTCAAGCG-1     570;234   31;17      TRUE;TRUE      TRUE;TRUE #> 1_AAACCTGCAGTTTACG-1 144;460;156 7;28;10 TRUE;TRUE;TRUE TRUE;TRUE;TRUE #>                      paired n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1  FALSE           0          4          2          11 #> 1_AAACCTGAGTCAAGCG-1  FALSE         0;0        4;4        0;0       11;11 #> 1_AAACCTGCAGTTTACG-1   TRUE       4;0;0      0;4;3      4;2;0    12;11;11 #>                      cdr3_nt_length n_chains unique_chains #> 1_AAACCTGAGTAGGTGC-1             33        1           IGK #> 1_AAACCTGAGTCAAGCG-1          33;33        2           IGK #> 1_AAACCTGCAGTTTACG-1       36;33;33        3       IGH_IGK  # Determine which cells have both an IGK and IGL chain res <- mutate_vdj(   vdj_sce,   both_light = all(c(\"IGK\", \"IGL\") %in% chains) )  head(res@colData, 1) #> DataFrame with 1 row and 28 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains both_light #>                      <integer>  <logical> #> 1_AAACCTGAGTAGGTGC-1         1      FALSE  # Determine which cells have multiple light chains res <- mutate_vdj(   vdj_so,   multi_light = sum(chains %in% c(\"IGK\", \"IGL\")) > 1 )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                                        v_gene         d_gene #> 1_AAACCTGAGTAGGTGC-1                 IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1      IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGKV3-2 None;None;None #>                                 j_gene         c_gene      chains isotype #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK    None #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK    None #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK    IGHM #>                                                      cdr3 #> 1_AAACCTGAGTAGGTGC-1                          CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1              CQQYNSYPYTF;CLQHGESPYTF #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW;CQQSNSWPYTF;CQQSKEVPRTF #>                                                                                                                       cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                                                        TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #> 1_AAACCTGAGTCAAGCG-1                                      TGTCAGCAATATAACAGCTATCCGTACACGTTC;TGTCTACAGCATGGTGAGAGCCCGTACACGTTC #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGATGCTATGGACTACTGG;TGTCAACAGAGTAACAGCTGGCCGTACACGTTC;TGTCAGCAAAGTAAGGAGGTTCCTCGGACGTTC #>                            reads    umis     productive    full_length #> 1_AAACCTGAGTAGGTGC-1        1054      70           TRUE           TRUE #> 1_AAACCTGAGTCAAGCG-1     570;234   31;17      TRUE;TRUE      TRUE;TRUE #> 1_AAACCTGCAGTTTACG-1 144;460;156 7;28;10 TRUE;TRUE;TRUE TRUE;TRUE;TRUE #>                      paired n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1  FALSE           0          4          2          11 #> 1_AAACCTGAGTCAAGCG-1  FALSE         0;0        4;4        0;0       11;11 #> 1_AAACCTGCAGTTTACG-1   TRUE       4;0;0      0;4;3      4;2;0    12;11;11 #>                      cdr3_nt_length n_chains multi_light #> 1_AAACCTGAGTAGGTGC-1             33        1       FALSE #> 1_AAACCTGAGTCAAGCG-1          33;33        2        TRUE #> 1_AAACCTGCAGTTTACG-1       36;33;33        3        TRUE"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clonal_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clonotype abundance — plot_clonal_abundance","title":"Plot clonotype abundance — plot_clonal_abundance","text":"Plot clonotype abundance","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clonal_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clonotype abundance — plot_clonal_abundance","text":"","code":"plot_clonal_abundance(   input,   cluster_col = NULL,   clonotype_col = \"clonotype_id\",   method = \"bar\",   units = \"percent\",   plot_colors = NULL,   plot_lvls = names(plot_colors),   n_clones = NULL,   label_aes = list(),   panel_nrow = NULL,   panel_scales = \"free_x\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clonal_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clonotype abundance — plot_clonal_abundance","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. cluster_col meta.data column containing cluster IDs use grouping cells calculating clonotype abundance. Clonotypes plotted separately cluster. clonotype_col meta.data column containing clonotype IDs use calculating clonotype abundance method Method use plotting, 'bar' generate bargraph, 'line' generate rank-abundance plot. units Units plot y-axis, either 'frequency' 'percent' plot_colors Character vector containing colors plotting plot_lvls Character vector containing levels ordering n_clones Number top clonotypes plot (default 10). method set 'line', specify number clonotypes label (default 3). label_aes Named list providing additional aesthetics (color, size, etc.) clonotype labels creating line graph panel_nrow number rows use arranging plot panels, use separate bar graphs created cell cluster panel_scales scales plot panels fixed free. passes scales specification ggplot2::facet_wrap, can 'fixed', 'free', 'free_x', 'free_y'. 'fixed' cause panels share scales. Use separate bar graphs created cell cluster. ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clonal_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot clonotype abundance — plot_clonal_abundance","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clonal_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot clonotype abundance — plot_clonal_abundance","text":"","code":"# Plot clonotype abundance using all cells plot_clonal_abundance(   vdj_so,   data_col = \"clonotype_id\" ) #> Warning: Ignoring unknown parameters: data_col   # Plot clonotype abundance separately for each cell cluster plot_clonal_abundance(   vdj_sce,   cluster_col = \"orig.ident\" )   # Plot the frequency of each clonotype instead of percentage plot_clonal_abundance(   vdj_sce,   cluster_col = \"orig.ident\",   units = \"frequency\" )   # Specify colors to use for each cell cluster plot_clonal_abundance(   vdj_so,   cluster_col = \"orig.ident\",   plot_colors = c(avid_1 = \"blue\", avid_2 = \"red\") )   # Specify order to use for plotting cell clusters plot_clonal_abundance(   vdj_sce,   cluster_col = \"orig.ident\",   plot_lvls = c(\"avid_2\", \"avid_1\") )   # Specify the number of top clonotypes to plot plot_clonal_abundance(   vdj_so,   n_clones = 5 )   #' # Create line graph # use n_clones to set the number of clonotypes to label plot_clonal_abundance(   vdj_so,   cluster_col = \"orig.ident\",   method = \"line\",   n_clones = 3 )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot repertoire diversity — plot_diversity","title":"Plot repertoire diversity — plot_diversity","text":"Plot repertoire diversity","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot repertoire diversity — plot_diversity","text":"","code":"plot_diversity(   input,   data_col,   cluster_col = NULL,   group_col = NULL,   method = abdiv::simpson,   downsample = FALSE,   n_boots = 1,   chain = NULL,   chain_col = \"chains\",   plot_colors = NULL,   plot_lvls = names(plot_colors),   panel_nrow = NULL,   panel_scales = \"free\",   sep = \";\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot repertoire diversity — plot_diversity","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating diversity, e.g. 'clonotype_id' cluster_col meta.data column containing cluster IDs use grouping cells calculating clonotype abundance group_col meta.data column use grouping clusters present cluster_col method Function use calculating diversity, e.g. abdiv::simpson. named list functions can passed plot multiple diversity metrics, e.g. list(simpson = abdiv::simpson, shannon = abdiv::shannon) downsample Downsample clusters size calculating diversity metrics n_boots Number bootstrap replicates use calculating standard error chain Chain use calculating diversity. Set NULL include chains. chain_col meta.data column containing chains cell plot_colors Character vector containing colors plotting plot_lvls Character vector containing levels ordering panel_nrow number rows use arranging plot panels panel_scales scales plot panels fixed free. passes scales specification ggplot2::facet_wrap, can 'fixed', 'free', 'free_x', 'free_y'. 'fixed' cause panels share scales. sep Separator used storing per-chain V(D)J data cell ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot repertoire diversity — plot_diversity","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot repertoire diversity — plot_diversity","text":"","code":"# Plot diversity using all cells plot_diversity(   vdj_so,   data_col = \"clonotype_id\" )   # Specify method to use for calculating repertoire diversity plot_diversity(   vdj_sce,   data_col = \"clonotype_id\",   method   = abdiv::shannon )   # Plot diversity separately for each cell cluster plot_diversity(   vdj_so,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\" )   # Plot multiple diversity metrics plot_diversity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   method      = list(simpson = abdiv::simpson, shannon = abdiv::shannon) )   # Specify colors to use for each cell cluster plot_diversity(   vdj_so,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   plot_colors = c(avid_2 = \"green\", avid_1 = \"purple\") )   # Specify order to use for plotting cell clusters plot_diversity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   plot_lvls   = c(\"avid_2\", \"avid_1\") )   # Specify how to organize facets when plotting multiple metrics  mets <- list(   simpson = abdiv::simpson,   shannon = abdiv::shannon )  plot_diversity(   vdj_so,   data_col   = \"clonotype_id\",   method     = mets,   panel_nrow = 2 )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 2D feature plot — plot_features","title":"Create 2D feature plot — plot_features","text":"Create scatter plot cells colored based provided feature. can used create dimensional reduction plots (e.g. UMAP, tSNE, PCA) compare different cell attributes (e.g. CD4 vs CD8 expression). plot_vdj_feature() allows per-chain V(D)J data summarized plotted cell.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 2D feature plot — plot_features","text":"","code":"plot_features(input, ...)  # S3 method for default plot_features(   input,   feature = NULL,   x = \"UMAP_1\",   y = \"UMAP_2\",   group_col = NULL,   plot_colors = NULL,   plot_lvls = names(plot_colors),   trans = \"identity\",   min_q = NULL,   max_q = NULL,   panel_nrow = NULL,   panel_scales = \"fixed\",   na_color = \"grey80\",   ... )  # S3 method for Seurat plot_features(   input,   feature = NULL,   x = \"UMAP_1\",   y = \"UMAP_2\",   group_col = NULL,   data_slot = \"data\",   plot_colors = NULL,   plot_lvls = names(plot_colors),   trans = \"identity\",   min_q = NULL,   max_q = NULL,   panel_nrow = NULL,   panel_scales = \"fixed\",   na_color = \"grey80\",   ... )  plot_vdj_feature(input, ...)  # S3 method for default plot_vdj_feature(   input,   data_col,   x = \"UMAP_1\",   y = \"UMAP_2\",   group_col = NULL,   summary_fn = NULL,   chain = NULL,   plot_colors = NULL,   plot_lvls = names(plot_colors),   trans = \"identity\",   min_q = NULL,   max_q = NULL,   panel_nrow = NULL,   panel_scales = \"fixed\",   na_color = \"grey80\",   chain_col = \"chains\",   sep = \";\",   ... )  # S3 method for Seurat plot_vdj_feature(   input,   data_col,   x = \"UMAP_1\",   y = \"UMAP_2\",   group_col = NULL,   data_slot = \"data\",   summary_fn = NULL,   chain = NULL,   plot_colors = NULL,   plot_lvls = names(plot_colors),   trans = \"identity\",   min_q = NULL,   max_q = NULL,   panel_nrow = NULL,   panel_scales = \"fixed\",   na_color = \"grey80\",   chain_col = \"chains\",   sep = \";\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create 2D feature plot — plot_features","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc. feature Variable use coloring points x Variable plot x-axis y Variable plot y-axis group_col meta.data column use splitting plot panels plot_colors Vector colors use plotting plot_lvls Levels use ordering feature trans Transformation use coloring cells continuous variable, e.g. 'log10'. default values transformed, refer ggplot2::continuous_scale() options. min_q Minimum quantile cutoff color scale. max_q Maximum quantile cutoff color scale. panel_nrow number rows use arranging plot panels panel_scales scales plot panels fixed free. passes scales specification ggplot2::facet_wrap, can 'fixed', 'free', 'free_x', 'free_y'. 'fixed' cause panels share scales. na_color Color use missing values data_slot Slot Seurat object pull data data_col meta.data column containing V(D)J data use coloring cells summary_fn Function use summarizing values cell, possible values can either function, e.g. mean, purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE) \".x\" refers column. NULL, mean calculated numeric values, non-numeric columns combined single string. chain Chain(s) use filtering data plotting. NULL data filtered based chain. chain_col meta.data column containing chains cell sep Separator used storing per-chain V(D)J data cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 2D feature plot — plot_features","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 2D feature plot — plot_features","text":"","code":"# Create UMAP with cells colored based on sample name plot_features(   tiny_so,   feature = \"orig.ident\" )   # Compare UMI counts for each cell with number of genes detected plot_features(   tiny_sce,   feature = \"orig.ident\",   x = \"nFeature_RNA\",   y = \"nCount_RNA\" )   # Plot average CDR3 length for each cell for light chains plot_vdj_feature(   vdj_so,   data_col = \"cdr3_length\",   summary_fn = mean,   chain = c(\"IGK\", \"IGL\") )   # Plot median number of insertions for each cell plot_vdj_feature(   vdj_sce,   data_col = \"n_insertion\",   summary_fn = stats::median )   # Using a lambda function to summarize values # use \".x\" to refer to values in the column # this calculates the mean number of deletions for each cell and # log10-transforms the result plot_vdj_feature(   vdj_so,   data_col = \"n_deletion\",   summary_fn = ~ log10(mean(.x) + 1) )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot frequency of cell groups/labels present in the object — plot_frequency","title":"Plot frequency of cell groups/labels present in the object — plot_frequency","text":"Plot frequency cell label present provided meta.data column. useful comparing proportion cells belonging different samples, cell types, isotypes, etc. compare clonotype abundance, use plot_clonal_abundance() function.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot frequency of cell groups/labels present in the object — plot_frequency","text":"","code":"plot_frequency(   input,   data_col,   cluster_col = NULL,   group_col = NULL,   units = \"percent\",   stack = TRUE,   plot_colors = NULL,   plot_lvls = NULL,   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot frequency of cell groups/labels present in the object — plot_frequency","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing cell labels use calculating frequency, e.g. cell types, isotypes, etc. function designed plot clonal abundance, use plot_clonal_abundance() function purpose. cluster_col meta.data column containing cluster IDs (patients, treatment conditions, etc.) use calculating frequency. Calculations performed separately cluster. group_col meta.data column use grouping cluster IDs present cluster_col. useful multiple replicates patients treatment condition. units Units plot y-axis, either 'frequency' 'percent' stack TRUE, stacked bargraphs generated. plot_colors Character vector containing colors plotting plot_lvls Character vector containing levels ordering ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot frequency of cell groups/labels present in the object — plot_frequency","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot V(D)J segment usage — plot_gene_usage","title":"Plot V(D)J segment usage — plot_gene_usage","text":"Plot V(D)J segment usage","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot V(D)J segment usage — plot_gene_usage","text":"","code":"plot_gene_usage(   input,   data_cols,   cluster_col = NULL,   group_col = NULL,   chain = NULL,   method = NULL,   plot_colors = NULL,   vdj_genes = NULL,   n_genes = 20,   plot_lvls = names(plot_colors),   trans = \"identity\",   units = \"percent\",   chain_col = \"chains\",   sep = \";\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot V(D)J segment usage — plot_gene_usage","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. data_cols meta.data column containing genes clonotype, provide vector two column names plot paired usage genes cluster_col meta.data column containing cell clusters use calculating gene usage group_col meta.data column use grouping cluster IDs present cluster_col. useful multiple replicates patients treatment condition. chain Chain use calculating gene usage, set NULL include chains method Method use plotting, possible values : 'bar', create bargraph, default single column passed data_cols argument 'heatmap', create heatmap, default two columns passed data_cols argument 'circos', create circos plot, requires two columns provided data_cols argument plot_colors Character vector containing colors use plot. bar graph created specify color cell clusters. heatmap, colors used generate color gradient. vdj_genes V(D)J genes plot, NULL top genes shown n_genes Number top genes plot based usage. cluster_col provided, top genes identified cluster. plot_lvls Levels use ordering clusters trans Transformation use plotting segment usage, e.g. 'log10'. default values transformed, refer ggplot2::continuous_scale() options. units Units plot y-axis, either 'frequency' 'percent' chain_col meta.data column containing chains cell sep Separator used storing per-chain V(D)J data cell ... Additional arguments pass plotting function, ggplot2::geom_col() bargraph, ggplot2::geom_tile() heatmap, circlize::chordDiagram() circos plot","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot V(D)J segment usage — plot_gene_usage","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot V(D)J segment usage — plot_gene_usage","text":"","code":"# Plot V(D)J segment usage for all cells plot_gene_usage(   vdj_so,   data_cols = \"v_gene\" )   # Plot gene usage separately for cell clusters plot_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   cluster_col = \"orig.ident\" )   # Plot gene usage for a specific chain plot_gene_usage(   vdj_so,   data_cols = \"v_gene\",   chain = c(\"IGH\", \"IGK\") )   # Plot gene usage for a specific chain plot_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   chain = c(\"IGH\", \"IGK\") )   # Create a heatmap plot_gene_usage(   vdj_so,   data_cols = \"v_gene\",   type = \"heatmap\" ) #> Warning: Ignoring unknown parameters: type   # Plot paired usage of V(D)J segments plot_gene_usage(   vdj_sce,   data_cols = c(\"v_gene\", \"j_gene\"),   type = \"circos\" ) #> Warning: Ignoring unknown parameters: type   # Specify colors to use for each cell cluster plot_gene_usage(   vdj_so,   data_cols = \"v_gene\",   cluster_col = \"orig.ident\",   plot_colors = c(avid_2 = \"blue\", avid_1 = \"green\") )   # Specify order to use for plotting cell clusters plot_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   cluster_col = \"orig.ident\",   plot_lvls = c(\"avid_2\", \"avid_1\") )   # Specify certain V(D)J genes to include in plot plot_gene_usage(   vdj_so,   data_cols = \"v_gene\",   vdj_genes = c(\"IGKV5-43\", \"IGLV1\", \"IGHV1-64\") )   # Specify the number of top V(D)J genes to include in plot plot_gene_usage(   vdj_sce,   data_cols = \"v_gene\",   n_genes = 10 )   # Plot the frequency of each V(D)J segment instead of percent plot_gene_usage(   vdj_so,   data_cols = \"v_gene\",   units = \"frequency\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_mds.html","id":null,"dir":"Reference","previous_headings":"","what":"Create MDS plot — plot_mds","title":"Create MDS plot — plot_mds","text":"Perform multidimensional scaling plot results","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_mds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create MDS plot — plot_mds","text":"","code":"plot_mds(   input,   data_col,   cluster_col,   method = abdiv::jaccard,   chain = NULL,   chain_col = \"chains\",   plot_colors = NULL,   plot_lvls = names(plot_colors),   label_points = TRUE,   sep = \";\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_mds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create MDS plot — plot_mds","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating pairwise similarity clusters, e.g. 'clonotype_id' cluster_col meta.data column containing cluster IDs use calculating overlap method Method use comparing clusters calculating MDS coordinates, available methods include: 'jaccard', Jaccard dissimilarity index implemented abdiv::jaccard() 'horn_morisita', Horn-Morisita index implemented abdiv::horn_morisita() chain Chain use calculating gene usage. Set NULL include chains. chain_col meta.data column containing chains cell plot_colors Character vector containing colors plotting plot_lvls Levels use ordering clusters label_points Label points plot sep Separator used storing per-chain V(D)J data cell ... Additional arguments pass ggplot2::geom_point()","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sequence logos for clusters — plot_motifs","title":"Create sequence logos for clusters — plot_motifs","text":"Create sequence logos clusters","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sequence logos for clusters — plot_motifs","text":"","code":"plot_motifs(   input,   data_col = \"cdr3\",   cluster_col = NULL,   chain,   plot_colors = NULL,   plot_lvls = names(plot_colors),   chain_col = \"chains\",   width = 0.75,   align_end = \"5\",   panel_nrow = NULL,   sep = \";\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_motifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create sequence logos for clusters — plot_motifs","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing sequences use plotting. cluster_col meta.data column containing cluster IDs use grouping cells. chain Chain use clustering CDR3 sequences. Cells one provided chain excluded analysis. plot_colors Character vector containing colors plotting plot_lvls Character vector containing levels ordering chain_col meta.data column containing chains cell. width Integer specifying many residues include, sequences longer width get trimmed based align_end argument, sequences shorter width get removed. fraction provided, width cutoff set based percent rank, .e. value 0.75 select width least 75% sequences longer cutoff. align_end End use aligning sequences, specify '5' '3' align sequences 5' 3' end plotting. panel_nrow number rows use arranging plot panels sep Separator used storing per cell V(D)J data ... Additional parameters pass ggseqlogo::geom_logo()","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_rarefaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Create rarefaction curve — plot_rarefaction","title":"Create rarefaction curve — plot_rarefaction","text":"Create rarefaction curve","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_rarefaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create rarefaction curve — plot_rarefaction","text":"","code":"plot_rarefaction(   input,   data_col,   cluster_col = NULL,   method = \"richness\",   n_boots = 50,   chain = NULL,   chain_col = \"chains\",   plot_colors = NULL,   plot_lvls = names(plot_colors),   panel_nrow = NULL,   panel_scales = \"free\",   ci_alpha = 0.15,   sep = \";\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_rarefaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create rarefaction curve — plot_rarefaction","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating diversity cluster_col meta.data column containing cluster IDs use grouping cells calculating clonotype abundance method Method use calculating diversity n_boots Number bootstrap replicates use calculating standard error chain Chain use calculating diversity. Set NULL include chains. chain_col meta.data column containing chains cell plot_colors Character vector containing colors plotting plot_lvls Character vector containing levels ordering panel_nrow number rows use arranging plot panels panel_scales scales plot panels fixed free. passes scales specification ggplot2::facet_wrap, can 'fixed', 'free', 'free_x', 'free_y'. 'fixed' cause panels share scales. ci_alpha Transparency use plotting 95% confidence interval sep Separator used storing per-chain V(D)J data cell ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_rarefaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create rarefaction curve — plot_rarefaction","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cluster similarity — plot_similarity","title":"Plot cluster similarity — plot_similarity","text":"Plot cluster similarity","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cluster similarity — plot_similarity","text":"","code":"plot_similarity(   input,   data_col,   cluster_col,   group_col = NULL,   method = abdiv::jaccard,   chain = NULL,   chain_col = \"chains\",   plot_colors = NULL,   plot_lvls = names(plot_colors),   cluster_heatmap = TRUE,   remove_upper_triangle = FALSE,   remove_diagonal = remove_upper_triangle,   sep = \";\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cluster similarity — plot_similarity","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing values use calculating pairwise similarity clusters, e.g. 'clonotype_id' cluster_col meta.data column containing cluster IDs use calculating overlap group_col meta.data column use grouping cluster IDs present cluster_col. useful multiple replicates patients treatment condition. method Method use comparing clusters, possible values : function takes two numeric vectors containing counts clonotype object, beta diversity functions provided abdiv package. generate heatmap. 'count', count number clonotypes overlapping cluster, generate heatmap. 'circos', create circos plot summarizing overlap clusters chain Chain use calculating gene usage. Set NULL include chains. chain_col meta.data column containing chains cell plot_colors Character vector containing colors plotting plot_lvls Levels use ordering clusters cluster_heatmap FALSE, rows columns heatmap clustered. remove_upper_triangle TRUE, upper triangle heatmap shown. remove_diagonal TRUE, diagonal heatmap shown. sep Separator used storing per-chain V(D)J data cell ... Additional arguments pass plotting function, ComplexHeatmap::Heatmap() heatmap, circlize::chordDiagram() circos plot","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot cluster similarity — plot_similarity","text":"","code":"# Plot repertoire overlap # use clonotype IDs present in 'clonotype_id' column for calculations plot_similarity(   vdj_so,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\" )   # Specify method to use for calculating repertoire overlap plot_similarity(   vdj_sce,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   method      = abdiv::morisita )   # Specify colors to use for heatmap plot_similarity(   vdj_so,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   plot_color  = c(\"white\", \"red\") )   # Create circos plot plot_similarity(   vdj_so,   data_col    = \"clonotype_id\",   cluster_col = \"orig.ident\",   method      = \"circos\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot continuous V(D)J data — plot_vdj","title":"Plot continuous V(D)J data — plot_vdj","text":"Plot continuous V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot continuous V(D)J data — plot_vdj","text":"","code":"plot_vdj(   input,   data_col,   per_cell = FALSE,   summary_fn = mean,   cluster_col = NULL,   group_col = NULL,   chain = NULL,   method = \"histogram\",   units = \"frequency\",   plot_colors = NULL,   plot_lvls = names(plot_colors),   trans = \"identity\",   panel_nrow = NULL,   panel_scales = \"free_x\",   chain_col = \"chains\",   sep = \";\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot continuous V(D)J data — plot_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column(s) containing continuous V(D)J data plot per_cell values plotted per cell, .e. data point represent one cell. TRUE, values summarized cell using summary_fn. FALSE, values plotted chain. summary_fn Function use summarizing values per_cell TRUE, possible values can either function, e.g. mean, purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE) '.x' refers column. NULL, mean calculated. cluster_col meta.data column containing cluster IDs use grouping cells plotting group_col meta.dats column use grouping clusters present cluster_col chain Chain(s) use filtering data plotting. NULL data filtered based chain. method Method use plotting, possible values : 'histogram' 'density' 'boxplot' 'violin' units Units use y-axis method set 'histogram'. Use 'frequency' show number values 'percent' show percentage total values. plot_colors Character vector specifying colors use cell clusters specified cluster_col. cluster_col NULL, plot colors can directly modified ggplot2 parameters color fill, e.g. fill = \"red\", color = \"black\" plot_lvls Character vector containing order use plotting cell clusters specified cluster_col trans Transformation use plotting data, e.g. 'log10'. default values transformed, refer ggplot2::continuous_scale() options. panel_nrow number rows use arranging plot panels panel_scales scales plot panels fixed free. passes scales specification ggplot2::facet_wrap, can 'fixed', 'free', 'free_x', 'free_y'. 'fixed' cause panels share scales. chain_col meta.data column containing chains cell sep Separator used storing per-chain V(D)J data cell ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot continuous V(D)J data — plot_vdj","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot continuous V(D)J data — plot_vdj","text":"","code":"# Create histogram plot_vdj(   vdj_sce,   data_col = \"reads\" ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Create boxplots plot_vdj(   vdj_sce,   data_col = \"reads\",   method = \"boxplot\" )   # Pass additional arguments to ggplot2 plot_vdj(   vdj_so,   data_col = \"reads\",   color = \"red\",   bins = 25 )   # Compare cell clusters plot_vdj(   vdj_sce,   data_col = \"cdr3_length\",   cluster_col = \"orig.ident\",   method = \"violin\" )   # log10 transform the axis plot_vdj(   vdj_so,   data_col = \"reads\",   cluster_col = \"orig.ident\",   trans = \"log10\" ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Express y-axis units as percent of total values plot_vdj(   vdj_sce,   data_col = \"umis\",   cluster_col = \"orig.ident\",   units = \"percent\" ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Only plot values for heavy chains plot_vdj(   vdj_so,   data_col = \"umis\",   chain = \"IGH\" ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Plot the median number of reads for each cell plot_vdj(   vdj_sce,   data_col = \"reads\",   per_cell = TRUE,   summary_fn = stats::median ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Set colors for cell clusters plot_vdj(   vdj_so,   data_col = \"cdr3_length\",   cluster_col = \"orig.ident\",   plot_colors = c(avid_1 = \"red\", avid_2 = \"purple\") ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Set order to use for plotting cell clusters plot_vdj(   vdj_sce,   data_col = \"cdr3_length\",   cluster_col = \"orig.ident\",   plot_lvls = c(\"avid_2\", \"avid_1\"),   method = \"boxplot\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize V(D)J data for each cell — summarize_vdj","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"Summarize per-chain values cell using function purrr-style lambda. useful plotting filtering cells based V(D)J meta.data.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"","code":"summarize_vdj(   input,   data_cols,   fn = NULL,   ...,   chain = NULL,   chain_col = \"chains\",   sep = \";\",   col_names = \"{.col}\",   return_df = FALSE )"},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_cols meta.data column(s) containing V(D)J data summarize cell fn Function apply selected column, possible values can either function, e.g. mean, purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE). NULL, mean calculated numeric values, non-numeric columns combined single string. ... Additional arguments pass fn chain Chain use summarizing V(D)J data chain_col meta.data column(s) containing chains cell sep Separator used storing per cell V(D)J data col_names glue specification describes name output columns, use {.col} refer original column name. col_names NULL, original column names used. return_df Return results data.frame. FALSE, results added input object.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"Object containing V(D)J data summarized cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"","code":"# Summarize numeric columns # by default the mean will be calculated for numeric columns res <- summarize_vdj(   vdj_so,   data_cols = c(\"n_deletion\", \"n_insertion\") )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                                        v_gene         d_gene #> 1_AAACCTGAGTAGGTGC-1                 IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1      IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGKV3-2 None;None;None #>                                 j_gene         c_gene      chains isotype #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK    None #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK    None #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK    IGHM #>                                                      cdr3 #> 1_AAACCTGAGTAGGTGC-1                          CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1              CQQYNSYPYTF;CLQHGESPYTF #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW;CQQSNSWPYTF;CQQSKEVPRTF #>                                                                                                                       cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                                                        TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #> 1_AAACCTGAGTCAAGCG-1                                      TGTCAGCAATATAACAGCTATCCGTACACGTTC;TGTCTACAGCATGGTGAGAGCCCGTACACGTTC #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGATGCTATGGACTACTGG;TGTCAACAGAGTAACAGCTGGCCGTACACGTTC;TGTCAGCAAAGTAAGGAGGTTCCTCGGACGTTC #>                            reads    umis     productive    full_length #> 1_AAACCTGAGTAGGTGC-1        1054      70           TRUE           TRUE #> 1_AAACCTGAGTCAAGCG-1     570;234   31;17      TRUE;TRUE      TRUE;TRUE #> 1_AAACCTGCAGTTTACG-1 144;460;156 7;28;10 TRUE;TRUE;TRUE TRUE;TRUE;TRUE #>                      paired n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1  FALSE    0.000000   4.000000          2          11 #> 1_AAACCTGAGTCAAGCG-1  FALSE    0.000000   4.000000        0;0       11;11 #> 1_AAACCTGCAGTTTACG-1   TRUE    1.333333   2.333333      4;2;0    12;11;11 #>                      cdr3_nt_length n_chains #> 1_AAACCTGAGTAGGTGC-1             33        1 #> 1_AAACCTGAGTCAAGCG-1          33;33        2 #> 1_AAACCTGCAGTTTACG-1       36;33;33        3  # Specifying a different summary function # this calculates the median number of insertions and deletions for each # cell res <- summarize_vdj(   vdj_sce,   data_cols = c(\"n_deletion\", \"n_insertion\"),   fn = stats::median )  head(res@colData, 3) #> DataFrame with 3 rows and 27 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1      avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1      avid_1          4            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1  -3.40268  6.838597 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0   1.19011 -2.108460 clonotype537 #>                                      v_gene         d_gene #>                                 <character>    <character> #> 1_AAACCTGAGTAGGTGC-1               IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1    IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGK.. None;None;None #>                                 j_gene         c_gene      chains #>                            <character>    <character> <character> #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK #>                          isotype                   cdr3 #>                      <character>            <character> #> 1_AAACCTGAGTAGGTGC-1        None            CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1        None CQQYNSYPYTF;CLQHGESP.. #> 1_AAACCTGCAGTTTACG-1        IGHM CATLWYDAMDYW;CQQSNSW.. #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #> 1_AAACCTGAGTCAAGCG-1 TGTCAGCAATATAACAGCTA..     570;234       31;17 #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGA.. 144;460;156     7;28;10 #>                          productive    full_length    paired n_insertion #>                         <character>    <character> <logical>   <numeric> #> 1_AAACCTGAGTAGGTGC-1           TRUE           TRUE     FALSE           0 #> 1_AAACCTGAGTCAAGCG-1      TRUE;TRUE      TRUE;TRUE     FALSE           0 #> 1_AAACCTGCAGTTTACG-1 TRUE;TRUE;TRUE TRUE;TRUE;TRUE      TRUE           0 #>                      n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                       <numeric> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1          4           2          11             33 #> 1_AAACCTGAGTCAAGCG-1          4         0;0       11;11          33;33 #> 1_AAACCTGCAGTTTACG-1          3       4;2;0    12;11;11       36;33;33 #>                       n_chains #>                      <integer> #> 1_AAACCTGAGTAGGTGC-1         1 #> 1_AAACCTGAGTCAAGCG-1         2 #> 1_AAACCTGCAGTTTACG-1         3  # Summarize values for a specific chain res <- summarize_vdj(   vdj_so,   data_cols = c(\"n_deletion\", \"n_insertion\"),   chain = \"IGK\" )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                                        v_gene         d_gene #> 1_AAACCTGAGTAGGTGC-1                 IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1      IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGKV3-2 None;None;None #>                                 j_gene         c_gene      chains isotype #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK    None #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK    None #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK    IGHM #>                                                      cdr3 #> 1_AAACCTGAGTAGGTGC-1                          CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1              CQQYNSYPYTF;CLQHGESPYTF #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW;CQQSNSWPYTF;CQQSKEVPRTF #>                                                                                                                       cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                                                        TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #> 1_AAACCTGAGTCAAGCG-1                                      TGTCAGCAATATAACAGCTATCCGTACACGTTC;TGTCTACAGCATGGTGAGAGCCCGTACACGTTC #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGATGCTATGGACTACTGG;TGTCAACAGAGTAACAGCTGGCCGTACACGTTC;TGTCAGCAAAGTAAGGAGGTTCCTCGGACGTTC #>                            reads    umis     productive    full_length #> 1_AAACCTGAGTAGGTGC-1        1054      70           TRUE           TRUE #> 1_AAACCTGAGTCAAGCG-1     570;234   31;17      TRUE;TRUE      TRUE;TRUE #> 1_AAACCTGCAGTTTACG-1 144;460;156 7;28;10 TRUE;TRUE;TRUE TRUE;TRUE;TRUE #>                      paired n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1  FALSE           0        4.0          2          11 #> 1_AAACCTGAGTCAAGCG-1  FALSE           0        4.0        0;0       11;11 #> 1_AAACCTGCAGTTTACG-1   TRUE           0        3.5      4;2;0    12;11;11 #>                      cdr3_nt_length n_chains #> 1_AAACCTGAGTAGGTGC-1             33        1 #> 1_AAACCTGAGTCAAGCG-1          33;33        2 #> 1_AAACCTGCAGTTTACG-1       36;33;33        3  # Specifying new names for summarized columns # use {.col} to refer to the original column name res <- summarize_vdj(   vdj_sce,   data_cols = c(\"n_deletion\", \"n_insertion\"),   fn = stats::median,   col_names = \"median_{.col}\" )  head(res@colData, 1) #> DataFrame with 1 row and 29 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains median_n_deletion median_n_insertion #>                      <integer>         <numeric>          <numeric> #> 1_AAACCTGAGTAGGTGC-1         1                 4                  0  # Return a data.frame instead of adding the results to the input object res <- summarize_vdj(   vdj_so,   data_cols = c(\"n_deletion\", \"n_insertion\"),   return_df = TRUE )  head(res, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains #> 1_AAACCTGAGTAGGTGC-1        1  # Using a lambda function to summarize values # use '.x' to refer to values in the column # this creates a new column showing the unique chains for each cell res <- summarize_vdj(   vdj_sce,   data_cols = \"chains\",   fn = ~ paste0(unique(.x), collapse = \"_\"),   col_names = \"unique_chains\" )  head(res@colData, 3) #> DataFrame with 3 rows and 28 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1      avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1      avid_1          4            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1  -3.40268  6.838597 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0   1.19011 -2.108460 clonotype537 #>                                      v_gene         d_gene #>                                 <character>    <character> #> 1_AAACCTGAGTAGGTGC-1               IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1    IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGK.. None;None;None #>                                 j_gene         c_gene      chains #>                            <character>    <character> <character> #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK #>                          isotype                   cdr3 #>                      <character>            <character> #> 1_AAACCTGAGTAGGTGC-1        None            CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1        None CQQYNSYPYTF;CLQHGESP.. #> 1_AAACCTGCAGTTTACG-1        IGHM CATLWYDAMDYW;CQQSNSW.. #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #> 1_AAACCTGAGTCAAGCG-1 TGTCAGCAATATAACAGCTA..     570;234       31;17 #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGA.. 144;460;156     7;28;10 #>                          productive    full_length    paired n_insertion #>                         <character>    <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1           TRUE           TRUE     FALSE           0 #> 1_AAACCTGAGTCAAGCG-1      TRUE;TRUE      TRUE;TRUE     FALSE         0;0 #> 1_AAACCTGCAGTTTACG-1 TRUE;TRUE;TRUE TRUE;TRUE;TRUE      TRUE       4;0;0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #> 1_AAACCTGAGTCAAGCG-1         4;4         0;0       11;11          33;33 #> 1_AAACCTGCAGTTTACG-1       0;4;3       4;2;0    12;11;11       36;33;33 #>                       n_chains unique_chains #>                      <integer>   <character> #> 1_AAACCTGAGTAGGTGC-1         1           IGK #> 1_AAACCTGAGTCAAGCG-1         2           IGK #> 1_AAACCTGCAGTTTACG-1         3       IGH_IGK  # Creating an index column to use for filtering/plotting # this creates a column indicating which cells have no insertions # the V(D)J data can be filtered based on this new column res <- summarize_vdj(   vdj_so,   data_cols = \"n_insertion\",   fn = ~ all(.x == 0),   col_names = \"no_insertions\" )  res <- filter_vdj(   res,   filt = no_insertions )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603         <NA> #>                                   v_gene    d_gene      j_gene    c_gene #> 1_AAACCTGAGTAGGTGC-1            IGKV5-43      None       IGKJ2      IGKC #> 1_AAACCTGAGTCAAGCG-1 IGKV6-15;IGKV14-126 None;None IGKJ2;IGKJ2 IGKC;IGKC #> 1_AAACCTGCAGTTTACG-1                <NA>      <NA>        <NA>      <NA> #>                       chains isotype                    cdr3 #> 1_AAACCTGAGTAGGTGC-1     IGK    None             CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1 IGK;IGK    None CQQYNSYPYTF;CLQHGESPYTF #> 1_AAACCTGCAGTTTACG-1    <NA>    <NA>                    <NA> #>                                                                                  cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                   TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #> 1_AAACCTGAGTCAAGCG-1 TGTCAGCAATATAACAGCTATCCGTACACGTTC;TGTCTACAGCATGGTGAGAGCCCGTACACGTTC #> 1_AAACCTGCAGTTTACG-1                                                                <NA> #>                        reads  umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1    1054    70       TRUE        TRUE  FALSE #> 1_AAACCTGAGTCAAGCG-1 570;234 31;17  TRUE;TRUE   TRUE;TRUE  FALSE #> 1_AAACCTGCAGTTTACG-1    <NA>  <NA>       <NA>        <NA>     NA #>                      n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1           0          4          2          11 #> 1_AAACCTGAGTCAAGCG-1         0;0        4;4        0;0       11;11 #> 1_AAACCTGCAGTTTACG-1        <NA>       <NA>       <NA>        <NA> #>                      cdr3_nt_length n_chains no_insertions #> 1_AAACCTGAGTAGGTGC-1             33        1          TRUE #> 1_AAACCTGAGTCAAGCG-1          33;33        2          TRUE #> 1_AAACCTGCAGTTTACG-1           <NA>       NA            NA"},{"path":"https://rnabioco.github.io/djvdj/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"A tiny SingleCellExperiment object — tiny_sce","title":"A tiny SingleCellExperiment object — tiny_sce","text":"tiny SingleCellExperiment object","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tiny SingleCellExperiment object — tiny_sce","text":"","code":"tiny_sce"},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_sce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A tiny SingleCellExperiment object — tiny_sce","text":"SingleCellExperiment object 200 features, 204 cells, 1 assay","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_so.html","id":null,"dir":"Reference","previous_headings":"","what":"A tiny Seurat object — tiny_so","title":"A tiny Seurat object — tiny_so","text":"tiny Seurat object","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_so.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tiny Seurat object — tiny_so","text":"","code":"tiny_so"},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_so.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A tiny Seurat object — tiny_so","text":"Seurat object 200 features, 204 cells, 1 assay","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","title":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","text":"tiny SingleCellExperiment object V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","text":"","code":"vdj_sce"},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_sce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","text":"SingleCellExperiment object 200 features, 204 cells, 1 assay","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_so.html","id":null,"dir":"Reference","previous_headings":"","what":"A tiny Seurat object with V(D)J data — vdj_so","title":"A tiny Seurat object with V(D)J data — vdj_so","text":"tiny Seurat object V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_so.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tiny Seurat object with V(D)J data — vdj_so","text":"","code":"vdj_so"},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_so.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A tiny Seurat object with V(D)J data — vdj_so","text":"Seurat object 200 features, 204 cells, 1 assay","code":""},{"path":"https://rnabioco.github.io/djvdj/news/index.html","id":"djvdj-0009000","dir":"Changelog","previous_headings":"","what":"djvdj 0.0.0.9000","title":"djvdj 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
