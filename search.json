[{"path":"https://rnabioco.github.io/djvdj/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Ryan M. Sheridan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rnabioco.github.io/djvdj/articles/avid.html","id":"import-vdj-data","dir":"Articles","previous_headings":"","what":"Import V(D)J data","title":"V(D)J analysis","text":"import_vdj() takes output files Cell Ranger adds clonotype information meta.data existing Seurat SingleCellExperiment object. cells multiple chains, information chain stored single row, separated semi-colon. cells V(D)J sequencing data, NAs added meta.data. Seurat object contains data multiple runs, vector containing paths cellranger vdj output files sample can given. multiple runs included object, cell barcodes commonly contain unique prefix sample. cell prefixes can specified using cell_prefix argument.  Take look meta.data see V(D)J data added object.","code":"# Packages library(djvdj) library(Seurat) library(here) library(tibble) library(purrr) library(dplyr) library(ggplot2) library(cowplot)  # Create vector of paths pointing to cellranger output paths <- here(\"data/avid/bcr/outs\")  so_avid <- import_vdj(   input         = so_avid,                  # Seurat object   vdj_dir       = paths,                    # cellranger directories   filter_chains = TRUE,                     # Only include productive chains   filter_paired = FALSE                     # Only include clonotypes with paired chains ) so_avid@meta.data %>%   as_tibble() %>%   select(19:35) #> # A tibble: 7,137 × 17 #>    clonotype_id chains  n_chains cdr3   cdr3_nt cdr3_length cdr3_nt_length #>    <chr>        <chr>      <int> <chr>  <chr>   <chr>       <chr>          #>  1 clonotype91  IGH;IGK        2 CVKGY… TGTGTG… 14;10       42;30          #>  2 NA           NA            NA NA     NA      NA          NA             #>  3 clonotype92  IGH;IGK        2 CARGR… TGTGCA… 13;11       39;33          #>  4 NA           NA            NA NA     NA      NA          NA             #>  5 NA           NA            NA NA     NA      NA          NA             #>  6 NA           NA            NA NA     NA      NA          NA             #>  7 NA           NA            NA NA     NA      NA          NA             #>  8 clonotype94  IGH;IGK        2 CTVSY… TGTACC… 14;11       42;33          #>  9 clonotype95  IGH;IGK        2 CARSY… TGTGCA… 17;11       51;33          #> 10 clonotype96  IGH;IGK        2 CARSR… TGTGCA… 9;11        27;33          #> # … with 7,127 more rows, and 10 more variables: v_gene <chr>, #> #   d_gene <chr>, j_gene <chr>, c_gene <chr>, isotype <chr>, reads <chr>, #> #   umis <chr>, productive <chr>, full_length <chr>, paired <lgl>"},{"path":"https://rnabioco.github.io/djvdj/articles/avid.html","id":"clonotype-abundance","dir":"Articles","previous_headings":"","what":"Clonotype Abundance","title":"V(D)J analysis","text":"identify top clonotypes sample cluster, clonotype abundance can calculated using calc_abundance() function. calculations can performed per-cluster per-sample basis also providing meta.data column containing cell labels.  ‘calc’ function provided djvdj, matching ‘plot’ function generate summary plot. plot_abundance() function plot clonotypes ranked abundance. expected see MD4 B cells share clonotype.","code":"so_avid <- calc_frequency(   input       = so_avid,   cluster_col = \"mouse\",                  # Column containing cell clusters to compare   data_col    = \"clonotype_id\"            # Column containing clonotype IDs to use ) clrs <- c(   BL6 = \"#E69F00\",   MD4 = \"#56B4E9\" )  plot_clonal_abundance(   input       = so_avid,   cluster_col = \"mouse\",                   # Column containing cell clusters to compare   n_clones    = 10,                        # Number of top clonotypes to plot   type        = \"bar\",                     # Type of plot, 'bar' or 'line'   plot_colors = clrs )"},{"path":"https://rnabioco.github.io/djvdj/articles/avid.html","id":"repertoire-diversity","dir":"Articles","previous_headings":"","what":"Repertoire Diversity","title":"V(D)J analysis","text":"function calc_diversity() calculate repertoire diversity based number cells share clonotype. cluster_col argument can used group cells based meta.data column prior calculating diversity. calc_diversity() uses R package abdiv performing diversity calculations abdiv diversity function can specified using method argument. important read abdiv documentation ensure selected function appropriate analysis. Possible methods calculating diversity include:  example calculating Shannon diversity sample orig.ident meta.data column.  plot_diversity() function create plots summarizing repertoire diversity sample. named list functions can also passed plot multiple metrics. Two different metrics shown example . expected, BL6 B cells diverse repertoire, MD4 cells restricted repertoire.","code":"[1] \"berger_parker_d\"  \"brillouin_d\"      \"dominance\"         [4] \"heip_e\"           \"invsimpson\"       \"kempton_taylor_q\"  [7] \"margalef\"         \"mcintosh_d\"       \"mcintosh_e\"       [10] \"menhinick\"        \"pielou_e\"         \"richness\"         [13] \"shannon\"          \"simpson\"          \"simpson_e\"        [16] \"strong\" so_avid <- calc_diversity(   input       = so_avid,   cluster_col = \"mouse\",                    # Column containing cell clusters to compare   method      = abdiv::shannon              # abdiv method to use ) # Metrics to plot fns <- list(   \"simpson\"  = abdiv::simpson,   \"mcintosh\" = abdiv::mcintosh_d )  plot_diversity(   input       = so_avid,   cluster_col = \"mouse\",                    # Column containing cell clusters to compare   method      = fns,                        # abdiv method to use   plot_colors = c(\"#E69F00\", \"#56B4E9\") )"},{"path":"https://rnabioco.github.io/djvdj/articles/avid.html","id":"repertoire-overlap","dir":"Articles","previous_headings":"","what":"Repertoire Overlap","title":"V(D)J analysis","text":"compare repertoires different samples clusters, calc_similarity() can calculate variety different similarity metrics. cluster_col argument used specify meta.data column containing cell groups use comparison. Like calc_diversity(), abdiv function can specified method argument. important read abdiv documentation ensure selected function appropriate analysis. Possible methods calculating repertoire similarity include:  default calc_similarity() add new meta.data column comparison. example calculating jaccard dissimilarity index combinations clusters present seurat_clusters column.  heatmap summarizing results can generated using plot_similarity() function. Values closer 1 indicate minimal overlap clusters.","code":"[1] \"binomial_deviance\"                   [2] \"bray_curtis\"                         [3] \"bray_curtis_balanced\"                [4] \"bray_curtis_gradient\"                [5] \"canberra\"                            [6] \"chebyshev\"                           [7] \"chord\"                               [8] \"clark_coefficient_of_divergence\"     [9] \"correlation_distance\"               [10] \"cosine_distance\"                    [11] \"cy_dissimilarity\"                   [12] \"euclidean\"                          [13] \"geodesic_metric\"                    [14] \"hamming\"                            [15] \"hellinger\"                          [16] \"horn_morisita\"                      [17] \"jaccard\"                            [18] \"jaccard_nestedness\"                 [19] \"jaccard_turnover\"                   [20] \"kulczynski_first\"                   [21] \"kulczynski_second\"                  [22] \"kullback_leibler_divergence\"        [23] \"manhattan\"                          [24] \"mean_character_difference\"          [25] \"minkowski\"                          [26] \"modified_mean_character_difference\" [27] \"morisita\"                           [28] \"rms_distance\"                       [29] \"rogers_tanimoto\"                    [30] \"russel_rao\"                         [31] \"ruzicka\"                            [32] \"ruzicka_balanced\"                   [33] \"ruzicka_gradient\"                   [34] \"sokal_michener\"                     [35] \"sokal_sneath\"                       [36] \"sorenson\"                           [37] \"sorenson_nestedness\"                [38] \"sorenson_turnover\"                  [39] \"weighted_kulczynski_second\"         [40] \"yule_dissimilarity\" so_avid <- calc_similarity(   input       = so_avid,   cluster_col = \"seurat_clusters\",          # Column containing cell clusters to compare   method      = abdiv::jaccard              # abdiv method to use ) plot_similarity(   input       = so_avid,   cluster_col = \"seurat_clusters\",          # Column containing cell clusters to compare   method      = abdiv::jaccard,             # abdiv method to use   plot_colors = \"#009E73\",   color       = \"white\"                     # Additional ggplot options )"},{"path":"https://rnabioco.github.io/djvdj/articles/avid.html","id":"gene-usage","dir":"Articles","previous_headings":"","what":"Gene Usage","title":"V(D)J analysis","text":"V(D)J data imported Cell Ranger also includes V(D)J identified chain. function calc_gene_usage() calculate fraction cells expressing V(D)J gene produce table summarizing results. chain argument can used specify chain(s) use calculating gene usage, default results chains included. example summarizing usage different V segments IGH chain  function plot_gene_usage() can used visualize gene usage across clusters. Using yaxis argument, percentage cells (percent) total number cells (frequency) expressing gene can shown. number top genes (frequent) plot can also specified n_genes.   passing multiple columns gene_cols, frequency V-J gene pairings can also summarized. example looking IGK chains.  multiple gene columns passed plot_gene_usage(), list plots returned, one cluster cluster_col column.","code":"calc_gene_usage(   input       = so_avid,   gene_cols   = \"v_gene\",                   # Column containing genes   cluster_col = \"mouse\",                    # Column containing cell clusters to compare   chain       = \"IGH\",                      # Chain to calculate gene usage for   chain_col   = \"chains\"                    # Column containing chains ) #> # A tibble: 192 × 5 #>    v_gene   mouse n_cells  freq    pct #>    <chr>    <chr>   <dbl> <int>  <dbl> #>  1 IGHV1-11 BL6      3694     2 0.0541 #>  2 IGHV1-11 MD4       126     0 0      #>  3 IGHV1-12 BL6      3694    27 0.731  #>  4 IGHV1-12 MD4       126     0 0      #>  5 IGHV1-15 BL6      3694    75 2.03   #>  6 IGHV1-15 MD4       126     0 0      #>  7 IGHV1-18 BL6      3694    82 2.22   #>  8 IGHV1-18 MD4       126     0 0      #>  9 IGHV1-19 BL6      3694    59 1.60   #> 10 IGHV1-19 MD4       126     0 0      #> # … with 182 more rows plot_gene_usage(   input       = so_avid,   gene_cols   = \"v_gene\",                   # Column(s) containing genes   type        = \"bar\",                      # Type of plot, 'heatmap' or 'bar'   chain       = \"IGH\",                      # Chain to plot   n_genes     = 50,                         # The number of top genes to plot   plot_colors = \"#0072B2\" ) calc_gene_usage(   input       = so_avid,   gene_cols   = c(\"v_gene\", \"j_gene\"),      # Column(s) containing genes   cluster_col = \"mouse\",                    # Column containing cell clusters to compare   chain       = \"IGK\"                       # Chain to plot ) ggs <- plot_gene_usage(   input       = so_avid,   gene_cols   = c(\"v_gene\", \"j_gene\"),      # Column(s) containing genes   cluster_col = \"mouse\",                    # Column containing cell clusters to compare   chain       = \"IGK\",                      # Chain to plot   plot_colors = \"#6A51A3\",   n_genes     = 20 )  plot_grid(plotlist = ggs)"},{"path":"https://rnabioco.github.io/djvdj/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ryan Sheridan. Author, maintainer. Jay Hesselberth. Contributor. Rui Fu. Contributor. Kent Riemondy. Contributor. . Funder.","code":""},{"path":"https://rnabioco.github.io/djvdj/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sheridan R (2022). djvdj: collection single-cell V(D)J tools. https://rnabioco.github.io/djvdj, https://github.com/rnabioco/djvdj.","code":"@Manual{,   title = {djvdj: A collection of single-cell V(D)J tools},   author = {Ryan Sheridan},   year = {2022},   note = {https://rnabioco.github.io/djvdj, https://github.com/rnabioco/djvdj}, }"},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"djvdj-","dir":"","previous_headings":"","what":"A collection of single-cell V(D)J tools","title":"A collection of single-cell V(D)J tools","text":"djvdj package provides range tools analyze manipulate single cell V(D)J sequencing data. tools straightforward easily integrate standard Seurat workflow. work progress, please report bugs opening new issue.","code":""},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A collection of single-cell V(D)J tools","text":"can install development version djvdj GitHub :","code":"devtools::install_github(\"rnabioco/djvdj\")"},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"import","dir":"","previous_headings":"","what":"Import","title":"A collection of single-cell V(D)J tools","text":"djvdj can import V(D)J sequencing results Cell Ranger add data Seurat SingleCellExperiment object using import_vdj(). Additional functions provided filter modify (filter_vdj(), mutate_vdj(), summarize_vdj()) object based V(D)J metrics including chains, clonotypes, CDR3 sequences.","code":"# Import VDJ data # A vector of paths can be provided to load multiple datasets # If prefixes were added to the cell barcodes when the object was generated, # include these as the vector names paths <- c(   KI_DN3_GE = \"data/tcr/KI_DN3_TCR/outs\",   KI_DN4_GE = \"data/tcr/KI_DN4_TCR/outs\",   WT_DN3_GE = \"data/tcr/WT_DN3_TCR/outs\",   WT_DN4_GE = \"data/tcr/WT_DN4_TCR/outs\" )  so_tcr <- import_vdj(   input         = so_tcr,                     # Seurat object   vdj_dir       = paths,                      # Cellranger output directories   filter_paired = FALSE                       # Only include clonotypes with paired chains )"},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"calculate","dir":"","previous_headings":"","what":"Calculate","title":"A collection of single-cell V(D)J tools","text":"djvdj allows calculate range population diversity similarity metrics implemented abdiv package. function calc_diversity() can used measure diversity per-cluster per-sample basis allow comparison across conditions. calc_similarity() measure repertoire overlap clusters samples allow direct comparisons cells interest. Additional functions also available calculate clonotype abundances V(D)J gene usage (calc_abundance(), calc_gene_usage()).","code":"so_tcr <- calc_diversity(   input       = so_tcr,                       # Seurat object   cluster_col = \"orig.ident\",                 # Column containing cell clusters to compare   method      = abdiv::simpson                # Diversity metric to use )"},{"path":"https://rnabioco.github.io/djvdj/index.html","id":"plot","dir":"","previous_headings":"","what":"Plot","title":"A collection of single-cell V(D)J tools","text":"‘calc’ function, djvdj also provides corresponding ‘plot’ function summarize results.","code":"# Compare the usage of different V and J genes ggs <- plot_gene_usage(   input       = so_tcr,                       # Seurat object   gene_cols   = c(\"v_gene\", \"j_gene\"),        # Column(s) containing V(D)J genes to plot   cluster_col = \"orig.ident\",                 # Column containing cell clusters to compare   chain       = \"TRB\"                         # Chain to plot )  cowplot::plot_grid(plotlist = ggs)"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate repertoire diversity — calc_diversity","title":"Calculate repertoire diversity — calc_diversity","text":"Calculate repertoire diversity","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate repertoire diversity — calc_diversity","text":"","code":"calc_diversity(   input,   cluster_col = NULL,   method = abdiv::simpson,   clonotype_col = \"clonotype_id\",   n_boots = 100,   prefix = \"\",   return_df = FALSE )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate repertoire diversity — calc_diversity","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. cluster_col meta.data column containing cluster IDs use grouping cells calculating diversity. cluster_col omitted, diversity index calculated using cells. method Method use calculating diversity. named list can also passed use multiple methods. names specify names output columns. clonotype_col meta.data column containing clonotype IDs use calculating diversity n_boots Number bootstrap replicates prefix Prefix add new columns return_df Return results data.frame. set FALSE, results added input object.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate repertoire diversity — calc_diversity","text":"Single cell object data.frame diversity metrics","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate repertoire diversity — calc_diversity","text":"","code":"# Calculate diversity using all cells res <- calc_diversity(   vdj_so,   method = abdiv::simpson )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains simpson_diversity simpson_stderr #> 1_AAACCTGAGTAGGTGC-1        1         0.8112612     0.04175533  # Group cells based on meta.data column before calculating diversity res <- calc_diversity(   vdj_sce,   cluster_col = \"orig.ident\" )  head(res@colData, 1) #> DataFrame with 1 row and 29 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains simpson_diversity simpson_stderr #>                      <integer>         <numeric>      <numeric> #> 1_AAACCTGAGTAGGTGC-1         1          0.816568      0.0527628  # Add a prefix to the new columns # this is useful if multiple diversity calculations are stored in the # meta.data res <- calc_diversity(   vdj_so,   prefix = \"bcr_\" )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains bcr_simpson_diversity bcr_simpson_stderr #> 1_AAACCTGAGTAGGTGC-1        1             0.8112612         0.04143231  # Calculate multiple metrics res <- calc_diversity(   vdj_sce,   method = list(     simpson = abdiv::simpson,     shannon = abdiv::shannon   ) )  head(res@colData, 1) #> DataFrame with 1 row and 31 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains simpson_diversity simpson_stderr #>                      <integer>         <numeric>      <numeric> #> 1_AAACCTGAGTAGGTGC-1         1          0.811261       0.043289 #>                      shannon_diversity shannon_stderr #>                              <numeric>      <numeric> #> 1_AAACCTGAGTAGGTGC-1           2.93551       0.214168  # Return a data.frame instead of adding the results to the input object res <- calc_diversity(   vdj_so,   return_df = TRUE )  head(res, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains simpson_diversity simpson_stderr #> 1_AAACCTGAGTAGGTGC-1        1         0.8112612     0.04438304"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate frequency of cell groups present in the object — calc_frequency","title":"Calculate frequency of cell groups present in the object — calc_frequency","text":"Calculate frequency cell label present provided meta.data column. useful comparing proportion cells belonging different samples, cell types, clonotypes, isotypes, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate frequency of cell groups present in the object — calc_frequency","text":"","code":"calc_frequency(   input,   data_col,   cluster_col = NULL,   prefix = paste0(data_col, \"_\"),   return_df = FALSE )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate frequency of cell groups present in the object — calc_frequency","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing cell labels use calculating abundance. calculate clonotype abundance, provide column containing clonotype IDs, calculate isotype abundance provide column containing cell isotypes. default clonotype_id used calculations. cluster_col meta.data column containing cluster IDs use grouping cells calculating clonotype abundance prefix Prefix add new columns return_df Return results data.frame. set FALSE, results added input object.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate frequency of cell groups present in the object — calc_frequency","text":"Single cell object data.frame clonotype abundance metrics","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate frequency of cell groups present in the object — calc_frequency","text":"","code":"# Calculate clonotype abundance using all cells res <- calc_frequency(   vdj_so,   data_col = \"clonotype_id\" )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains clonotype_id_freq clonotype_id_pct #> 1_AAACCTGAGTAGGTGC-1        1                38         42.69663 #>                      clonotype_id_grp #> 1_AAACCTGAGTAGGTGC-1               38  # Group cells based on meta.data column before calculating abundance res <- calc_frequency(   vdj_sce,   data_col = \"clonotype_id\",   cluster_col = \"orig.ident\" )  head(res@colData, 1) #> DataFrame with 1 row and 31 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains clonotype_id_freq clonotype_id_pct #>                      <integer>         <integer>        <numeric> #> 1_AAACCTGAGTAGGTGC-1         1                18               36 #>                      clonotype_id_shared clonotype_id_grp #>                                <logical>         <factor> #> 1_AAACCTGAGTAGGTGC-1                TRUE               18  # Add a prefix to the new columns # this is useful if multiple abundance calculations are stored in the # meta.data res <- calc_frequency(   vdj_so,   data_col = \"clonotype_id\",   prefix = \"bcr_\" )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains bcr_freq  bcr_pct bcr_grp #> 1_AAACCTGAGTAGGTGC-1        1       38 42.69663      38  # Return a data.frame instead of adding the results to the input object res <- calc_frequency(   vdj_sce,   data_col = \"clonotype_id\",   return_df = TRUE )  head(res, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains clonotype_id_freq clonotype_id_pct #> 1_AAACCTGAGTAGGTGC-1        1                38         42.69663 #>                      clonotype_id_grp #> 1_AAACCTGAGTAGGTGC-1               38"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate V(D)J gene segment usage — calc_gene_usage","title":"Calculate V(D)J gene segment usage — calc_gene_usage","text":"Calculate V(D)J gene segment usage","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate V(D)J gene segment usage — calc_gene_usage","text":"","code":"calc_gene_usage(   input,   gene_cols,   cluster_col = NULL,   chain = NULL,   chain_col = \"chains\",   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate V(D)J gene segment usage — calc_gene_usage","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. gene_cols meta.data column containing V(D)J genes identified clonotype. multiple columns provided, paired usage genes calculated. cluster_col meta.data column containing cell clusters use calculating gene usage chain Chain use calculating gene usage. Set NULL include chains. chain_col meta.data column containing chains cell sep Separator used storing per cell V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate V(D)J gene segment usage — calc_gene_usage","text":"data.frame containing gene usage summary","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_gene_usage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate V(D)J gene segment usage — calc_gene_usage","text":"","code":"# Calculate V(D)J segment usage for all cells calc_gene_usage(   vdj_so,   gene_cols = \"v_gene\" ) #> # A tibble: 62 × 4 #>    v_gene     n_cells  freq   pct #>    <chr>        <int> <int> <dbl> #>  1 IGHV1-18        89     1  1.12 #>  2 IGHV1-22        89     1  1.12 #>  3 IGHV1-26        89     1  1.12 #>  4 IGHV1-47        89     1  1.12 #>  5 IGHV1-52        89     1  1.12 #>  6 IGHV1-53        89     1  1.12 #>  7 IGHV1-55        89     1  1.12 #>  8 IGHV1-62-2      89     1  1.12 #>  9 IGHV1-64        89     1  1.12 #> 10 IGHV1-66        89     1  1.12 #> # … with 52 more rows  # Calculate gene usage separately for cell clusters calc_gene_usage(   vdj_sce,   gene_cols = \"v_gene\",   cluster_col = \"orig.ident\" ) #> # A tibble: 124 × 5 #>    v_gene   orig.ident n_cells  freq   pct #>    <chr>    <chr>        <dbl> <int> <dbl> #>  1 IGHV1-18 avid_1          50     1  2    #>  2 IGHV1-18 avid_2          39     0  0    #>  3 IGHV1-22 avid_1          50     0  0    #>  4 IGHV1-22 avid_2          39     1  2.56 #>  5 IGHV1-26 avid_1          50     1  2    #>  6 IGHV1-26 avid_2          39     0  0    #>  7 IGHV1-47 avid_1          50     0  0    #>  8 IGHV1-47 avid_2          39     1  2.56 #>  9 IGHV1-52 avid_1          50     0  0    #> 10 IGHV1-52 avid_2          39     1  2.56 #> # … with 114 more rows  # Calculate gene usage for a specific chain(s) calc_gene_usage(   vdj_so,   gene_cols = \"v_gene\",   chain = c(\"IGK\", \"IGL\") ) #> # A tibble: 38 × 4 #>    v_gene     n_cells  freq   pct #>    <chr>        <int> <int> <dbl> #>  1 IGKV1-110       89     2  2.25 #>  2 IGKV1-117       89     3  3.37 #>  3 IGKV1-135       89     2  2.25 #>  4 IGKV10-94       89     3  3.37 #>  5 IGKV10-96       89     4  4.49 #>  6 IGKV12-44       89     1  1.12 #>  7 IGKV12-46       89     1  1.12 #>  8 IGKV13-85       89     1  1.12 #>  9 IGKV14-100      89     1  1.12 #> 10 IGKV14-111      89     3  3.37 #> # … with 28 more rows  # Calculate paired usage of V(D)J segments calc_gene_usage(   vdj_sce,   gene_cols = c(\"v_gene\", \"j_gene\"), ) #> # A tibble: 76 × 5 #>    v_gene     j_gene n_cells  freq   pct #>    <chr>      <chr>    <int> <int> <dbl> #>  1 IGHV1-18   IGHJ4       89     1  1.12 #>  2 IGHV1-22   IGHJ3       89     1  1.12 #>  3 IGHV1-26   IGHJ4       89     1  1.12 #>  4 IGHV1-47   IGHJ3       89     1  1.12 #>  5 IGHV1-52   IGHJ2       89     1  1.12 #>  6 IGHV1-53   IGHJ3       89     1  1.12 #>  7 IGHV1-55   IGHJ3       89     1  1.12 #>  8 IGHV1-62-2 IGHJ1       89     1  1.12 #>  9 IGHV1-64   IGHJ4       89     1  1.12 #> 10 IGHV1-66   IGHJ2       89     1  1.12 #> # … with 66 more rows"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate repertoire overlap — calc_similarity","title":"Calculate repertoire overlap — calc_similarity","text":"Calculate repertoire overlap","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate repertoire overlap — calc_similarity","text":"","code":"calc_similarity(   input,   cluster_col,   method = abdiv::jaccard,   clonotype_col = \"clonotype_id\",   prefix = NULL,   return_mat = FALSE )"},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate repertoire overlap — calc_similarity","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. cluster_col meta.data column containing cluster IDs use calculating repertoire overlap method Method use calculating similarity clusters clonotype_col meta.data column containing clonotype IDs use calculating overlap prefix Prefix add new columns return_mat Return matrix similarity values. set FALSE, results added input object.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate repertoire overlap — calc_similarity","text":"Single cell object data.frame similarity values","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/calc_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate repertoire overlap — calc_similarity","text":"","code":"# Calculate repertoire overlap res <- calc_similarity(   vdj_so,   clonotype_col = \"clonotype_id\",   cluster_col = \"orig.ident\",   method = abdiv::jaccard )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains jaccard_avid_1 jaccard_avid_2 #> 1_AAACCTGAGTAGGTGC-1        1              0      0.9807692  # Add a prefix to the new columns # this is useful if multiple calculations are stored in the meta.data res <- calc_similarity(   vdj_sce,   cluster_col = \"orig.ident\",   prefix = \"bcr_\" )  head(res@colData, 1) #> DataFrame with 1 row and 29 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains bcr_avid_1 bcr_avid_2 #>                      <integer>  <numeric>  <numeric> #> 1_AAACCTGAGTAGGTGC-1         1          0   0.980769  # Return a matrix instead of adding the results to the input object calc_similarity(   vdj_so,   cluster_col = \"orig.ident\",   return_mat = TRUE ) #>           avid_1 #> avid_2 0.9807692"},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Define clonotypes based on V(D)J data — define_clonotypes","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"assign new clonotype IDs based combination values present provided columns","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"","code":"define_clonotypes(   input,   vdj_cols,   clonotype_col = \"clonotype_id\",   filter_chains = c(\"productive\", \"full_length\"),   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. vdj_cols meta.data columns containing V(D)J data use defining clonotypes clonotype_col Name column use storing clonotype IDs filter_chains Column(s) use filtering chains prior defining clonotypes (e.g. productive, full_length). column(s) must contain TRUE FALSE chain. NULL, chains used defining clonotypes. sep Separator used storing per cell V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"Single cell object data.frame added clonotype IDs","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/define_clonotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define clonotypes based on V(D)J data — define_clonotypes","text":"","code":"# Define clonotypes using the CDR3 nucleotide sequence res <- define_clonotypes(   vdj_so,   vdj_cols = \"cdr3_nt\" )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2   v_gene d_gene #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224 IGKV5-43   None #>                      j_gene c_gene chains isotype        cdr3 #> 1_AAACCTGAGTAGGTGC-1  IGKJ2   IGKC    IGK    None CQQSNSWPYTF #>                                                cdr3_nt reads umis #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054   70 #>                      productive full_length paired n_insertion n_deletion #> 1_AAACCTGAGTAGGTGC-1       TRUE        TRUE  FALSE           0          4 #>                      n_mismatch cdr3_length cdr3_nt_length n_chains #> 1_AAACCTGAGTAGGTGC-1          2          11             33        1 #>                      clonotype_id #> 1_AAACCTGAGTAGGTGC-1  clonotype16  # Define clonotypes based on the combination of the CDR3 nucleotide sequence # and the V and J genes res <- define_clonotypes(   vdj_sce,   vdj_cols = c(\"cdr3_nt\", \"v_gene\", \"j_gene\") )  head(res@colData, 1) #> DataFrame with 1 row and 27 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2      v_gene #>                             <factor> <numeric> <numeric> <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622    IGKV5-43 #>                           d_gene      j_gene      c_gene      chains #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        None       IGKJ2        IGKC         IGK #>                          isotype        cdr3                cdr3_nt #>                      <character> <character>            <character> #> 1_AAACCTGAGTAGGTGC-1        None CQQSNSWPYTF TGTCAACAGAGTAACAGCTG.. #>                            reads        umis  productive full_length #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        1054          70        TRUE        TRUE #>                         paired n_insertion  n_deletion  n_mismatch #>                      <logical> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1     FALSE           0           4           2 #>                      cdr3_length cdr3_nt_length  n_chains clonotype_id #>                      <character>    <character> <integer>  <character> #> 1_AAACCTGAGTAGGTGC-1          11             33         1  clonotype16  # Modify the name of the column used to store clonotype IDs res <- define_clonotypes(   vdj_so,   vdj_cols = \"cdr3_nt\",   clonotype_col = \"NEW_clonotype_id\" )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains NEW_clonotype_id #> 1_AAACCTGAGTAGGTGC-1        1      clonotype16  # When defining clonotypes only use chains that are productive res <- define_clonotypes(   vdj_sce,   vdj_cols = \"cdr3_nt\",   filter_chains = \"productive\" )  head(res@colData, 1) #> DataFrame with 1 row and 27 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2      v_gene #>                             <factor> <numeric> <numeric> <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622    IGKV5-43 #>                           d_gene      j_gene      c_gene      chains #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        None       IGKJ2        IGKC         IGK #>                          isotype        cdr3                cdr3_nt #>                      <character> <character>            <character> #> 1_AAACCTGAGTAGGTGC-1        None CQQSNSWPYTF TGTCAACAGAGTAACAGCTG.. #>                            reads        umis  productive full_length #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        1054          70        TRUE        TRUE #>                         paired n_insertion  n_deletion  n_mismatch #>                      <logical> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1     FALSE           0           4           2 #>                      cdr3_length cdr3_nt_length  n_chains clonotype_id #>                      <character>    <character> <integer>  <character> #> 1_AAACCTGAGTAGGTGC-1          11             33         1  clonotype16"},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj-package.html","id":null,"dir":"Reference","previous_headings":"","what":"djvdj: A collection of single-cell V(D)J tools — djvdj-package","title":"djvdj: A collection of single-cell V(D)J tools — djvdj-package","text":"djvdj provides range tools analyze single-cell V(D)J data.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"djvdj: A collection of single-cell V(D)J tools — djvdj-package","text":"Maintainer: Ryan Sheridan ryan.sheridan@cuanschutz.edu (ORCID) contributors: Jay Hesselberth jay.hesselberth@gmail.com [contributor] Rui Fu raysinensis@gmail.com [contributor] Kent Riemondy kent.riemondy@ucdenver.edu [contributor] RNA Bioscience Initiative [funder]","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for djvdj plotting functions — djvdj_theme","title":"Theme for djvdj plotting functions — djvdj_theme","text":"Theme djvdj plotting functions","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for djvdj plotting functions — djvdj_theme","text":"","code":"djvdj_theme(   ttl_size = 12,   txt_size = 8,   ln_size = 0.5,   txt_col = \"black\",   ln_col = \"grey85\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for djvdj plotting functions — djvdj_theme","text":"ttl_size Size axis titles txt_size Size axis text ln_size Size axis lines txt_col Color axis text ln_col Color axis lines","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/djvdj_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme for djvdj plotting functions — djvdj_theme","text":"ggplot theme","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch V(D)J data from object — fetch_vdj","title":"Fetch V(D)J data from object — fetch_vdj","text":"Fetch per-chain V(D)J data object. Within object meta.data, row represents single cell can include information multiple chains. function returns unnested data.frame row represents single chain. useful plotting per-chain metrics CDR3 length number insertions/deletions.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch V(D)J data from object — fetch_vdj","text":"","code":"fetch_vdj(   input,   vdj_cols = NULL,   clonotype_col = NULL,   filter_cells = FALSE,   unnest = TRUE,   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch V(D)J data from object — fetch_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. vdj_cols meta.data columns containing per-chain V(D)J data unnest. NULL, V(D)J data automatically selected identifying columns NAs rows clonotype_col. clonotype_col meta.data column containing clonotype IDs. column used determine columns V(D)J data. clonotype_col vdj_cols NULL, columns included. filter_cells Remove cells V(D)J data, clonotype_col must provided determine cells filter. unnest FALSE, nested data.frame returned row represents cell V(D)J data stored list-cols. TRUE, columns unnested row represents single chain. sep Separator used storing per cell V(D)J data. used identify columns containing per-chain data can unnested.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch V(D)J data from object — fetch_vdj","text":"data.frame containing V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/fetch_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch V(D)J data from object — fetch_vdj","text":"","code":"# Fetch per-chain V(D)J data fetch_vdj(vdj_so) #> # A tibble: 258 × 28 #>    .cell_id             orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>    <chr>                <chr>           <dbl>        <int> <fct>           #>  1 1_AAACCTGAGTAGGTGC-1 avid_1              1            1 1               #>  2 1_AAACCTGAGTCAAGCG-1 avid_1              0            0 1               #>  3 1_AAACCTGAGTCAAGCG-1 avid_1              0            0 1               #>  4 1_AAACCTGCAGTTTACG-1 avid_1              4            4 0               #>  5 1_AAACCTGCAGTTTACG-1 avid_1              4            4 0               #>  6 1_AAACCTGCAGTTTACG-1 avid_1              4            4 0               #>  7 1_AAACCTGCATAGGATA-1 avid_1              9            8 0               #>  8 1_AACGTTGTCGGAAACG-1 avid_1              1            1 1               #>  9 1_AATCGGTAGTTGTAGA-1 avid_1              1            1 1               #> 10 1_ACATCAGAGTGTTTGC-1 avid_1              2            2 0               #> # … with 248 more rows, and 23 more variables: seurat_clusters <fct>, #> #   UMAP_1 <dbl>, UMAP_2 <dbl>, clonotype_id <chr>, v_gene <chr>, #> #   d_gene <chr>, j_gene <chr>, c_gene <chr>, chains <chr>, #> #   isotype <chr>, cdr3 <chr>, cdr3_nt <chr>, reads <dbl>, umis <dbl>, #> #   productive <lgl>, full_length <lgl>, paired <lgl>, n_insertion <dbl>, #> #   n_deletion <dbl>, n_mismatch <dbl>, cdr3_length <dbl>, #> #   cdr3_nt_length <dbl>, n_chains <int>  # To increase performance, specify which columns to return per-chain data, # per-cell data will be returned for all other columns fetch_vdj(   vdj_sce,   vdj_cols = c(\"chains\", \"n_insertion\") ) #> # A tibble: 258 × 28 #>    .cell_id             orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>    <chr>                <chr>           <dbl>        <int> <fct>           #>  1 1_AAACCTGAGTAGGTGC-1 avid_1              1            1 1               #>  2 1_AAACCTGAGTCAAGCG-1 avid_1              0            0 1               #>  3 1_AAACCTGAGTCAAGCG-1 avid_1              0            0 1               #>  4 1_AAACCTGCAGTTTACG-1 avid_1              4            4 0               #>  5 1_AAACCTGCAGTTTACG-1 avid_1              4            4 0               #>  6 1_AAACCTGCAGTTTACG-1 avid_1              4            4 0               #>  7 1_AAACCTGCATAGGATA-1 avid_1              9            8 0               #>  8 1_AACGTTGTCGGAAACG-1 avid_1              1            1 1               #>  9 1_AATCGGTAGTTGTAGA-1 avid_1              1            1 1               #> 10 1_ACATCAGAGTGTTTGC-1 avid_1              2            2 0               #> # … with 248 more rows, and 23 more variables: seurat_clusters <fct>, #> #   UMAP_1 <dbl>, UMAP_2 <dbl>, clonotype_id <chr>, v_gene <chr>, #> #   d_gene <chr>, j_gene <chr>, c_gene <chr>, chains <chr>, #> #   isotype <chr>, cdr3 <chr>, cdr3_nt <chr>, reads <chr>, umis <chr>, #> #   productive <chr>, full_length <chr>, paired <lgl>, n_insertion <dbl>, #> #   n_deletion <chr>, n_mismatch <chr>, cdr3_length <chr>, #> #   cdr3_nt_length <chr>, n_chains <int>  # Only include cells that have V(D)J data # clonotype_col must be specified to identify cells with V(D)J data fetch_vdj(   vdj_so,   filter_cells = TRUE,   clonotype_col = \"clonotype_id\" ) #> # A tibble: 143 × 28 #>    .cell_id             orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>    <chr>                <chr>           <dbl>        <int> <fct>           #>  1 1_AAACCTGAGTAGGTGC-1 avid_1              1            1 1               #>  2 1_AAACCTGAGTCAAGCG-1 avid_1              0            0 1               #>  3 1_AAACCTGAGTCAAGCG-1 avid_1              0            0 1               #>  4 1_AAACCTGCAGTTTACG-1 avid_1              4            4 0               #>  5 1_AAACCTGCAGTTTACG-1 avid_1              4            4 0               #>  6 1_AAACCTGCAGTTTACG-1 avid_1              4            4 0               #>  7 1_AAACCTGCATAGGATA-1 avid_1              9            8 0               #>  8 1_ACCTTTATCAGTCAGT-1 avid_1              4            4 0               #>  9 1_ACCTTTATCAGTCAGT-1 avid_1              4            4 0               #> 10 1_ACCTTTATCAGTCAGT-1 avid_1              4            4 0               #> # … with 133 more rows, and 23 more variables: seurat_clusters <fct>, #> #   UMAP_1 <dbl>, UMAP_2 <dbl>, clonotype_id <chr>, v_gene <chr>, #> #   d_gene <chr>, j_gene <chr>, c_gene <chr>, chains <chr>, #> #   isotype <chr>, cdr3 <chr>, cdr3_nt <chr>, reads <dbl>, umis <dbl>, #> #   productive <lgl>, full_length <lgl>, paired <lgl>, n_insertion <dbl>, #> #   n_deletion <dbl>, n_mismatch <dbl>, cdr3_length <dbl>, #> #   cdr3_nt_length <dbl>, n_chains <int>"},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter V(D)J data in object — filter_vdj","title":"Filter V(D)J data in object — filter_vdj","text":"Remove V(D)J data chains/cells satisfy provided condition","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter V(D)J data in object — filter_vdj","text":"","code":"filter_vdj(   input,   filt,   vdj_cols = NULL,   clonotype_col = \"clonotype_id\",   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter V(D)J data in object — filter_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. filt Condition use filtering V(D)J data. allow filtering per-chain V(D)J data, data cell converted vector, e.g. 'IGH;IGK' equivalent c('IGH', 'IGK'). allows R vector operations performed per-chain values. filtering condition must return TRUE/FALSE chain single TRUE/FALSE cell. Data can filtered based cell barcodes referring '.cell_id' column. vdj_cols meta.data columns containing V(D)J data use filtering. NULL, V(D)J data automatically selected identifying columns NAs rows clonotype_col. clonotype_col meta.data column containing clonotype IDs. column used determine columns contain V(D)J data. sep Separator used storing per cell V(D)J data. NULL, columns containing V(D)J data converted vectors filtering.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter V(D)J data in object — filter_vdj","text":"Object filtered meta.data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/filter_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter V(D)J data in object — filter_vdj","text":"","code":"# Only include V(D)J data for productive chains res <- filter_vdj(vdj_so, productive)  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains #> 1_AAACCTGAGTAGGTGC-1        1  # Only include V(D)J data for cells with paired chains res <- filter_vdj(vdj_sce, paired)  head(res@colData, 3) #> DataFrame with 3 rows and 27 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1      avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1      avid_1          4            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622           NA #> 1_AAACCTGAGTCAAGCG-1               1  -3.40268  6.838597           NA #> 1_AAACCTGCAGTTTACG-1               0   1.19011 -2.108460 clonotype537 #>                                      v_gene         d_gene #>                                 <character>    <character> #> 1_AAACCTGAGTAGGTGC-1                     NA             NA #> 1_AAACCTGAGTCAAGCG-1                     NA             NA #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGK.. None;None;None #>                                 j_gene         c_gene      chains #>                            <character>    <character> <character> #> 1_AAACCTGAGTAGGTGC-1                NA             NA          NA #> 1_AAACCTGAGTCAAGCG-1                NA             NA          NA #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK #>                          isotype                   cdr3 #>                      <character>            <character> #> 1_AAACCTGAGTAGGTGC-1          NA                     NA #> 1_AAACCTGAGTCAAGCG-1          NA                     NA #> 1_AAACCTGCAGTTTACG-1        IGHM CATLWYDAMDYW;CQQSNSW.. #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1                     NA          NA          NA #> 1_AAACCTGAGTCAAGCG-1                     NA          NA          NA #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGA.. 144;460;156     7;28;10 #>                          productive    full_length    paired n_insertion #>                         <character>    <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1             NA             NA        NA          NA #> 1_AAACCTGAGTCAAGCG-1             NA             NA        NA          NA #> 1_AAACCTGCAGTTTACG-1 TRUE;TRUE;TRUE TRUE;TRUE;TRUE      TRUE       4;0;0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1          NA          NA          NA             NA #> 1_AAACCTGAGTCAAGCG-1          NA          NA          NA             NA #> 1_AAACCTGCAGTTTACG-1       0;4;3       4;2;0    12;11;11       36;33;33 #>                       n_chains #>                      <integer> #> 1_AAACCTGAGTAGGTGC-1        NA #> 1_AAACCTGAGTCAAGCG-1        NA #> 1_AAACCTGCAGTTTACG-1         3  # Only include V(D)J data for cells with at least one heavy and one light chain res <- filter_vdj(   vdj_so,   \"IGH\" %in% chains && any(c(\"IGK\", \"IGL\") %in% chains) )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224         <NA> #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974         <NA> #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                                        v_gene         d_gene #> 1_AAACCTGAGTAGGTGC-1                     <NA>           <NA> #> 1_AAACCTGAGTCAAGCG-1                     <NA>           <NA> #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGKV3-2 None;None;None #>                                 j_gene         c_gene      chains isotype #> 1_AAACCTGAGTAGGTGC-1              <NA>           <NA>        <NA>    <NA> #> 1_AAACCTGAGTCAAGCG-1              <NA>           <NA>        <NA>    <NA> #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK    IGHM #>                                                      cdr3 #> 1_AAACCTGAGTAGGTGC-1                                 <NA> #> 1_AAACCTGAGTCAAGCG-1                                 <NA> #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW;CQQSNSWPYTF;CQQSKEVPRTF #>                                                                                                                       cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                                                                                     <NA> #> 1_AAACCTGAGTCAAGCG-1                                                                                                     <NA> #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGATGCTATGGACTACTGG;TGTCAACAGAGTAACAGCTGGCCGTACACGTTC;TGTCAGCAAAGTAAGGAGGTTCCTCGGACGTTC #>                            reads    umis     productive    full_length #> 1_AAACCTGAGTAGGTGC-1        <NA>    <NA>           <NA>           <NA> #> 1_AAACCTGAGTCAAGCG-1        <NA>    <NA>           <NA>           <NA> #> 1_AAACCTGCAGTTTACG-1 144;460;156 7;28;10 TRUE;TRUE;TRUE TRUE;TRUE;TRUE #>                      paired n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1     NA        <NA>       <NA>       <NA>        <NA> #> 1_AAACCTGAGTCAAGCG-1     NA        <NA>       <NA>       <NA>        <NA> #> 1_AAACCTGCAGTTTACG-1   TRUE       4;0;0      0;4;3      4;2;0    12;11;11 #>                      cdr3_nt_length n_chains #> 1_AAACCTGAGTAGGTGC-1           <NA>       NA #> 1_AAACCTGAGTCAAGCG-1           <NA>       NA #> 1_AAACCTGCAGTTTACG-1       36;33;33        3  # Only include V(D)J data for cells that have an IGH, IGK, and IGL chain res <- filter_vdj(   vdj_sce,   all(c(\"IGH\", \"IGK\", \"IGL\") %in% chains) )  head(res@colData, 1) #> DataFrame with 1 row and 27 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622           NA #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1          NA          NA          NA          NA #>                           chains     isotype        cdr3     cdr3_nt #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1          NA          NA          NA          NA #>                            reads        umis  productive full_length #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1          NA          NA          NA          NA #>                         paired n_insertion  n_deletion  n_mismatch #>                      <logical> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        NA          NA          NA          NA #>                      cdr3_length cdr3_nt_length  n_chains #>                      <character>    <character> <integer> #> 1_AAACCTGAGTAGGTGC-1          NA             NA        NA  # Only include V(D)J data for heavy chains res <- filter_vdj(vdj_so, chains == \"IGH\")  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224         <NA> #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974         <NA> #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                       v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1    <NA>   <NA>   <NA>   <NA>   <NA>    <NA> #> 1_AAACCTGAGTCAAGCG-1    <NA>   <NA>   <NA>   <NA>   <NA>    <NA> #> 1_AAACCTGCAGTTTACG-1 IGHV1-9   None  IGHJ4   IGHM    IGH    IGHM #>                              cdr3                              cdr3_nt #> 1_AAACCTGAGTAGGTGC-1         <NA>                                 <NA> #> 1_AAACCTGAGTCAAGCG-1         <NA>                                 <NA> #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW TGTGCAACTCTATGGTACGATGCTATGGACTACTGG #>                      reads umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1  <NA> <NA>       <NA>        <NA>     NA        <NA> #> 1_AAACCTGAGTCAAGCG-1  <NA> <NA>       <NA>        <NA>     NA        <NA> #> 1_AAACCTGCAGTTTACG-1   144    7       TRUE        TRUE   TRUE           4 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1       <NA>       <NA>        <NA>           <NA> #> 1_AAACCTGAGTCAAGCG-1       <NA>       <NA>        <NA>           <NA> #> 1_AAACCTGCAGTTTACG-1          0          4          12             36 #>                      n_chains #> 1_AAACCTGAGTAGGTGC-1       NA #> 1_AAACCTGAGTCAAGCG-1       NA #> 1_AAACCTGCAGTTTACG-1        3  # Remove chains that only have 1 UMI for support res <- filter_vdj(vdj_sce, umis > 1)  head(res@colData, 1) #> DataFrame with 1 row and 27 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains #>                      <integer> #> 1_AAACCTGAGTAGGTGC-1         1  # Filter based on cell barcode res <- filter_vdj(vdj_so, .cell_id == \"1_AAACCTGAGTAGGTGC-1\")  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974         <NA> #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603         <NA> #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #> 1_AAACCTGAGTCAAGCG-1     <NA>   <NA>   <NA>   <NA>   <NA>    <NA> #> 1_AAACCTGCAGTTTACG-1     <NA>   <NA>   <NA>   <NA>   <NA>    <NA> #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #> 1_AAACCTGAGTCAAGCG-1        <NA>                              <NA>  <NA> #> 1_AAACCTGCAGTTTACG-1        <NA>                              <NA>  <NA> #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #> 1_AAACCTGAGTCAAGCG-1 <NA>       <NA>        <NA>     NA        <NA> #> 1_AAACCTGCAGTTTACG-1 <NA>       <NA>        <NA>     NA        <NA> #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #> 1_AAACCTGAGTCAAGCG-1       <NA>       <NA>        <NA>           <NA> #> 1_AAACCTGCAGTTTACG-1       <NA>       <NA>        <NA>           <NA> #>                      n_chains #> 1_AAACCTGAGTAGGTGC-1        1 #> 1_AAACCTGAGTCAAGCG-1       NA #> 1_AAACCTGCAGTTTACG-1       NA"},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Import V(D)J data — import_vdj","title":"Import V(D)J data — import_vdj","text":"Import V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import V(D)J data — import_vdj","text":"","code":"import_vdj(   input = NULL,   vdj_dir = NULL,   prefix = \"\",   filter_chains = TRUE,   filter_paired = FALSE,   define_clonotypes = NULL,   include_mutations = TRUE,   aggr_dir = NULL,   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import V(D)J data — import_vdj","text":"input Object containing single cell data, set NULL data.frame containing V(D)J results returned vdj_dir Directory containing output cellranger vdj. vector named vector can given load data multiple runs. named vector given, cell barcodes prefixed provided names. mimics behavior Seurat::Read10X(). prefix Prefix add new columns filter_chains include chains least one productive full length contig. filter_paired include clonotypes paired chains. TCR data clonotype must least one TRA TRB chain, BCR data clonotype must least one IGH chain least one IGK IGL chain. define_clonotypes Define clonotype IDs based V(D)J data. useful V(D)J datasets loaded consistent clonotype IDs, .e., clonotype1 across samples. Possible values : cdr3aa, define clonotypes based CDR3 amino acid sequence cdr3nt, define clonotypes based CDR3 nucleotide sequence cdr3_gene, define clonotypes based combination CDR3 nucleotide sequence V(D)J genes. defining clonotypes, productive full length chains used. Set NULL (default) use clonotype IDs already present input data. include_mutations Include information number insertions/deletions/mismatches chain. requires concat_ref.bam file cellranger vdj present directory provided vdj_dir. include_mutations TRUE, filter_chains also automatically set TRUE since indel data available productive chains. aggr_dir Path cellranger aggr output. include mutation information chain, also provide paths original cellranger vdj output directories using vdj_dir argument. correctly match cell barcodes object, gene expression data sample must loaded order samples specified cellranger aggr config file. addition, loading mutation data, sample paths provided vdj_dir argument must also order samples specified cellranger aggr config file. sep Separator use storing per cell V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import V(D)J data — import_vdj","text":"Single cell object data.frame added V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/import_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import V(D)J data — import_vdj","text":"","code":"# Loading multiple datasets vdj_dir <- c(   system.file(\"extdata/bcr_1/outs\", package = \"djvdj\"),   system.file(\"extdata/bcr_2/outs\", package = \"djvdj\") )  vdj_so <- import_vdj(tiny_so, vdj_dir, include_mutations = FALSE)  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                      chains n_chains        cdr3 #> 1_AAACCTGAGTAGGTGC-1    IGK        1 CQQSNSWPYTF #>                                                cdr3_nt cdr3_length #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC          11 #>                      cdr3_nt_length   v_gene d_gene j_gene c_gene isotype #> 1_AAACCTGAGTAGGTGC-1             33 IGKV5-43   None  IGKJ2   IGKC    None #>                      reads umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1  1054   70       TRUE        TRUE  FALSE  # Specifying cell prefixes # if cell prefixes are not specified when loading multiple datasets, # prefixes will be automatically generated in a similar manner as # Seurat::Read10X vdj_so <- import_vdj(   tiny_so,   vdj_dir = vdj_dir,   include_mutations = FALSE )  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                      chains n_chains        cdr3 #> 1_AAACCTGAGTAGGTGC-1    IGK        1 CQQSNSWPYTF #>                                                cdr3_nt cdr3_length #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC          11 #>                      cdr3_nt_length   v_gene d_gene j_gene c_gene isotype #> 1_AAACCTGAGTAGGTGC-1             33 IGKV5-43   None  IGKJ2   IGKC    None #>                      reads umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1  1054   70       TRUE        TRUE  FALSE  # Specifying cell prefixes using vector names # if a named vector is passed, the names will be used as the cell prefixes vdj_dir <- c(   \"1\" = system.file(\"extdata/bcr_1/outs\", package = \"djvdj\"),   \"2\" = system.file(\"extdata/bcr_2/outs\", package = \"djvdj\") )  vdj_so <- import_vdj(tiny_so, vdj_dir, include_mutations = FALSE)  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                      chains n_chains        cdr3 #> 1_AAACCTGAGTAGGTGC-1    IGK        1 CQQSNSWPYTF #>                                                cdr3_nt cdr3_length #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC          11 #>                      cdr3_nt_length   v_gene d_gene j_gene c_gene isotype #> 1_AAACCTGAGTAGGTGC-1             33 IGKV5-43   None  IGKJ2   IGKC    None #>                      reads umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1  1054   70       TRUE        TRUE  FALSE  # Only include V(D)J data for productive full length chains vdj_so <- import_vdj(   tiny_so,   vdj_dir = vdj_dir,   filter_chains = TRUE,   include_mutations = FALSE )  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                      chains n_chains        cdr3 #> 1_AAACCTGAGTAGGTGC-1    IGK        1 CQQSNSWPYTF #>                                                cdr3_nt cdr3_length #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC          11 #>                      cdr3_nt_length   v_gene d_gene j_gene c_gene isotype #> 1_AAACCTGAGTAGGTGC-1             33 IGKV5-43   None  IGKJ2   IGKC    None #>                      reads umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1  1054   70       TRUE        TRUE  FALSE  # Only include V(D)J data for cells with paired chains vdj_so <- import_vdj(   tiny_so,   vdj_dir = vdj_dir,   filter_paired = TRUE,   include_mutations = FALSE )  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224         <NA> #>                      chains n_chains cdr3 cdr3_nt cdr3_length #> 1_AAACCTGAGTAGGTGC-1   <NA>       NA <NA>    <NA>        <NA> #>                      cdr3_nt_length v_gene d_gene j_gene c_gene isotype #> 1_AAACCTGAGTAGGTGC-1           <NA>   <NA>   <NA>   <NA>   <NA>    <NA> #>                      reads umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1  <NA> <NA>       <NA>        <NA>     NA  # Defining clonotypes # this is useful if the original clonotype IDs are not consistent across # datasets, i.e. clonotype1 is not the same for all samples vdj_so <- import_vdj(   tiny_so,   vdj_dir = vdj_dir,   define_clonotypes = \"cdr3_gene\",   include_mutations = FALSE )  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 chains n_chains #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224    IGK        1 #>                             cdr3                           cdr3_nt #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #>                      cdr3_length cdr3_nt_length   v_gene d_gene j_gene #> 1_AAACCTGAGTAGGTGC-1          11             33 IGKV5-43   None  IGKJ2 #>                      c_gene isotype reads umis productive full_length #> 1_AAACCTGAGTAGGTGC-1   IGKC    None  1054   70       TRUE        TRUE #>                      paired clonotype_id #> 1_AAACCTGAGTAGGTGC-1  FALSE  clonotype16  # Omit indel information for each chain # this information will be included if the file concat_ref.bam is present # to speed up data import, omit indel information vdj_so <- import_vdj(   tiny_so,   vdj_dir = vdj_dir,   include_mutations = FALSE )  head(vdj_so@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                      chains n_chains        cdr3 #> 1_AAACCTGAGTAGGTGC-1    IGK        1 CQQSNSWPYTF #>                                                cdr3_nt cdr3_length #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC          11 #>                      cdr3_nt_length   v_gene d_gene j_gene c_gene isotype #> 1_AAACCTGAGTAGGTGC-1             33 IGKV5-43   None  IGKJ2   IGKC    None #>                      reads umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1  1054   70       TRUE        TRUE  FALSE  # Using import_vdj outside of Seurat # SingleCellExperiment objects are also compatible, or if an input object is # omitted, a data.frame containing the V(D)J data will be returned vdj_sce <- import_vdj(tiny_sce, vdj_dir) #> Warning: airr_rearrangement.tsv not found in /home/runner/work/_temp/Library/djvdj/extdata/bcr_1/outs. #> Warning: airr_rearrangement.tsv not found in /home/runner/work/_temp/Library/djvdj/extdata/bcr_2/outs.  head(vdj_sce@colData, 1) #> DataFrame with 1 row and 33 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           chains  n_chains        cdr3 #>                      <character> <integer> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK         1 CQQSNSWPYTF #>                                     cdr3_nt cdr3_length cdr3_nt_length #>                                 <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..          11             33 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                          isotype       reads        umis  productive #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        None        1054          70        TRUE #>                      full_length    paired         len       all_S #>                      <character> <logical> <character> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE     FALSE         497           0 #>                          all_del     all_mis     all_ins  all_S_freq #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1           4           2           0           0 #>                             all_del_freq        all_mis_freq all_ins_freq #>                              <character>         <character>  <character> #> 1_AAACCTGAGTAGGTGC-1 0.00804828973843058 0.00402414486921529            0  vdj_df <- import_vdj(vdj_dir = vdj_dir, include_mutations = FALSE)  head(vdj_df, 1) #>                     clonotype_id chains n_chains        cdr3 #> 1AAACCTGAGTAGGTGC-1   clonotype1    IGK        1 CQQSNSWPYTF #>                                               cdr3_nt cdr3_length #> 1AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTGGCCGTACACGTTC          11 #>                     cdr3_nt_length   v_gene d_gene j_gene c_gene isotype #> 1AAACCTGAGTAGGTGC-1             33 IGKV5-43   None  IGKJ2   IGKC    None #>                     reads umis productive full_length paired #> 1AAACCTGAGTAGGTGC-1  1054   70       TRUE        TRUE  FALSE"},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify object meta.data — mutate_meta","title":"Modify object meta.data — mutate_meta","text":"Modify object meta.data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify object meta.data — mutate_meta","text":"","code":"mutate_meta(input, fn, ...)"},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify object meta.data — mutate_meta","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. fn Function use modifying object meta.data. can either function, e.g. mean, purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE) \".x\" refers meta.data table. ... Additional arguments pass provided function","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify object meta.data — mutate_meta","text":"Object mutated meta.data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify object meta.data — mutate_meta","text":"","code":"# Sum two meta.data columns # all additional arguments provided to mutate_meta() are passed directly to # the function (in this case, dplyr::mutate()) res <- mutate_meta(   tiny_so,   dplyr::mutate,   NEW = nCount_RNA + nFeature_RNA )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 NEW #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   2  # Pass a purrr-style lambda # this produces the same result as the previous example res <- mutate_meta(   tiny_so,   ~ dplyr::mutate(.x, NEW = nCount_RNA + nFeature_RNA) )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 NEW #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   2  # Modify multiple meta.data columns res <- mutate_meta(   tiny_sce,   dplyr::mutate,   NEW_1 = nCount_RNA + nFeature_RNA,   NEW_2 = stringr::str_c(orig.ident, seurat_clusters) )  head(res@colData, 1) #> DataFrame with 1 row and 9 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2     NEW_1 #>                             <factor> <numeric> <numeric> <numeric> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622         2 #>                            NEW_2 #>                      <character> #> 1_AAACCTGAGTAGGTGC-1     avid_11  # Remove meta.data columns # any function can be passed to mutate_meta(), in this example # dplyr::select() is used to remove columns res <- mutate_meta(   tiny_so,   dplyr::select,   -UMAP_1 )  head(res@meta.data, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters     UMAP_2 #> 1_AAACCTGAGTAGGTGC-1               1 -0.6746224  # Perform grouped operations using dplyr # multi-line commands can be passed using brackets, just refer to the # meta.data with \".x\" # this calculates the mean number of features for each group in the # orig.ident meta.data column res <- mutate_meta(tiny_sce, ~ {   y <- dplyr::group_by(.x, orig.ident)   y <- dplyr::mutate(y, mean_genes = mean(nFeature_RNA))   y })  head(res@colData, 1) #> DataFrame with 1 row and 8 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 mean_genes #>                             <factor> <numeric> <numeric>  <numeric> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622       2.32"},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify V(D)J data in object — mutate_vdj","title":"Modify V(D)J data in object — mutate_vdj","text":"Modify per-chain V(D)J data cell. function offers greater flexibility summarize_vdj(), less user-friendly.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify V(D)J data in object — mutate_vdj","text":"","code":"mutate_vdj(   input,   ...,   clonotype_col = \"clonotype_id\",   vdj_cols = NULL,   return_df = FALSE,   sep = \";\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify V(D)J data in object — mutate_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. ... Name-value pairs use creating modifying per-chain V(D)J meta.data, e.g. mean_umis = mean(umis). allow modification per-chain V(D)J data, data cell converted vector, e.g. 'IGH;IGK' equivalent c('IGH', 'IGK'). allows R vector operations performed per-chain values. operations produce result greater length 1 need returned list(), e.g. new_col = umis + 1 return new value chain, prevent error must written new_col = list(umis + 1). clonotype_col meta.data column containing clonotype IDs. used identify columns containing V(D)J data. vdj_cols meta.data columns containing V(D)J data modify. NULL, data automatically selected identifying columns NAs rows clonotype_col. return_df Return results data.frame. FALSE, results added input object. sep Separator used storing per cell V(D)J data. NULL, columns containing V(D)J data converted vectors filtering.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify V(D)J data in object — mutate_vdj","text":"Object modified meta.data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/mutate_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify V(D)J data in object — mutate_vdj","text":"","code":"# Calculate mean reads and UMIs per cell res <- mutate_vdj(   vdj_so,   mean_umis  = mean(umis),   mean_reads = mean(reads) )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                                        v_gene         d_gene #> 1_AAACCTGAGTAGGTGC-1                 IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1      IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGKV3-2 None;None;None #>                                 j_gene         c_gene      chains isotype #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK    None #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK    None #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK    IGHM #>                                                      cdr3 #> 1_AAACCTGAGTAGGTGC-1                          CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1              CQQYNSYPYTF;CLQHGESPYTF #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW;CQQSNSWPYTF;CQQSKEVPRTF #>                                                                                                                       cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                                                        TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #> 1_AAACCTGAGTCAAGCG-1                                      TGTCAGCAATATAACAGCTATCCGTACACGTTC;TGTCTACAGCATGGTGAGAGCCCGTACACGTTC #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGATGCTATGGACTACTGG;TGTCAACAGAGTAACAGCTGGCCGTACACGTTC;TGTCAGCAAAGTAAGGAGGTTCCTCGGACGTTC #>                            reads    umis     productive    full_length #> 1_AAACCTGAGTAGGTGC-1        1054      70           TRUE           TRUE #> 1_AAACCTGAGTCAAGCG-1     570;234   31;17      TRUE;TRUE      TRUE;TRUE #> 1_AAACCTGCAGTTTACG-1 144;460;156 7;28;10 TRUE;TRUE;TRUE TRUE;TRUE;TRUE #>                      paired n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1  FALSE           0          4          2          11 #> 1_AAACCTGAGTCAAGCG-1  FALSE         0;0        4;4        0;0       11;11 #> 1_AAACCTGCAGTTTACG-1   TRUE       4;0;0      0;4;3      4;2;0    12;11;11 #>                      cdr3_nt_length n_chains mean_umis mean_reads #> 1_AAACCTGAGTAGGTGC-1             33        1        70  1054.0000 #> 1_AAACCTGAGTCAAGCG-1          33;33        2        24   402.0000 #> 1_AAACCTGCAGTTTACG-1       36;33;33        3        15   253.3333  # Calculate the total number of insertions + deletions for each chain # we have to wrap our expression in list() since a value is returned for # each chain res <- mutate_vdj(   vdj_sce,   indels = list(n_insertion + n_deletion) )  head(res@colData, 3) #> DataFrame with 3 rows and 28 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1      avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1      avid_1          4            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1  -3.40268  6.838597 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0   1.19011 -2.108460 clonotype537 #>                                      v_gene         d_gene #>                                 <character>    <character> #> 1_AAACCTGAGTAGGTGC-1               IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1    IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGK.. None;None;None #>                                 j_gene         c_gene      chains #>                            <character>    <character> <character> #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK #>                          isotype                   cdr3 #>                      <character>            <character> #> 1_AAACCTGAGTAGGTGC-1        None            CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1        None CQQYNSYPYTF;CLQHGESP.. #> 1_AAACCTGCAGTTTACG-1        IGHM CATLWYDAMDYW;CQQSNSW.. #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #> 1_AAACCTGAGTCAAGCG-1 TGTCAGCAATATAACAGCTA..     570;234       31;17 #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGA.. 144;460;156     7;28;10 #>                          productive    full_length    paired n_insertion #>                         <character>    <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1           TRUE           TRUE     FALSE           0 #> 1_AAACCTGAGTCAAGCG-1      TRUE;TRUE      TRUE;TRUE     FALSE         0;0 #> 1_AAACCTGCAGTTTACG-1 TRUE;TRUE;TRUE TRUE;TRUE;TRUE      TRUE       4;0;0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #> 1_AAACCTGAGTCAAGCG-1         4;4         0;0       11;11          33;33 #> 1_AAACCTGCAGTTTACG-1       0;4;3       4;2;0    12;11;11       36;33;33 #>                       n_chains      indels #>                      <integer> <character> #> 1_AAACCTGAGTAGGTGC-1         1           4 #> 1_AAACCTGAGTCAAGCG-1         2         4;4 #> 1_AAACCTGCAGTTTACG-1         3       4;4;3  # Create a new column showing the unique chains for each cell res <- mutate_vdj(   vdj_so,   unique_chains = stringr::str_c(unique(chains), collapse = \"_\") )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                                        v_gene         d_gene #> 1_AAACCTGAGTAGGTGC-1                 IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1      IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGKV3-2 None;None;None #>                                 j_gene         c_gene      chains isotype #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK    None #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK    None #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK    IGHM #>                                                      cdr3 #> 1_AAACCTGAGTAGGTGC-1                          CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1              CQQYNSYPYTF;CLQHGESPYTF #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW;CQQSNSWPYTF;CQQSKEVPRTF #>                                                                                                                       cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                                                        TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #> 1_AAACCTGAGTCAAGCG-1                                      TGTCAGCAATATAACAGCTATCCGTACACGTTC;TGTCTACAGCATGGTGAGAGCCCGTACACGTTC #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGATGCTATGGACTACTGG;TGTCAACAGAGTAACAGCTGGCCGTACACGTTC;TGTCAGCAAAGTAAGGAGGTTCCTCGGACGTTC #>                            reads    umis     productive    full_length #> 1_AAACCTGAGTAGGTGC-1        1054      70           TRUE           TRUE #> 1_AAACCTGAGTCAAGCG-1     570;234   31;17      TRUE;TRUE      TRUE;TRUE #> 1_AAACCTGCAGTTTACG-1 144;460;156 7;28;10 TRUE;TRUE;TRUE TRUE;TRUE;TRUE #>                      paired n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1  FALSE           0          4          2          11 #> 1_AAACCTGAGTCAAGCG-1  FALSE         0;0        4;4        0;0       11;11 #> 1_AAACCTGCAGTTTACG-1   TRUE       4;0;0      0;4;3      4;2;0    12;11;11 #>                      cdr3_nt_length n_chains unique_chains #> 1_AAACCTGAGTAGGTGC-1             33        1           IGK #> 1_AAACCTGAGTCAAGCG-1          33;33        2           IGK #> 1_AAACCTGCAGTTTACG-1       36;33;33        3       IGH_IGK  # Determine which cells have both an IGK and IGL chain res <- mutate_vdj(   vdj_sce,   both_light = all(c(\"IGK\", \"IGL\") %in% chains) )  head(res@colData, 1) #> DataFrame with 1 row and 28 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains both_light #>                      <integer>  <logical> #> 1_AAACCTGAGTAGGTGC-1         1      FALSE  # Determine which cells have multiple light chains res <- mutate_vdj(   vdj_so,   multi_light = sum(chains %in% c(\"IGK\", \"IGL\")) > 1 )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                                        v_gene         d_gene #> 1_AAACCTGAGTAGGTGC-1                 IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1      IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGKV3-2 None;None;None #>                                 j_gene         c_gene      chains isotype #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK    None #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK    None #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK    IGHM #>                                                      cdr3 #> 1_AAACCTGAGTAGGTGC-1                          CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1              CQQYNSYPYTF;CLQHGESPYTF #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW;CQQSNSWPYTF;CQQSKEVPRTF #>                                                                                                                       cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                                                        TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #> 1_AAACCTGAGTCAAGCG-1                                      TGTCAGCAATATAACAGCTATCCGTACACGTTC;TGTCTACAGCATGGTGAGAGCCCGTACACGTTC #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGATGCTATGGACTACTGG;TGTCAACAGAGTAACAGCTGGCCGTACACGTTC;TGTCAGCAAAGTAAGGAGGTTCCTCGGACGTTC #>                            reads    umis     productive    full_length #> 1_AAACCTGAGTAGGTGC-1        1054      70           TRUE           TRUE #> 1_AAACCTGAGTCAAGCG-1     570;234   31;17      TRUE;TRUE      TRUE;TRUE #> 1_AAACCTGCAGTTTACG-1 144;460;156 7;28;10 TRUE;TRUE;TRUE TRUE;TRUE;TRUE #>                      paired n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1  FALSE           0          4          2          11 #> 1_AAACCTGAGTCAAGCG-1  FALSE         0;0        4;4        0;0       11;11 #> 1_AAACCTGCAGTTTACG-1   TRUE       4;0;0      0;4;3      4;2;0    12;11;11 #>                      cdr3_nt_length n_chains multi_light #> 1_AAACCTGAGTAGGTGC-1             33        1       FALSE #> 1_AAACCTGAGTCAAGCG-1          33;33        2        TRUE #> 1_AAACCTGCAGTTTACG-1       36;33;33        3        TRUE"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clonal_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clonotype abundance — plot_clonal_abundance","title":"Plot clonotype abundance — plot_clonal_abundance","text":"Plot clonotype abundance","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clonal_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clonotype abundance — plot_clonal_abundance","text":"","code":"plot_clonal_abundance(   input,   cluster_col = NULL,   clonotype_col = \"clonotype_id\",   type = \"bar\",   yaxis = \"percent\",   plot_colors = NULL,   plot_lvls = NULL,   n_clones = 10,   label_aes = list(),   facet_rows = 1,   facet_scales = \"free_x\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clonal_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clonotype abundance — plot_clonal_abundance","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. cluster_col meta.data column containing cluster IDs use grouping cells calculating clonotype abundance. Clonotypes plotted separately cluster. clonotype_col meta.data column containing clonotype IDs use calculating clonotype abundance type Type plot create, can 'bar' 'line' yaxis Units plot y-axis, either 'frequency' 'percent' plot_colors Character vector containing colors plotting plot_lvls Character vector containing levels ordering n_clones Number top clonotypes plot. type set 'line', specify number values label. label_aes Named list providing additional aesthetics (color, size, etc.) clonotype labels creating line graph facet_rows number facet rows, use separate bar graphs created cell cluster facet_scales passes scales specification ggplot2::facet_wrap, can 'fixed', 'free', 'free_x', 'free_y'. 'fixed' cause plot facets share scales. Use separate bar graphs created cell cluster. ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clonal_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot clonotype abundance — plot_clonal_abundance","text":"ggplot object","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_clonal_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot clonotype abundance — plot_clonal_abundance","text":"","code":"# Plot clonotype abundance using all cells plot_clonal_abundance(   vdj_so,   data_col = \"clonotype_id\" ) #> Warning: Ignoring unknown parameters: data_col   # Plot clonotype abundance separately for each cell cluster plot_clonal_abundance(   vdj_sce,   cluster_col = \"orig.ident\" )   # Plot the frequency of each clonotype instead of percentage plot_clonal_abundance(   vdj_sce,   cluster_col = \"orig.ident\",   yaxis = \"frequency\" )   # Specify colors to use for each cell cluster plot_clonal_abundance(   vdj_so,   cluster_col = \"orig.ident\",   plot_colors = c(avid_1 = \"blue\", avid_2 = \"red\") )   # Specify order to use for plotting cell clusters plot_clonal_abundance(   vdj_sce,   cluster_col = \"orig.ident\",   plot_lvls = c(\"avid_2\", \"avid_1\") )   # Specify the number of top clonotypes to plot plot_clonal_abundance(   vdj_so,   n_clones = 5 )   #' # Create line graph # use n_clones to set the number of clonotypes to label plot_clonal_abundance(   vdj_so,   cluster_col = \"orig.ident\",   type = \"line\",   n_clones = 3 )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot repertoire diversity — plot_diversity","title":"Plot repertoire diversity — plot_diversity","text":"Plot repertoire diversity","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot repertoire diversity — plot_diversity","text":"","code":"plot_diversity(   input,   cluster_col = NULL,   group_col = NULL,   method = abdiv::simpson,   clonotype_col = \"clonotype_id\",   plot_colors = NULL,   plot_lvls = NULL,   facet_rows = 1,   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot repertoire diversity — plot_diversity","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. cluster_col meta.data column containing cluster IDs use grouping cells calculating clonotype abundance group_col meta.data column use grouping IDs present cluster_col method Function use calculating diversity. named list functions can passed plot multiple diversity metrics, e.g. list(simpson = abdiv::simpson, shannon = abdiv::shannon) clonotype_col meta.data column containing clonotype IDs use calculating repertoire diversity plot_colors Character vector containing colors plotting plot_lvls Character vector containing levels ordering facet_rows number facet rows, use argument list functions passed method ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot repertoire diversity — plot_diversity","text":"ggplot object","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot repertoire diversity — plot_diversity","text":"","code":"# Plot diversity using all cells plot_diversity(vdj_so)   # Specify method to use for calculating repertoire diversity plot_diversity(   vdj_sce,   method = abdiv::shannon )   # Plot diversity separately for each cell cluster plot_diversity(   vdj_so,   cluster_col = \"orig.ident\" )   # Plot multiple diversity metrics plot_diversity(   vdj_sce,   cluster_col = \"orig.ident\",   method = list(simpson = abdiv::simpson, shannon = abdiv::shannon) )   # Specify colors to use for each cell cluster plot_diversity(   vdj_so,   cluster_col = \"orig.ident\",   plot_colors = c(avid_2 = \"green\", avid_1 = \"purple\") )   # Specify order to use for plotting cell clusters plot_diversity(   vdj_sce,   cluster_col = \"orig.ident\",   plot_lvls = c(\"avid_2\", \"avid_1\") )   # Specify how to organize facets when plotting multiple metrics  mets <- list(   simpson = abdiv::simpson,   shannon = abdiv::shannon )  plot_diversity(   vdj_so,   method = mets,   facet_rows = 2 )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 2D feature plot — plot_features","title":"Create 2D feature plot — plot_features","text":"Create scatter plot cells colored based provided feature. can used create dimensional reduction plots (e.g. UMAP, tSNE, PCA) compare different cell attributes (e.g. CD4 vs CD8 expression). plot_vdj_feature() allows per-chain V(D)J data summarized plotted cell.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 2D feature plot — plot_features","text":"","code":"plot_features(input, ...)  # S3 method for default plot_features(   input,   feature,   x = \"UMAP_1\",   y = \"UMAP_2\",   plot_colors = NULL,   plot_lvls = NULL,   min_q = NULL,   max_q = NULL,   na_color = \"grey50\",   ... )  # S3 method for Seurat plot_features(   input,   feature,   x = \"UMAP_1\",   y = \"UMAP_2\",   data_slot = \"data\",   plot_colors = NULL,   plot_lvls = NULL,   min_q = NULL,   max_q = NULL,   na_color = \"grey50\",   ... )  plot_vdj_feature(input, ...)  # S3 method for default plot_vdj_feature(   input,   data_col,   x = \"UMAP_1\",   y = \"UMAP_2\",   summary_fn = NULL,   chain = NULL,   plot_lvls = NULL,   min_q = NULL,   max_q = NULL,   na_color = \"grey50\",   chain_col = \"chains\",   sep = \";\",   ... )  # S3 method for Seurat plot_vdj_feature(   input,   data_col,   x = \"UMAP_1\",   y = \"UMAP_2\",   data_slot = \"data\",   summary_fn = NULL,   chain = NULL,   plot_lvls = NULL,   min_q = NULL,   max_q = NULL,   na_color = \"grey50\",   chain_col = \"chains\",   sep = \";\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create 2D feature plot — plot_features","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc. feature Variable use coloring points x Variable plot x-axis y Variable plot y-axis plot_colors Vector colors use plotting plot_lvls Levels use ordering feature min_q Minimum quantile cutoff color scale. max_q Maximum quantile cutoff color scale. na_color Color use missing values data_slot Slot Seurat object pull data data_col meta.data column containing V(D)J data use coloring cells summary_fn Function use summarizing values cell, possible values can either function, e.g. mean, purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE) \".x\" refers column. NULL, mean calculated numeric values, non-numeric columns combined single string. chain Chain(s) use filtering data plotting. NULL data filtered based chain. chain_col meta.data column containing chains cell sep Separator used storing per-chain V(D)J data cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 2D feature plot — plot_features","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 2D feature plot — plot_features","text":"","code":"# Create UMAP with cells colored based on sample name plot_features(   tiny_so,   feature = \"orig.ident\" )   # Compare UMI counts for each cell with number of genes detected plot_features(   tiny_sce,   feature = \"orig.ident\",   x = \"nFeature_RNA\",   y = \"nCount_RNA\" )   # Plot average CDR3 length for each cell for light chains plot_vdj_feature(   vdj_so,   data_col = \"cdr3_length\",   summary_fn = mean,   chain = c(\"IGK\", \"IGL\") )   # Plot median number of insertions for each cell plot_vdj_feature(   vdj_sce,   data_col = \"n_insertion\",   summary_fn = stats::median )   # Using a lambda function to summarize values # use \".x\" to refer to values in the column # this calculates the mean number of deletions for each cell and # log10-transforms the result plot_vdj_feature(   vdj_so,   data_col = \"n_deletion\",   summary_fn = ~ log10(mean(.x) + 1) )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot frequency of cell groups/labels present in the object — plot_frequency","title":"Plot frequency of cell groups/labels present in the object — plot_frequency","text":"Plot frequency cell label present provided meta.data column. useful comparing proportion cells belonging different samples, cell types, isotypes, etc. compare clonotype frequency, use plot_clonal_abundance() function.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot frequency of cell groups/labels present in the object — plot_frequency","text":"","code":"plot_frequency(   input,   data_col,   cluster_col = NULL,   group_col = NULL,   yaxis = \"percent\",   plot_colors = NULL,   plot_lvls = NULL,   facet_rows = NULL,   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot frequency of cell groups/labels present in the object — plot_frequency","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_col meta.data column containing cell labels use calculating abundance. calculate clonotype abundance, provide column containing clonotype IDs, calculate isotype abundance provide column containing cell isotypes. default clonotype_id used calculations. cluster_col meta.data column containing cluster IDs (patients, treatment conditions, etc.) use calculating frequency. Calculations performed separately cluster. group_col meta.data column use grouping cluster IDs present cluster_col. useful multiple replicates patients treatment condition. yaxis Units plot y-axis, either 'frequency' 'percent' plot_colors Character vector containing colors plotting plot_lvls Character vector containing levels ordering facet_rows number facet rows, use separate bar graphs created cell cluster ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot frequency of cell groups/labels present in the object — plot_frequency","text":"ggplot object","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot V(D)J gene usage — plot_gene_usage","title":"Plot V(D)J gene usage — plot_gene_usage","text":"Plot V(D)J gene usage","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot V(D)J gene usage — plot_gene_usage","text":"","code":"plot_gene_usage(   input,   gene_cols,   cluster_col = NULL,   chain = NULL,   type = \"bar\",   plot_colors = NULL,   vdj_genes = NULL,   n_genes = 50,   plot_lvls = NULL,   yaxis = \"percent\",   chain_col = \"chains\",   sep = \";\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot V(D)J gene usage — plot_gene_usage","text":"input Object containing V(D)J data. data.frame provided, cell barcodes stored row names. gene_cols meta.data column containing genes clonotype, provide vector two column names plot paired usage genes cluster_col meta.data column containing cell clusters use calculating gene usage chain Chain use calculating gene usage, set NULL include chains type Type plot create, can either 'heatmap' 'bar'. multiple columns provided gene_cols, heatmap generated. plot_colors Character vector containing colors use plot. bar graph created specify color cell clusters. heatmap, colors used generate color gradient. vdj_genes V(D)J genes plot, NULL top genes shown n_genes Number top genes plot based usage. cluster_col provided, top genes identified cluster. plot_lvls Levels use ordering clusters yaxis Units plot y-axis, either 'frequency' 'percent' chain_col meta.data column containing chains cell sep Separator used storing per-chain V(D)J data cell ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot V(D)J gene usage — plot_gene_usage","text":"ggplot object","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_gene_usage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot V(D)J gene usage — plot_gene_usage","text":"","code":"# Plot V(D)J segment usage for all cells plot_gene_usage(   vdj_so,   gene_cols = \"v_gene\" )   # Plot gene usage separately for cell clusters plot_gene_usage(   vdj_sce,   gene_cols = \"v_gene\",   cluster_col = \"orig.ident\" )   # Plot gene usage for a specific chain plot_gene_usage(   vdj_so,   gene_cols = \"v_gene\",   chain = c(\"IGH\", \"IGK\") )   # Plot gene usage for a specific chain plot_gene_usage(   vdj_sce,   gene_cols = \"v_gene\",   chain = c(\"IGH\", \"IGK\") )   # Create a heatmap plot_gene_usage(   vdj_so,   gene_cols = \"v_gene\",   type = \"heatmap\" )   # Plot paired usage of V(D)J segments plot_gene_usage(   vdj_sce,   gene_cols = c(\"v_gene\", \"j_gene\"), )   # Specify colors to use for each cell cluster plot_gene_usage(   vdj_so,   gene_cols = \"v_gene\",   cluster_col = \"orig.ident\",   plot_colors = c(avid_2 = \"blue\", avid_1 = \"green\") )   # Specify order to use for plotting cell clusters plot_gene_usage(   vdj_sce,   gene_cols = \"v_gene\",   cluster_col = \"orig.ident\",   plot_lvls = c(\"avid_2\", \"avid_1\") )   # Specify certain V(D)J genes to include in plot plot_gene_usage(   vdj_so,   gene_cols = \"v_gene\",   vdj_genes = c(\"IGKV5-43\", \"IGLV1\", \"IGHV1-64\") )   # Specify the number of top V(D)J genes to include in plot plot_gene_usage(   vdj_sce,   gene_cols = \"v_gene\",   n_genes = 10 )   # Plot the frequency of each V(D)J segment instead of percent plot_gene_usage(   vdj_so,   gene_cols = \"v_gene\",   yaxis = \"frequency\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot repertoire overlap — plot_similarity","title":"Plot repertoire overlap — plot_similarity","text":"Plot repertoire overlap","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot repertoire overlap — plot_similarity","text":"","code":"plot_similarity(   input,   cluster_col,   method = abdiv::jaccard,   clonotype_col = \"clonotype_id\",   plot_colors = NULL,   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot repertoire overlap — plot_similarity","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. cluster_col meta.data column containing cluster IDs use calculating overlap method Method use calculating similarity clusters clonotype_col meta.data column containing clonotype IDs use calculating overlap plot_colors Character vector containing colors plotting ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot repertoire overlap — plot_similarity","text":"ggplot object","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot repertoire overlap — plot_similarity","text":"","code":"# Plot repertoire overlap plot_similarity(   vdj_so,   cluster_col = \"orig.ident\" )   # Specify method to use for calculating repertoire overlap plot_similarity(   vdj_sce,   cluster_col = \"orig.ident\",   method = abdiv::jaccard )   # Specify colors to use for heatmap plot_similarity(   vdj_so,   cluster_col = \"orig.ident\",   plot_color = c(\"white\", \"red\") )   # Pass additional aesthetic parameters to ggplot2 plot_similarity(   vdj_sce,   cluster_col = \"orig.ident\",   color = \"black\",   size = 2 )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot continuous V(D)J data — plot_vdj","title":"Plot continuous V(D)J data — plot_vdj","text":"Compare V(D)J data cell clusters","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot continuous V(D)J data — plot_vdj","text":"","code":"plot_vdj(   input,   data_cols,   per_cell = FALSE,   summary_fn = mean,   cluster_col = NULL,   chain = NULL,   type = \"histogram\",   yaxis = \"frequency\",   plot_colors = NULL,   plot_lvls = NULL,   log_trans = FALSE,   chain_col = \"chains\",   sep = \";\",   ... )  plot_vdj_reads(   input,   data_cols = c(\"reads\", \"umis\"),   cluster_col = NULL,   chain = NULL,   type = \"violin\",   yaxis = \"frequency\",   plot_colors = NULL,   plot_lvls = NULL,   log_trans = TRUE,   chain_col = \"chains\",   sep = \";\",   ... )  plot_cdr3_length(   input,   data_cols = \"cdr3_length\",   cluster_col = NULL,   chain = NULL,   type = \"histogram\",   yaxis = \"frequency\",   plot_colors = NULL,   plot_lvls = NULL,   log_trans = TRUE,   chain_col = \"chains\",   sep = \";\",   ... )  plot_vdj_mutations(   input,   data_cols = c(\"all_ins\", \"all_del\", \"all_mis\"),   cluster_col = NULL,   chain = NULL,   type = \"boxplot\",   yaxis = \"frequency\",   plot_colors = NULL,   plot_lvls = NULL,   log_trans = FALSE,   chain_col = \"chains\",   sep = \";\",   ... )"},{"path":"https://rnabioco.github.io/djvdj/reference/plot_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot continuous V(D)J data — plot_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. data_cols meta.data column(s) containing continuous V(D)J data plot per_cell values plotted per cell, .e. data point represent one cell. TRUE, values summarized cell using summary_fn. FALSE, values plotted chain. summary_fn Function use summarizing values per_cell TRUE, possible values can either function, e.g. mean, purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE) \".x\" refers column. NULL, mean calculated. cluster_col meta.data column containing cluster IDs use grouping cells plotting chain Chain(s) use filtering data plotting. NULL data filtered based chain. type Type plot create, can 'histogram', 'density', 'boxplot', 'violin' yaxis Units use y-axis type set 'histogram'. Use 'frequency' show number values 'percent' show percentage total values. plot_colors Character vector specifying colors use cell clusters specified cluster_col. cluster_col NULL, plot colors can directly modified ggplot2 parameters color fill, e.g. fill = \"red\", color = \"black\" plot_lvls Character vector containing order use plotting cell clusters specified cluster_col log_trans TRUE, axis log10 transformed chain_col meta.data column containing chains cell sep Separator used storing per-chain V(D)J data cell ... Additional arguments pass ggplot2, e.g. color, fill, size, linetype, etc.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/plot_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot continuous V(D)J data — plot_vdj","text":"ggplot object","code":""},{"path":[]},{"path":"https://rnabioco.github.io/djvdj/reference/plot_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot continuous V(D)J data — plot_vdj","text":"","code":"# Plot the number of indels for each chain plot_vdj(   vdj_so,   data_cols = c(\"n_insertion\", \"n_deletion\") ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Create boxplots plot_vdj(   vdj_sce,   data_cols = c(\"n_insertion\", \"n_deletion\"),   type = \"boxplot\" )   # Pass additional arguments to ggplot2 plot_vdj(   vdj_so,   data_cols = \"reads\",   color = \"red\",   bins = 25 )   # Compare cell clusters plot_vdj(   vdj_sce,   data_cols = \"cdr3_length\",   cluster_col = \"orig.ident\",   type = \"violin\" )   # log10 transform the axis plot_vdj(   vdj_so,   data_cols = \"reads\",   cluster_col = \"orig.ident\",   log_trans = TRUE ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Express y-axis units as percent of total values plot_vdj(   vdj_sce,   data_cols = \"n_deletion\",   cluster_col = \"orig.ident\",   yaxis = \"percent\" ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Only plot values for heavy chains plot_vdj(   vdj_so,   data_cols = \"umis\",   chain = \"IGH\" ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Plot the median number of deletions for each cell plot_vdj(   vdj_sce,   data_cols = \"n_deletion\",   per_cell = TRUE,   summary_fn = stats::median ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Set colors for cell clusters plot_vdj(   vdj_so,   data_cols = \"cdr3_length\",   cluster_col = \"orig.ident\",   plot_colors = c(avid_1 = \"red\", avid_2 = \"purple\") ) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   # Set order to use for plotting cell clusters plot_vdj(   vdj_sce,   data_cols = \"cdr3_length\",   cluster_col = \"orig.ident\",   plot_lvls = c(\"avid_2\", \"avid_1\"),   type = \"boxplot\" )"},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize V(D)J data for each cell — summarize_vdj","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"Summarize per-chain values cell using function purrr-style lambda. useful plotting filtering cells based V(D)J meta.data.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"","code":"summarize_vdj(   input,   vdj_cols,   fn = NULL,   ...,   chain = NULL,   chain_col = \"chains\",   sep = \";\",   col_names = \"{.col}\",   return_df = FALSE )"},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"input Single cell object data.frame containing V(D)J data. data.frame provided, cell barcodes stored row names. vdj_cols meta.data column(s) containing V(D)J data summarize cell fn Function apply selected column, possible values can either function, e.g. mean, purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE). NULL, mean calculated numeric values, non-numeric columns combined single string. ... Additional arguments pass fn chain Chain use summarizing V(D)J data chain_col meta.data column(s) containing chains cell sep Separator used storing per cell V(D)J data col_names glue specification describes name output columns, use {.col} refer original column name. col_names NULL, original column names used. return_df Return results data.frame. FALSE, results added input object.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"Object containing V(D)J data summarized cell","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/summarize_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize V(D)J data for each cell — summarize_vdj","text":"","code":"# Summarize numeric columns # by default the mean will be calculated for numeric columns res <- summarize_vdj(   vdj_so,   vdj_cols = c(\"n_deletion\", \"n_insertion\") )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                                        v_gene         d_gene #> 1_AAACCTGAGTAGGTGC-1                 IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1      IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGKV3-2 None;None;None #>                                 j_gene         c_gene      chains isotype #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK    None #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK    None #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK    IGHM #>                                                      cdr3 #> 1_AAACCTGAGTAGGTGC-1                          CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1              CQQYNSYPYTF;CLQHGESPYTF #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW;CQQSNSWPYTF;CQQSKEVPRTF #>                                                                                                                       cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                                                        TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #> 1_AAACCTGAGTCAAGCG-1                                      TGTCAGCAATATAACAGCTATCCGTACACGTTC;TGTCTACAGCATGGTGAGAGCCCGTACACGTTC #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGATGCTATGGACTACTGG;TGTCAACAGAGTAACAGCTGGCCGTACACGTTC;TGTCAGCAAAGTAAGGAGGTTCCTCGGACGTTC #>                            reads    umis     productive    full_length #> 1_AAACCTGAGTAGGTGC-1        1054      70           TRUE           TRUE #> 1_AAACCTGAGTCAAGCG-1     570;234   31;17      TRUE;TRUE      TRUE;TRUE #> 1_AAACCTGCAGTTTACG-1 144;460;156 7;28;10 TRUE;TRUE;TRUE TRUE;TRUE;TRUE #>                      paired n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1  FALSE    0.000000   4.000000          2          11 #> 1_AAACCTGAGTCAAGCG-1  FALSE    0.000000   4.000000        0;0       11;11 #> 1_AAACCTGCAGTTTACG-1   TRUE    1.333333   2.333333      4;2;0    12;11;11 #>                      cdr3_nt_length n_chains #> 1_AAACCTGAGTAGGTGC-1             33        1 #> 1_AAACCTGAGTCAAGCG-1          33;33        2 #> 1_AAACCTGCAGTTTACG-1       36;33;33        3  # Specifying a different summary function # this calculates the median number of insertions and deletions for each # cell res <- summarize_vdj(   vdj_sce,   vdj_cols = c(\"n_deletion\", \"n_insertion\"),   fn = stats::median )  head(res@colData, 3) #> DataFrame with 3 rows and 27 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1      avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1      avid_1          4            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1  -3.40268  6.838597 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0   1.19011 -2.108460 clonotype537 #>                                      v_gene         d_gene #>                                 <character>    <character> #> 1_AAACCTGAGTAGGTGC-1               IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1    IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGK.. None;None;None #>                                 j_gene         c_gene      chains #>                            <character>    <character> <character> #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK #>                          isotype                   cdr3 #>                      <character>            <character> #> 1_AAACCTGAGTAGGTGC-1        None            CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1        None CQQYNSYPYTF;CLQHGESP.. #> 1_AAACCTGCAGTTTACG-1        IGHM CATLWYDAMDYW;CQQSNSW.. #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #> 1_AAACCTGAGTCAAGCG-1 TGTCAGCAATATAACAGCTA..     570;234       31;17 #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGA.. 144;460;156     7;28;10 #>                          productive    full_length    paired n_insertion #>                         <character>    <character> <logical>   <numeric> #> 1_AAACCTGAGTAGGTGC-1           TRUE           TRUE     FALSE           0 #> 1_AAACCTGAGTCAAGCG-1      TRUE;TRUE      TRUE;TRUE     FALSE           0 #> 1_AAACCTGCAGTTTACG-1 TRUE;TRUE;TRUE TRUE;TRUE;TRUE      TRUE           0 #>                      n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                       <numeric> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1          4           2          11             33 #> 1_AAACCTGAGTCAAGCG-1          4         0;0       11;11          33;33 #> 1_AAACCTGCAGTTTACG-1          3       4;2;0    12;11;11       36;33;33 #>                       n_chains #>                      <integer> #> 1_AAACCTGAGTAGGTGC-1         1 #> 1_AAACCTGAGTCAAGCG-1         2 #> 1_AAACCTGCAGTTTACG-1         3  # Summarize values for a specific chain res <- summarize_vdj(   vdj_so,   vdj_cols = c(\"n_deletion\", \"n_insertion\"),   chain = \"IGK\" )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603 clonotype537 #>                                        v_gene         d_gene #> 1_AAACCTGAGTAGGTGC-1                 IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1      IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGKV3-2 None;None;None #>                                 j_gene         c_gene      chains isotype #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK    None #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK    None #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK    IGHM #>                                                      cdr3 #> 1_AAACCTGAGTAGGTGC-1                          CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1              CQQYNSYPYTF;CLQHGESPYTF #> 1_AAACCTGCAGTTTACG-1 CATLWYDAMDYW;CQQSNSWPYTF;CQQSKEVPRTF #>                                                                                                                       cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                                                        TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #> 1_AAACCTGAGTCAAGCG-1                                      TGTCAGCAATATAACAGCTATCCGTACACGTTC;TGTCTACAGCATGGTGAGAGCCCGTACACGTTC #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGATGCTATGGACTACTGG;TGTCAACAGAGTAACAGCTGGCCGTACACGTTC;TGTCAGCAAAGTAAGGAGGTTCCTCGGACGTTC #>                            reads    umis     productive    full_length #> 1_AAACCTGAGTAGGTGC-1        1054      70           TRUE           TRUE #> 1_AAACCTGAGTCAAGCG-1     570;234   31;17      TRUE;TRUE      TRUE;TRUE #> 1_AAACCTGCAGTTTACG-1 144;460;156 7;28;10 TRUE;TRUE;TRUE TRUE;TRUE;TRUE #>                      paired n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1  FALSE           0        4.0          2          11 #> 1_AAACCTGAGTCAAGCG-1  FALSE           0        4.0        0;0       11;11 #> 1_AAACCTGCAGTTTACG-1   TRUE           0        3.5      4;2;0    12;11;11 #>                      cdr3_nt_length n_chains #> 1_AAACCTGAGTAGGTGC-1             33        1 #> 1_AAACCTGAGTCAAGCG-1          33;33        2 #> 1_AAACCTGCAGTTTACG-1       36;33;33        3  # Specifying new names for summarized columns # use {.col} to refer to the original column name res <- summarize_vdj(   vdj_sce,   vdj_cols = c(\"n_deletion\", \"n_insertion\"),   fn = stats::median,   col_names = \"median_{.col}\" )  head(res@colData, 1) #> DataFrame with 1 row and 29 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #>                           v_gene      d_gene      j_gene      c_gene #>                      <character> <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1    IGKV5-43        None       IGKJ2        IGKC #>                           chains     isotype        cdr3 #>                      <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1         IGK        None CQQSNSWPYTF #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #>                       productive full_length    paired n_insertion #>                      <character> <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1        TRUE        TRUE     FALSE           0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #>                       n_chains median_n_deletion median_n_insertion #>                      <integer>         <numeric>          <numeric> #> 1_AAACCTGAGTAGGTGC-1         1                 4                  0  # Return a data.frame instead of adding the results to the input object res <- summarize_vdj(   vdj_so,   vdj_cols = c(\"n_deletion\", \"n_insertion\"),   return_df = TRUE )  head(res, 1) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #>                      seurat_clusters   UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1 2.561658 -0.6746224   clonotype1 #>                        v_gene d_gene j_gene c_gene chains isotype #> 1_AAACCTGAGTAGGTGC-1 IGKV5-43   None  IGKJ2   IGKC    IGK    None #>                             cdr3                           cdr3_nt reads #> 1_AAACCTGAGTAGGTGC-1 CQQSNSWPYTF TGTCAACAGAGTAACAGCTGGCCGTACACGTTC  1054 #>                      umis productive full_length paired n_insertion #> 1_AAACCTGAGTAGGTGC-1   70       TRUE        TRUE  FALSE           0 #>                      n_deletion n_mismatch cdr3_length cdr3_nt_length #> 1_AAACCTGAGTAGGTGC-1          4          2          11             33 #>                      n_chains #> 1_AAACCTGAGTAGGTGC-1        1  # Using a lambda function to summarize values # use '.x' to refer to values in the column # this creates a new column showing the unique chains for each cell res <- summarize_vdj(   vdj_sce,   vdj_cols = \"chains\",   fn = ~ paste0(unique(.x), collapse = \"_\"),   col_names = \"unique_chains\" )  head(res@colData, 3) #> DataFrame with 3 rows and 28 columns #>                       orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #>                      <character>  <numeric>    <integer>        <factor> #> 1_AAACCTGAGTAGGTGC-1      avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1      avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1      avid_1          4            4               0 #>                      seurat_clusters    UMAP_1    UMAP_2 clonotype_id #>                             <factor> <numeric> <numeric>  <character> #> 1_AAACCTGAGTAGGTGC-1               1   2.56166 -0.674622   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1  -3.40268  6.838597 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0   1.19011 -2.108460 clonotype537 #>                                      v_gene         d_gene #>                                 <character>    <character> #> 1_AAACCTGAGTAGGTGC-1               IGKV5-43           None #> 1_AAACCTGAGTCAAGCG-1    IGKV6-15;IGKV14-126      None;None #> 1_AAACCTGCAGTTTACG-1 IGHV1-9;IGKV5-43;IGK.. None;None;None #>                                 j_gene         c_gene      chains #>                            <character>    <character> <character> #> 1_AAACCTGAGTAGGTGC-1             IGKJ2           IGKC         IGK #> 1_AAACCTGAGTCAAGCG-1       IGKJ2;IGKJ2      IGKC;IGKC     IGK;IGK #> 1_AAACCTGCAGTTTACG-1 IGHJ4;IGKJ2;IGKJ1 IGHM;IGKC;IGKC IGH;IGK;IGK #>                          isotype                   cdr3 #>                      <character>            <character> #> 1_AAACCTGAGTAGGTGC-1        None            CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1        None CQQYNSYPYTF;CLQHGESP.. #> 1_AAACCTGCAGTTTACG-1        IGHM CATLWYDAMDYW;CQQSNSW.. #>                                     cdr3_nt       reads        umis #>                                 <character> <character> <character> #> 1_AAACCTGAGTAGGTGC-1 TGTCAACAGAGTAACAGCTG..        1054          70 #> 1_AAACCTGAGTCAAGCG-1 TGTCAGCAATATAACAGCTA..     570;234       31;17 #> 1_AAACCTGCAGTTTACG-1 TGTGCAACTCTATGGTACGA.. 144;460;156     7;28;10 #>                          productive    full_length    paired n_insertion #>                         <character>    <character> <logical> <character> #> 1_AAACCTGAGTAGGTGC-1           TRUE           TRUE     FALSE           0 #> 1_AAACCTGAGTCAAGCG-1      TRUE;TRUE      TRUE;TRUE     FALSE         0;0 #> 1_AAACCTGCAGTTTACG-1 TRUE;TRUE;TRUE TRUE;TRUE;TRUE      TRUE       4;0;0 #>                       n_deletion  n_mismatch cdr3_length cdr3_nt_length #>                      <character> <character> <character>    <character> #> 1_AAACCTGAGTAGGTGC-1           4           2          11             33 #> 1_AAACCTGAGTCAAGCG-1         4;4         0;0       11;11          33;33 #> 1_AAACCTGCAGTTTACG-1       0;4;3       4;2;0    12;11;11       36;33;33 #>                       n_chains unique_chains #>                      <integer>   <character> #> 1_AAACCTGAGTAGGTGC-1         1           IGK #> 1_AAACCTGAGTCAAGCG-1         2           IGK #> 1_AAACCTGCAGTTTACG-1         3       IGH_IGK  # Creating an index column to use for filtering/plotting # this creates a column indicating which cells have no insertions # the V(D)J data can be filtered based on this new column res <- summarize_vdj(   vdj_so,   vdj_cols = \"n_insertion\",   fn = ~ all(.x == 0),   col_names = \"no_insertions\" )  res <- filter_vdj(   res,   filt = no_insertions )  head(res@meta.data, 3) #>                      orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.3 #> 1_AAACCTGAGTAGGTGC-1     avid_1          1            1               1 #> 1_AAACCTGAGTCAAGCG-1     avid_1          0            0               1 #> 1_AAACCTGCAGTTTACG-1     avid_1          4            4               0 #>                      seurat_clusters    UMAP_1     UMAP_2 clonotype_id #> 1_AAACCTGAGTAGGTGC-1               1  2.561658 -0.6746224   clonotype1 #> 1_AAACCTGAGTCAAGCG-1               1 -3.402685  6.8385974 clonotype536 #> 1_AAACCTGCAGTTTACG-1               0  1.190111 -2.1084603         <NA> #>                                   v_gene    d_gene      j_gene    c_gene #> 1_AAACCTGAGTAGGTGC-1            IGKV5-43      None       IGKJ2      IGKC #> 1_AAACCTGAGTCAAGCG-1 IGKV6-15;IGKV14-126 None;None IGKJ2;IGKJ2 IGKC;IGKC #> 1_AAACCTGCAGTTTACG-1                <NA>      <NA>        <NA>      <NA> #>                       chains isotype                    cdr3 #> 1_AAACCTGAGTAGGTGC-1     IGK    None             CQQSNSWPYTF #> 1_AAACCTGAGTCAAGCG-1 IGK;IGK    None CQQYNSYPYTF;CLQHGESPYTF #> 1_AAACCTGCAGTTTACG-1    <NA>    <NA>                    <NA> #>                                                                                  cdr3_nt #> 1_AAACCTGAGTAGGTGC-1                                   TGTCAACAGAGTAACAGCTGGCCGTACACGTTC #> 1_AAACCTGAGTCAAGCG-1 TGTCAGCAATATAACAGCTATCCGTACACGTTC;TGTCTACAGCATGGTGAGAGCCCGTACACGTTC #> 1_AAACCTGCAGTTTACG-1                                                                <NA> #>                        reads  umis productive full_length paired #> 1_AAACCTGAGTAGGTGC-1    1054    70       TRUE        TRUE  FALSE #> 1_AAACCTGAGTCAAGCG-1 570;234 31;17  TRUE;TRUE   TRUE;TRUE  FALSE #> 1_AAACCTGCAGTTTACG-1    <NA>  <NA>       <NA>        <NA>     NA #>                      n_insertion n_deletion n_mismatch cdr3_length #> 1_AAACCTGAGTAGGTGC-1           0          4          2          11 #> 1_AAACCTGAGTCAAGCG-1         0;0        4;4        0;0       11;11 #> 1_AAACCTGCAGTTTACG-1        <NA>       <NA>       <NA>        <NA> #>                      cdr3_nt_length n_chains no_insertions #> 1_AAACCTGAGTAGGTGC-1             33        1          TRUE #> 1_AAACCTGAGTCAAGCG-1          33;33        2          TRUE #> 1_AAACCTGCAGTTTACG-1           <NA>       NA            NA"},{"path":"https://rnabioco.github.io/djvdj/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"sym() creates symbol string syms() creates list symbols character vector. enquo() enquos() delay execution one several function arguments. enquo() returns single quoted expression, like blueprint delayed computation. enquos() returns list quoted expressions. expr() quotes new expression locally. mostly useful build new expressions around arguments captured enquo() enquos(): expr(mean(!!enquo(arg), na.rm = TRUE)). as_name() transforms quoted variable name string. Supplying something else quoted variable name error. unlike as_label() also returns single string supports kind R object input, including quoted function calls vectors. purpose summarise object single label. label often suitable default name. know quoted expression contains (instance expressions captured enquo() variable name, call function, unquoted constant), use as_label(). know quoted simple variable name, like enforce , use as_name(). learn tidy eval use tools, visit https://tidyeval.tidyverse.org Metaprogramming section Advanced R.","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"A tiny SingleCellExperiment object — tiny_sce","title":"A tiny SingleCellExperiment object — tiny_sce","text":"tiny SingleCellExperiment object","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tiny SingleCellExperiment object — tiny_sce","text":"","code":"tiny_sce"},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_sce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A tiny SingleCellExperiment object — tiny_sce","text":"SingleCellExperiment object 200 features, 204 cells, 1 assay","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_so.html","id":null,"dir":"Reference","previous_headings":"","what":"A tiny Seurat object — tiny_so","title":"A tiny Seurat object — tiny_so","text":"tiny Seurat object","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_so.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tiny Seurat object — tiny_so","text":"","code":"tiny_so"},{"path":"https://rnabioco.github.io/djvdj/reference/tiny_so.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A tiny Seurat object — tiny_so","text":"Seurat object 200 features, 204 cells, 1 assay","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","title":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","text":"tiny SingleCellExperiment object V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","text":"","code":"vdj_sce"},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_sce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A tiny SingleCellExperiment object with V(D)J data — vdj_sce","text":"SingleCellExperiment object 200 features, 204 cells, 1 assay","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_so.html","id":null,"dir":"Reference","previous_headings":"","what":"A tiny Seurat object with V(D)J data — vdj_so","title":"A tiny Seurat object with V(D)J data — vdj_so","text":"tiny Seurat object V(D)J data","code":""},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_so.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tiny Seurat object with V(D)J data — vdj_so","text":"","code":"vdj_so"},{"path":"https://rnabioco.github.io/djvdj/reference/vdj_so.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A tiny Seurat object with V(D)J data — vdj_so","text":"Seurat object 200 features, 204 cells, 1 assay","code":""},{"path":"https://rnabioco.github.io/djvdj/news/index.html","id":"djvdj-0009000","dir":"Changelog","previous_headings":"","what":"djvdj 0.0.0.9000","title":"djvdj 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
